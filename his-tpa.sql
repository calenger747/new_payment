/*
Navicat MySQL Data Transfer

Source Server         : Server
Source Server Version : 50505
Source Host           : 192.168.0.24:3306
Source Database       : his-tpa

Target Server Type    : MYSQL
Target Server Version : 50505
File Encoding         : 65001

Date: 2021-01-21 11:02:10
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for activity_log
-- ----------------------------
DROP TABLE IF EXISTS `activity_log`;
CREATE TABLE `activity_log` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `datetime` datetime DEFAULT NULL,
  `contact_type` int(11) DEFAULT NULL,
  `contact_info` varchar(900) DEFAULT '',
  `contact_person` varchar(900) DEFAULT '',
  `description` varchar(9000) DEFAULT '',
  `status` int(11) DEFAULT NULL,
  `sms_send` int(11) DEFAULT NULL,
  `access` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `activity_logSort2` (`contact_type`),
  KEY `activity_logSort` (`case`,`status`,`created_by`,`edited_by`) USING BTREE,
  KEY `activity_logSort3` (`status`)
) ENGINE=InnoDB AUTO_INCREMENT=5031301 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for admission
-- ----------------------------
DROP TABLE IF EXISTS `admission`;
CREATE TABLE `admission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `created_by_01` varchar(50) DEFAULT NULL,
  `create_date_01` datetime DEFAULT NULL,
  `source_header` int(11) DEFAULT NULL,
  `source` int(11) DEFAULT NULL,
  `category` int(11) NOT NULL,
  `type` int(11) NOT NULL,
  `ref` varchar(100) DEFAULT '',
  `patient` int(11) NOT NULL,
  `dob` date DEFAULT NULL,
  `gender` int(11) DEFAULT NULL,
  `member_id` varchar(50) DEFAULT NULL,
  `member_card` varchar(100) DEFAULT '',
  `member_card_edc` varchar(16) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `relation` int(11) DEFAULT NULL,
  `mobile` varchar(50) DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `branch` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `policy_status` int(11) DEFAULT NULL,
  `policy_no` varchar(50) DEFAULT '',
  `policy_holder` varchar(75) DEFAULT NULL,
  `policy_effective_date` date DEFAULT NULL,
  `policy_expiry_date` date DEFAULT NULL,
  `policy_issue_date` date DEFAULT NULL,
  `policy_declare_date` date DEFAULT NULL,
  `policy_suspend_date` date DEFAULT NULL,
  `policy_unsuspend_date` date DEFAULT NULL,
  `policy_lapse_date` date DEFAULT NULL,
  `policy_revival_date` date DEFAULT NULL,
  `policy_termination_date` date DEFAULT NULL,
  `waiting_period` int(11) DEFAULT NULL,
  `exclusion` text DEFAULT NULL,
  `special_condition` text DEFAULT NULL,
  `member_remarks` text DEFAULT NULL,
  `member_remarks_by` varchar(255) DEFAULT NULL,
  `member_remarks_date` datetime DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_attach_date` date DEFAULT NULL,
  `plan_expiry_date` date DEFAULT NULL,
  `rider` int(11) DEFAULT NULL,
  `rider_attach_date` date DEFAULT NULL,
  `rider_expiry_date` date DEFAULT NULL,
  `provider` int(11) NOT NULL,
  `provider_status` int(11) DEFAULT NULL,
  `provider_email` varchar(700) DEFAULT '',
  `id_edc` varchar(20) DEFAULT '',
  `is_panel` int(11) DEFAULT NULL,
  `is_service_provided` int(11) DEFAULT NULL,
  `is_multiple_cashier` int(11) DEFAULT NULL,
  `other_provider` varchar(75) DEFAULT '',
  `other_provider_city` varchar(255) DEFAULT '',
  `other_provider_country` int(11) DEFAULT NULL,
  `admission_date` date NOT NULL,
  `admission_hour` varchar(2) DEFAULT '',
  `admission_minute` varchar(2) DEFAULT '',
  `currency_01` int(11) DEFAULT NULL,
  `currency_02` int(11) DEFAULT NULL,
  `currency_rate` decimal(20,15) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `cancel_reason` int(11) DEFAULT NULL,
  `case_link` varchar(50) DEFAULT '',
  `appended` int(11) DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `userlevel` int(11) DEFAULT NULL,
  `amount_currency_01` decimal(20,2) DEFAULT NULL,
  `batch_received` varchar(50) DEFAULT '',
  `bill_no` varchar(200) DEFAULT '',
  `bill_issue_date` datetime DEFAULT NULL,
  `bill_due_date` datetime DEFAULT NULL,
  `plan_header` int(11) DEFAULT NULL,
  `code_rawat` int(11) DEFAULT NULL,
  `email_ops` text DEFAULT NULL,
  `email_cc` text DEFAULT NULL,
  `email_bcc` text DEFAULT NULL,
  `conditions_polis` text DEFAULT NULL,
  `conditions_polis_01` int(11) DEFAULT NULL,
  `cek` int(11) DEFAULT NULL,
  `member_name` varchar(100) DEFAULT NULL,
  `astra_vip` int(11) DEFAULT NULL,
  `original_bill_upload` varchar(500) DEFAULT NULL,
  `original_bill_status` int(11) DEFAULT NULL,
  `case_id` int(11) DEFAULT NULL,
  `case_header` int(11) DEFAULT NULL,
  `code_edc` int(11) DEFAULT NULL,
  `TraceNumber` varchar(50) DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `adIndex` (`ref`,`patient`,`provider`,`category`,`principle`,`plan`) USING BTREE,
  KEY `adIndex2` (`type`),
  KEY `adIndex3` (`source`),
  KEY `adIndex4` (`source`,`type`)
) ENGINE=InnoDB AUTO_INCREMENT=685650 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for aia_member_3
-- ----------------------------
DROP TABLE IF EXISTS `aia_member_3`;
CREATE TABLE `aia_member_3` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `Policy_No` varchar(50) NOT NULL,
  `Payment_Method` varchar(50) DEFAULT NULL,
  `Branch_Code` varchar(50) DEFAULT NULL,
  `Branch_Desc` varchar(50) DEFAULT NULL,
  `RCD_Policy` varchar(50) DEFAULT NULL,
  `RCD_Rider` varchar(50) DEFAULT NULL,
  `Paid_to_Date` varchar(50) DEFAULT NULL,
  `Rider_Status` varchar(50) DEFAULT NULL,
  `Date_of_Reinstatement` varchar(50) DEFAULT NULL,
  `Product_Code` int(11) DEFAULT NULL,
  `Plan_Type` int(11) NOT NULL,
  `Owner_No` varchar(50) DEFAULT NULL,
  `Policy_Owner` varchar(75) DEFAULT NULL,
  `Address_1_Owner` varchar(255) DEFAULT NULL,
  `Address_2_Owner` varchar(255) DEFAULT NULL,
  `Address_3_Owner` varchar(255) DEFAULT NULL,
  `Address_4_Owner` varchar(255) DEFAULT NULL,
  `Address_5_Owner` varchar(255) DEFAULT NULL,
  `Kode_Pos_Owner` varchar(50) DEFAULT NULL,
  `Telp_No_1_Owner` varchar(50) DEFAULT NULL,
  `Telp_No_2_Owner` varchar(50) DEFAULT NULL,
  `Telp_No_3_Owner` varchar(50) DEFAULT NULL,
  `Insured_No` varchar(50) DEFAULT NULL,
  `Policy_Insured` varchar(75) DEFAULT NULL,
  `Date_of_Birth_Insured` varchar(50) DEFAULT NULL,
  `Sex_Insured` varchar(50) DEFAULT NULL,
  `Declare_Date` date DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `aia_member_3idx` (`Policy_No`,`Branch_Code`,`Declare_Date`)
) ENGINE=InnoDB AUTO_INCREMENT=4411827 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for api_auth
-- ----------------------------
DROP TABLE IF EXISTS `api_auth`;
CREATE TABLE `api_auth` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ip_address` varchar(255) DEFAULT NULL,
  `username` varchar(255) DEFAULT NULL,
  `password` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `created_by` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=30 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for api_data
-- ----------------------------
DROP TABLE IF EXISTS `api_data`;
CREATE TABLE `api_data` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `data` text COLLATE utf8_unicode_ci DEFAULT NULL,
  `action` varchar(10) COLLATE utf8_unicode_ci DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13373 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Table structure for api_edc_log
-- ----------------------------
DROP TABLE IF EXISTS `api_edc_log`;
CREATE TABLE `api_edc_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `request` text DEFAULT NULL,
  `response` text DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for api_response
-- ----------------------------
DROP TABLE IF EXISTS `api_response`;
CREATE TABLE `api_response` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `case` int(11) DEFAULT NULL,
  `claim_register` varchar(255) DEFAULT NULL,
  `header_verified_date` datetime DEFAULT NULL,
  `header_verified_response` varchar(255) DEFAULT NULL,
  `header_not_verified_date` datetime DEFAULT NULL,
  `header_not_verified_response` varchar(255) DEFAULT NULL,
  `header_log_date` datetime DEFAULT NULL,
  `header_log_response` varchar(255) DEFAULT NULL,
  `detail_log_date` datetime DEFAULT NULL,
  `detail_log_response` varchar(255) DEFAULT NULL,
  `header_non_log_date` datetime DEFAULT NULL,
  `header_non_log_response` varchar(255) DEFAULT NULL,
  `detail_non_log_date` datetime DEFAULT NULL,
  `detail_non_log_response` varchar(255) DEFAULT NULL,
  `status_send_verified` int(11) DEFAULT NULL,
  `status_send_not_verified` int(11) DEFAULT NULL,
  `status_send_log` int(11) DEFAULT NULL,
  `status_send_non_log` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5569 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for app_version
-- ----------------------------
DROP TABLE IF EXISTS `app_version`;
CREATE TABLE `app_version` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `version_code` int(11) NOT NULL,
  `version_name` varchar(50) NOT NULL,
  `active` tinyint(1) NOT NULL,
  `created_at` bigint(20) NOT NULL,
  `last_update` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for audittrail
-- ----------------------------
DROP TABLE IF EXISTS `audittrail`;
CREATE TABLE `audittrail` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `datetime` datetime NOT NULL,
  `script` varchar(255) DEFAULT '',
  `user` varchar(255) DEFAULT '',
  `action` varchar(255) DEFAULT '',
  `table` varchar(255) DEFAULT '',
  `field` varchar(255) DEFAULT '',
  `keyvalue` longtext DEFAULT NULL,
  `oldvalue` longtext DEFAULT NULL,
  `newvalue` longtext DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `audittrail_trigg` (`table`,`field`),
  KEY `audittrail_trigg2` (`user`),
  KEY `audittrail_trigg3` (`datetime`)
) ENGINE=InnoDB AUTO_INCREMENT=75041449 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for audittrail_hospital
-- ----------------------------
DROP TABLE IF EXISTS `audittrail_hospital`;
CREATE TABLE `audittrail_hospital` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `datetime` datetime NOT NULL,
  `script` varchar(255) DEFAULT NULL,
  `user` varchar(255) DEFAULT NULL,
  `action` varchar(255) DEFAULT NULL,
  `table` varchar(255) DEFAULT NULL,
  `field` varchar(255) DEFAULT NULL,
  `keyvalue` longtext DEFAULT NULL,
  `oldvalue` longtext DEFAULT NULL,
  `newvalue` longtext DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for audittrail_reimbursement
-- ----------------------------
DROP TABLE IF EXISTS `audittrail_reimbursement`;
CREATE TABLE `audittrail_reimbursement` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `datetime` datetime NOT NULL,
  `script` varchar(255) DEFAULT '',
  `user` varchar(255) DEFAULT '',
  `action` varchar(255) DEFAULT '',
  `table` varchar(255) DEFAULT '',
  `field` varchar(255) DEFAULT '',
  `keyvalue` longtext DEFAULT NULL,
  `oldvalue` longtext DEFAULT NULL,
  `newvalue` longtext DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `audittrail_trigg` (`table`,`field`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for balance_detail_03
-- ----------------------------
DROP TABLE IF EXISTS `balance_detail_03`;
CREATE TABLE `balance_detail_03` (
  `patient` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `name` varchar(300) DEFAULT NULL,
  `max_day_per_year` decimal(20,2) DEFAULT NULL,
  `max_day_per_year_utilized` decimal(20,2) DEFAULT NULL,
  `max_day_per_year_balance` decimal(20,2) DEFAULT NULL,
  `detail_annual_limit` decimal(20,2) DEFAULT NULL,
  `detail_annual_limit_utilized` decimal(20,2) DEFAULT NULL,
  `detail_annual_limit_balance` decimal(20,2) DEFAULT NULL,
  KEY `indexBalanceDetail033` (`name`),
  KEY `indexBalanceDetail031` (`patient`,`detail`,`name`) USING BTREE,
  KEY `indexBalanceDetail032` (`detail`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for balance_header_03
-- ----------------------------
DROP TABLE IF EXISTS `balance_header_03`;
CREATE TABLE `balance_header_03` (
  `patient` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `name` varchar(300) DEFAULT NULL,
  `header_annual_limit` decimal(20,2) DEFAULT NULL,
  `header_annual_limit_utilized` decimal(20,2) DEFAULT NULL,
  `header_annual_limit_balance` decimal(20,2) DEFAULT NULL,
  `deductible_per_year` decimal(20,2) DEFAULT NULL,
  `deductible_per_year_utilized` decimal(20,2) DEFAULT NULL,
  `deductible_per_year_balance` decimal(20,2) DEFAULT NULL,
  KEY `indexBHeader033` (`name`),
  KEY `indexBHeader031` (`patient`,`header`,`name`),
  KEY `indexBheader032` (`header`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for bank
-- ----------------------------
DROP TABLE IF EXISTS `bank`;
CREATE TABLE `bank` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(50) DEFAULT '',
  `name` varchar(50) DEFAULT '',
  `bi_code` varchar(20) DEFAULT NULL,
  `rtgs_code` varchar(20) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `bank_idx` (`code`,`status`)
) ENGINE=InnoDB AUTO_INCREMENT=157 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for branch
-- ----------------------------
DROP TABLE IF EXISTS `branch`;
CREATE TABLE `branch` (
  `client` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(50) DEFAULT '',
  `name` varchar(75) DEFAULT '',
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `branch_idx` (`client`,`code`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=7495 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for case
-- ----------------------------
DROP TABLE IF EXISTS `case`;
CREATE TABLE `case` (
  `case_group` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `created_by_01` varchar(50) DEFAULT '',
  `create_date_01` datetime DEFAULT NULL,
  `source` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `status_01` int(11) DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `ref` varchar(100) DEFAULT '',
  `final_decision` text DEFAULT NULL,
  `case_remarks` text DEFAULT NULL,
  `averaged_cost` decimal(20,2) DEFAULT NULL,
  `case_remarks_by` varchar(50) DEFAULT '',
  `case_remarks_date` datetime DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `gender` int(11) DEFAULT NULL,
  `member_id` varchar(50) DEFAULT '',
  `member_card` varchar(100) DEFAULT '',
  `member_card_edc` varchar(16) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `relation` int(11) DEFAULT NULL,
  `mobile` varchar(50) DEFAULT '',
  `client` int(11) DEFAULT NULL,
  `branch` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `policy_status` int(11) DEFAULT NULL,
  `policy_no` varchar(50) DEFAULT '',
  `policy_holder` varchar(75) DEFAULT '',
  `policy_effective_date` date DEFAULT NULL,
  `policy_expiry_date` date DEFAULT NULL,
  `policy_issue_date` date DEFAULT NULL,
  `policy_declare_date` date DEFAULT NULL,
  `policy_lapse_date` date DEFAULT NULL,
  `policy_revival_date` date DEFAULT NULL,
  `policy_termination_date` date DEFAULT NULL,
  `policy_suspend_date` date DEFAULT NULL,
  `policy_unsuspend_date` date DEFAULT NULL,
  `waiting_period` int(11) DEFAULT NULL,
  `exclusion` text DEFAULT NULL,
  `special_condition` text DEFAULT NULL,
  `member_remarks` text DEFAULT NULL,
  `member_remarks_by` text DEFAULT NULL,
  `member_remarks_date` datetime DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_header` varchar(50) DEFAULT '',
  `code_rawat` int(11) DEFAULT NULL,
  `plan_attach_date` date DEFAULT NULL,
  `plan_expiry_date` date DEFAULT NULL,
  `rider` int(11) DEFAULT NULL,
  `rider_attach_date` date DEFAULT NULL,
  `rider_expiry_date` date DEFAULT NULL,
  `provider` int(11) DEFAULT NULL,
  `provider_email` varchar(700) DEFAULT '',
  `other_provider` varchar(75) DEFAULT '',
  `other_provider_city` varchar(255) DEFAULT '',
  `other_provider_country` int(11) DEFAULT NULL,
  `provider_cancel` int(11) DEFAULT 0,
  `id_edc` varchar(20) DEFAULT '',
  `currency_01` int(11) DEFAULT NULL,
  `currency_02` int(11) DEFAULT NULL,
  `currency_rate` decimal(20,15) DEFAULT NULL,
  `currency_rate_01_to_idr` decimal(20,15) DEFAULT 0.000000000000000,
  `currency_rate_idr_to_02` decimal(20,15) DEFAULT 0.000000000000000,
  `amount_currency_01` decimal(20,2) DEFAULT NULL,
  `admission_date` date DEFAULT NULL,
  `admission_time` time DEFAULT NULL,
  `admission_doctor` varchar(75) DEFAULT '',
  `symptom` varchar(250) DEFAULT '',
  `symptom_since` date DEFAULT NULL,
  `vital_sign` varchar(75) DEFAULT '',
  `initial_diagnosis` varchar(1000) DEFAULT '',
  `initial_diagnosis_01` varchar(10) DEFAULT '',
  `treatment_plan` varchar(75) DEFAULT '',
  `upload_haf` varchar(150) DEFAULT '',
  `haf_uploaded_by` varchar(50) DEFAULT '',
  `haf_upload_date` datetime DEFAULT NULL,
  `upload_doc` varchar(300) DEFAULT '',
  `doc_uploaded_by` varchar(50) DEFAULT '',
  `doc_upload_date` datetime DEFAULT NULL,
  `upload_haf_doc_finished` int(11) DEFAULT NULL,
  `upload_haf_doc_finished_by` varchar(50) DEFAULT '',
  `upload_haf_doc_finished_date` datetime DEFAULT NULL,
  `haf_doc_completed` int(11) DEFAULT NULL,
  `haf_doc_completed_remarks` varchar(1000) DEFAULT '',
  `haf_doc_completed_by` varchar(50) DEFAULT '',
  `haf_doc_completed_date` datetime DEFAULT NULL,
  `issue_initial_log` int(11) DEFAULT NULL,
  `initial_log_issued_by` varchar(50) DEFAULT '',
  `initial_log_issue_date` datetime DEFAULT NULL,
  `initial_log_issued_by_01` varchar(50) DEFAULT '',
  `initial_log_issue_date_01` datetime DEFAULT NULL,
  `initial_claim_no` varchar(50) DEFAULT '',
  `initial_log_remarks` varchar(1000) DEFAULT '',
  `initial_log_approval` int(11) DEFAULT NULL,
  `discharge_plan` datetime DEFAULT NULL,
  `discharge_plan_received_by` varchar(50) DEFAULT '',
  `discharge_plan_receive_date` datetime DEFAULT NULL,
  `discharge_date` datetime DEFAULT NULL,
  `discharge_doctor` varchar(75) DEFAULT '',
  `actual_treatment` varchar(150) DEFAULT '',
  `diagnosis` varchar(100) DEFAULT '',
  `other_diagnosis` varchar(1000) DEFAULT '',
  `surgery` varchar(50) DEFAULT NULL,
  `other_surgery` varchar(250) DEFAULT NULL,
  `bill_received` int(11) DEFAULT NULL,
  `bill_received_by` varchar(50) DEFAULT '',
  `bill_received_date` datetime DEFAULT NULL,
  `upload_bill` varchar(1500) DEFAULT '',
  `bill_uploaded_by` varchar(50) DEFAULT '',
  `bill_upload_date` datetime DEFAULT NULL,
  `upload_bill_finished` int(11) DEFAULT NULL,
  `upload_bill_finished_by` varchar(50) DEFAULT '',
  `upload_bill_finished_date` datetime DEFAULT NULL,
  `bill_completed` int(11) DEFAULT NULL,
  `bill_completed_remarks` varchar(1000) DEFAULT '',
  `bill_completed_by` varchar(50) DEFAULT '',
  `bill_completed_date` datetime DEFAULT NULL,
  `bill_completed_by_01` varchar(50) DEFAULT '',
  `bill_completed_date_01` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `ws_type` int(11) DEFAULT NULL,
  `ws_option` int(11) DEFAULT NULL,
  `ws_finished` int(11) DEFAULT NULL,
  `ws_finished_by` varchar(50) DEFAULT '',
  `ws_finished_date` datetime DEFAULT NULL,
  `ws_approval` int(11) DEFAULT NULL,
  `ws_approval_remarks` varchar(1000) DEFAULT '',
  `ws_approval_by` varchar(50) DEFAULT '',
  `ws_approval_date` datetime DEFAULT NULL,
  `ws_error_category` int(11) DEFAULT NULL,
  `ws_error_type` int(11) DEFAULT NULL,
  `ws_error_remarks` varchar(255) DEFAULT '',
  `issuance_limit` decimal(20,2) DEFAULT NULL,
  `issue_log` int(11) DEFAULT NULL,
  `issue_log_option` int(11) DEFAULT NULL,
  `log_issued_by` varchar(50) DEFAULT '',
  `log_issue_date` datetime DEFAULT NULL,
  `log_issued_by_01` varchar(50) DEFAULT '',
  `log_issue_date_01` datetime DEFAULT NULL,
  `claim_no` varchar(50) DEFAULT '',
  `log_remarks` varchar(1000) DEFAULT '',
  `log_bank` varchar(50) DEFAULT NULL,
  `log_bank_branch` varchar(50) DEFAULT NULL,
  `log_bank_city` varchar(50) DEFAULT NULL,
  `log_bank_account_no` varchar(50) DEFAULT NULL,
  `log_bank_on_behalf_of` varchar(100) DEFAULT NULL,
  `log_approval` int(11) DEFAULT NULL,
  `nonlog_reason` varchar(1200) DEFAULT '',
  `nonlog_remarks` varchar(1000) DEFAULT '',
  `nonlog_remarks_code` varchar(100) DEFAULT NULL,
  `reject_reason` varchar(1200) DEFAULT '',
  `reject_remarks` varchar(1000) DEFAULT '',
  `batch_received` varchar(50) DEFAULT '',
  `bill_no` varchar(200) DEFAULT '',
  `bill_issue_date` datetime DEFAULT NULL,
  `bill_due_date` datetime DEFAULT NULL,
  `upload_original_bill` varchar(300) DEFAULT '',
  `original_bill_uploaded_by` varchar(50) DEFAULT '',
  `original_bill_upload_date` datetime DEFAULT NULL,
  `original_bill_upload_date_first` datetime DEFAULT NULL,
  `original_bill_checked` int(11) DEFAULT NULL,
  `original_bill_checked_remarks` varchar(1000) DEFAULT '',
  `original_bill_checked_by` varchar(50) DEFAULT '',
  `original_bill_checked_date` datetime DEFAULT NULL,
  `original_bill_checked_01` int(11) DEFAULT NULL,
  `original_bill_checked_by_01` varchar(50) DEFAULT '',
  `original_bill_checked_date_01` datetime DEFAULT NULL,
  `original_bill_checked_error_category` int(11) DEFAULT NULL,
  `original_bill_checked_error_type` int(11) DEFAULT NULL,
  `original_bill_checked_error_remarks` varchar(255) DEFAULT '',
  `close_case_option` int(11) DEFAULT NULL,
  `discount` decimal(20,2) DEFAULT NULL,
  `original_bill_verified` int(11) DEFAULT NULL,
  `original_bill_verified_remarks` varchar(1000) DEFAULT '',
  `original_bill_verified_by` varchar(50) DEFAULT '',
  `original_bill_verified_date` datetime DEFAULT NULL,
  `original_bill_verified_error_category` int(11) DEFAULT NULL,
  `original_bill_verified_error_type` int(11) DEFAULT NULL,
  `original_bill_verified_error_remarks` text DEFAULT NULL,
  `client_approval_for_payment` datetime DEFAULT NULL,
  `payment_approval_by` varchar(50) DEFAULT NULL,
  `payment_approval_date` datetime DEFAULT NULL,
  `upload_payment_approval` varchar(150) DEFAULT NULL,
  `payment_date` datetime DEFAULT NULL,
  `paid_by` varchar(50) DEFAULT '',
  `upload_proof_of_payment` varchar(150) DEFAULT '',
  `upload_payment_date` datetime DEFAULT NULL,
  `payment_date_01` datetime DEFAULT NULL,
  `paid_by_01` varchar(50) DEFAULT '',
  `upload_proof_of_payment_01` varchar(150) DEFAULT '',
  `upload_payment_date_01` datetime DEFAULT NULL,
  `doc_send_back_to_client_required` int(11) DEFAULT NULL,
  `doc_send_back_to_client_date` datetime DEFAULT NULL,
  `doc_received_by_client_date` datetime DEFAULT NULL,
  `send_received_by` varchar(50) DEFAULT '',
  `send_received_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `case_closed_date` datetime DEFAULT NULL,
  `case_closed_date_01` datetime DEFAULT NULL,
  `case_reopen_date` datetime DEFAULT NULL,
  `case_reopen_date_01` datetime DEFAULT NULL,
  `procced_to_worksheet` int(11) DEFAULT 0,
  `case_header` int(11) DEFAULT NULL,
  `is_clean` int(11) DEFAULT NULL,
  `code_edc` int(11) DEFAULT NULL,
  `TraceNumber` varchar(50) DEFAULT '',
  `los` varchar(50) DEFAULT '',
  `copy_case` int(11) DEFAULT NULL,
  `copy_case_no` int(11) DEFAULT NULL,
  `copy_case_no_01` int(11) DEFAULT NULL,
  `copy_by` varchar(50) DEFAULT NULL,
  `copy_date` datetime DEFAULT NULL,
  `sms_send` int(11) DEFAULT NULL,
  `sms_send_01` int(11) DEFAULT NULL,
  `change_status` int(11) DEFAULT NULL,
  `change_status_01` int(11) DEFAULT NULL,
  `change_status_01_by` text DEFAULT NULL,
  `change_status_01_date` datetime DEFAULT NULL,
  `change_status_02` int(11) DEFAULT NULL,
  `change_status_02_by` text DEFAULT NULL,
  `change_status_02_date` datetime DEFAULT NULL,
  `userlevel` int(11) DEFAULT NULL,
  `case_id_client` int(11) DEFAULT NULL,
  `cover_null` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `caseSort` (`patient`,`admission_date`) USING BTREE,
  KEY `caseSort3` (`principle`),
  KEY `caseSort5` (`status`,`admission_date`),
  KEY `caseSort6` (`program`),
  KEY `caseSort7` (`plan`),
  KEY `caseSort8` (`admission_date`),
  KEY `caseSort10` (`plan_header`),
  KEY `caseSort12` (`provider`),
  KEY `caseSort13` (`category`,`type`),
  KEY `caseSort14` (`diagnosis`),
  KEY `caseSort15` (`category`),
  KEY `caseSort9` (`status`) USING BTREE,
  KEY `caseSort16` (`status`,`program`),
  KEY `caseSort18` (`type`),
  KEY `caseSort19` (`source`) USING BTREE,
  KEY `caseSort17` (`payment_date`,`upload_proof_of_payment`,`source`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=439870 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for case_client
-- ----------------------------
DROP TABLE IF EXISTS `case_client`;
CREATE TABLE `case_client` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `case_id` int(11) DEFAULT NULL,
  `case_id_client` int(11) DEFAULT NULL,
  `status_sending` int(11) DEFAULT 0,
  `status_case` int(11) DEFAULT NULL,
  `response` varchar(150) DEFAULT NULL,
  `send_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=977 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for case_detail_equity
-- ----------------------------
DROP TABLE IF EXISTS `case_detail_equity`;
CREATE TABLE `case_detail_equity` (
  `claim_id` varchar(255) DEFAULT NULL,
  `member_id` varchar(255) DEFAULT NULL,
  `benefit_code` varchar(255) DEFAULT NULL,
  `benefit_description` varchar(500) DEFAULT NULL,
  `benefit_limit` decimal(20,2) DEFAULT NULL,
  `amt_incurred` decimal(20,2) DEFAULT NULL,
  `amt_approved` decimal(20,2) DEFAULT NULL,
  `amt_not_approved` decimal(20,2) DEFAULT NULL,
  `coverage_type` varchar(255) DEFAULT NULL,
  `plan_id` varchar(255) DEFAULT NULL,
  `remarks` varchar(6000) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for case_email_notify
-- ----------------------------
DROP TABLE IF EXISTS `case_email_notify`;
CREATE TABLE `case_email_notify` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category` int(11) DEFAULT NULL,
  `category_subject` varchar(100) DEFAULT NULL,
  `subject` varchar(250) DEFAULT NULL,
  `email_to` varchar(200) DEFAULT NULL,
  `email_cc` varchar(200) DEFAULT NULL,
  `upload_haf` text DEFAULT NULL,
  `upload_bill` text DEFAULT NULL,
  `upload_others` text DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `client_name` varchar(255) DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `policy_no` varchar(100) DEFAULT NULL,
  `patient_name` varchar(255) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_name` varchar(255) DEFAULT NULL,
  `effective_date` date DEFAULT NULL,
  `admission_date` date DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `provider` int(11) DEFAULT NULL,
  `provider_name` varchar(255) DEFAULT NULL,
  `provider_country` varchar(255) DEFAULT NULL,
  `doctor` varchar(255) DEFAULT NULL,
  `initial_diagnosis` varchar(255) DEFAULT NULL,
  `other_diagnosis` varchar(255) DEFAULT NULL,
  `remarks` text DEFAULT NULL,
  `signature` varchar(255) DEFAULT NULL,
  `send` int(11) DEFAULT NULL,
  `send_by` varchar(255) DEFAULT NULL,
  `send_date` datetime DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `edited_by` varchar(255) DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1733 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for case_header_equity
-- ----------------------------
DROP TABLE IF EXISTS `case_header_equity`;
CREATE TABLE `case_header_equity` (
  `member_id` varchar(22) DEFAULT NULL,
  `claim_type` varchar(1) DEFAULT NULL,
  `claim_id` varchar(15) DEFAULT NULL,
  `policy_number` varchar(25) DEFAULT NULL,
  `member_name` varchar(75) DEFAULT NULL,
  `coverage_type` varchar(2) DEFAULT NULL,
  `provider_code` varchar(15) DEFAULT NULL,
  `other_provider` varchar(75) DEFAULT NULL,
  `admission_date` date DEFAULT NULL,
  `discharge_date` date DEFAULT NULL,
  `duration_days` int(15) DEFAULT NULL,
  `claim_process_status` varchar(2) DEFAULT NULL,
  `app_date` date DEFAULT NULL,
  `app_by` varchar(35) DEFAULT NULL,
  `diagnosis_code` varchar(10) DEFAULT NULL,
  `diagnosis_desc` varchar(255) DEFAULT NULL,
  `plan_id` varchar(255) DEFAULT '',
  `amt_incurred` decimal(20,2) DEFAULT NULL,
  `amt_approved` decimal(20,2) DEFAULT NULL,
  `amt_not_approved` decimal(20,2) DEFAULT NULL,
  `register_id` varchar(255) DEFAULT NULL,
  `currency_origin` varchar(3) DEFAULT NULL,
  `amt_of_currency_origin` decimal(20,2) DEFAULT NULL,
  `exchange_rate_currency_origin_to_idr` decimal(20,15) DEFAULT NULL,
  `exchange_rate_idr_to_usd` decimal(20,15) DEFAULT NULL,
  `remarks` varchar(900) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for case_remarks
-- ----------------------------
DROP TABLE IF EXISTS `case_remarks`;
CREATE TABLE `case_remarks` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `program` varchar(1000) DEFAULT '',
  `plan` varchar(1000) DEFAULT '',
  `provider` varchar(1000) DEFAULT '',
  `remarks` text DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for case_send
-- ----------------------------
DROP TABLE IF EXISTS `case_send`;
CREATE TABLE `case_send` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `case_id` int(11) DEFAULT NULL,
  `send_status` int(11) DEFAULT NULL,
  `send_date` datetime DEFAULT NULL,
  `filename_xml` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=17971 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for case_sms
-- ----------------------------
DROP TABLE IF EXISTS `case_sms`;
CREATE TABLE `case_sms` (
  `id` int(11) NOT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `ref` varchar(50) DEFAULT '',
  `patient` int(11) DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `gender` int(11) DEFAULT NULL,
  `member_id` varchar(50) DEFAULT '',
  `member_card` varchar(100) DEFAULT '',
  `principle` int(11) DEFAULT NULL,
  `relation` int(11) DEFAULT NULL,
  `mobile` varchar(50) DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `branch` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `policy_status` int(11) DEFAULT NULL,
  `policy_no` varchar(50) DEFAULT '',
  `policy_holder` varchar(75) DEFAULT NULL,
  `policy_effective_date` datetime DEFAULT NULL,
  `policy_expiry_date` datetime DEFAULT NULL,
  `policy_issue_date` datetime DEFAULT NULL,
  `policy_declare_date` datetime DEFAULT NULL,
  `policy_lapse_date` datetime DEFAULT NULL,
  `policy_revival_date` datetime DEFAULT NULL,
  `policy_termination_date` datetime DEFAULT NULL,
  `special_condition` varchar(900) DEFAULT '',
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_attach_date` datetime DEFAULT NULL,
  `plan_expiry_date` datetime DEFAULT NULL,
  `rider` int(11) DEFAULT NULL,
  `rider_attach_date` datetime DEFAULT NULL,
  `rider_expiry_date` datetime DEFAULT NULL,
  `provider` int(11) DEFAULT NULL,
  `other_provider` varchar(75) DEFAULT '',
  `currency_01` int(11) DEFAULT NULL,
  `currency_02` int(11) DEFAULT NULL,
  `currency_rate` decimal(20,15) DEFAULT NULL,
  `admission_date` date DEFAULT NULL,
  `admission_time` time DEFAULT NULL,
  `admission_doctor` varchar(75) DEFAULT '',
  `symptom` varchar(250) DEFAULT '',
  `symptom_since` date DEFAULT NULL,
  `vital_sign` varchar(75) DEFAULT '',
  `initial_diagnosis` varchar(900) DEFAULT '',
  `treatment_plan` varchar(75) DEFAULT '',
  `upload_haf` varchar(150) DEFAULT '',
  `haf_uploaded_by` varchar(50) DEFAULT '',
  `haf_upload_date` datetime DEFAULT NULL,
  `upload_doc` varchar(300) DEFAULT '',
  `doc_uploaded_by` varchar(50) DEFAULT '',
  `doc_upload_date` datetime DEFAULT NULL,
  `upload_haf_doc_finished` int(11) DEFAULT NULL,
  `upload_haf_doc_finished_by` varchar(50) DEFAULT '',
  `upload_haf_doc_finished_date` datetime DEFAULT NULL,
  `haf_doc_completed` int(11) DEFAULT NULL,
  `haf_doc_completed_remarks` varchar(900) DEFAULT '',
  `haf_doc_completed_by` varchar(50) DEFAULT '',
  `haf_doc_completed_date` datetime DEFAULT NULL,
  `issue_initial_log` int(11) DEFAULT NULL,
  `initial_log_issued_by` varchar(50) DEFAULT '',
  `initial_log_issue_date` datetime DEFAULT NULL,
  `initial_claim_no` varchar(50) DEFAULT '',
  `initial_log_remarks` varchar(900) DEFAULT '',
  `initial_log_approval` int(11) DEFAULT NULL,
  `discharge_date` datetime DEFAULT NULL,
  `discharge_doctor` varchar(75) DEFAULT '',
  `actual_treatment` varchar(150) DEFAULT '',
  `diagnosis` varchar(50) DEFAULT '',
  `other_diagnosis` varchar(900) DEFAULT '',
  `exclusion` text DEFAULT NULL,
  `bill_received` int(11) DEFAULT NULL,
  `bill_received_by` varchar(50) DEFAULT '',
  `bill_received_date` datetime DEFAULT NULL,
  `upload_bill` varchar(300) DEFAULT '',
  `bill_uploaded_by` varchar(50) DEFAULT '',
  `bill_upload_date` datetime DEFAULT NULL,
  `upload_bill_finished` int(11) DEFAULT NULL,
  `upload_bill_finished_by` varchar(50) DEFAULT '',
  `upload_bill_finished_date` datetime DEFAULT NULL,
  `bill_completed` int(11) DEFAULT NULL,
  `bill_completed_remarks` varchar(900) DEFAULT '',
  `bill_completed_by` varchar(50) DEFAULT '',
  `bill_completed_date` datetime DEFAULT NULL,
  `ws_type` int(11) DEFAULT NULL,
  `ws_option` int(11) DEFAULT NULL,
  `ws_finished` int(11) DEFAULT NULL,
  `ws_finished_by` varchar(50) DEFAULT '',
  `ws_finished_date` datetime DEFAULT NULL,
  `ws_approval` int(11) DEFAULT NULL,
  `ws_approval_remarks` varchar(900) DEFAULT '',
  `ws_approval_by` varchar(50) DEFAULT '',
  `ws_approval_date` datetime DEFAULT NULL,
  `issuance_limit` decimal(20,2) DEFAULT NULL,
  `issue_log` int(11) DEFAULT NULL,
  `issue_log_option` int(11) DEFAULT NULL,
  `log_issued_by` varchar(50) DEFAULT '',
  `log_issue_date` datetime DEFAULT NULL,
  `claim_no` varchar(50) DEFAULT '',
  `log_remarks` varchar(900) DEFAULT '',
  `log_approval` int(11) DEFAULT NULL,
  `nonlog_reason` varchar(900) DEFAULT '',
  `nonlog_remarks` varchar(900) DEFAULT '',
  `reject_reason` varchar(1200) DEFAULT '',
  `reject_remarks` varchar(1200) DEFAULT '',
  `bill_no` varchar(50) DEFAULT '',
  `bill_issue_date` datetime DEFAULT NULL,
  `bill_due_date` datetime DEFAULT NULL,
  `upload_original_bill` varchar(300) DEFAULT '',
  `original_bill_uploaded_by` varchar(50) DEFAULT '',
  `original_bill_upload_date` datetime DEFAULT NULL,
  `original_bill_checked` int(11) DEFAULT NULL,
  `original_bill_checked_remarks` varchar(900) DEFAULT '',
  `original_bill_checked_by` varchar(50) DEFAULT '',
  `original_bill_checked_date` datetime DEFAULT NULL,
  `close_case_option` int(11) DEFAULT NULL,
  `original_bill_verified` int(11) DEFAULT NULL,
  `original_bill_verified_remarks` varchar(900) DEFAULT '',
  `original_bill_verified_by` varchar(50) DEFAULT '',
  `original_bill_verified_date` datetime DEFAULT NULL,
  `payment_date` datetime DEFAULT NULL,
  `paid_by` varchar(50) DEFAULT '',
  `upload_proof_of_payment` varchar(150) DEFAULT '',
  `doc_send_back_to_client_required` int(11) DEFAULT NULL,
  `doc_send_back_to_client_date` datetime DEFAULT NULL,
  `doc_received_by_client_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime NOT NULL,
  `userlevel` int(11) DEFAULT NULL,
  `status_sms` int(11) DEFAULT 0,
  `send_date` datetime DEFAULT NULL,
  `cancelled` int(11) DEFAULT 1,
  PRIMARY KEY (`id`,`edit_date`),
  KEY `caseSort` (`id`,`patient`,`principle`,`client`,`company`,`plan`,`provider`,`diagnosis`,`program`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for case_sms_log
-- ----------------------------
DROP TABLE IF EXISTS `case_sms_log`;
CREATE TABLE `case_sms_log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `return` longtext DEFAULT NULL,
  `send_date` datetime DEFAULT current_timestamp(),
  `case_id` int(11) DEFAULT NULL,
  `type` varchar(10) DEFAULT NULL,
  `sms_flag` int(11) DEFAULT NULL,
  `date_description` varchar(8) DEFAULT NULL,
  `policy_no` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `case_sms_logidx` (`case_id`,`type`,`sms_flag`,`policy_no`)
) ENGINE=InnoDB AUTO_INCREMENT=77183 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for case_status
-- ----------------------------
DROP TABLE IF EXISTS `case_status`;
CREATE TABLE `case_status` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `userlevels` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `name` varchar(100) DEFAULT '',
  `e-reimbursement` varchar(100) DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `index_status2` (`status`),
  KEY `index_status` (`userlevels`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=149 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for category
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category` (
  `id` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `status_admission` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for category_email_notify
-- ----------------------------
DROP TABLE IF EXISTS `category_email_notify`;
CREATE TABLE `category_email_notify` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for celebration_benefit_sunlife
-- ----------------------------
DROP TABLE IF EXISTS `celebration_benefit_sunlife`;
CREATE TABLE `celebration_benefit_sunlife` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `patient` int(11) NOT NULL,
  `member_id` varchar(50) DEFAULT NULL,
  `member_dob` date DEFAULT NULL,
  `member_card` varchar(50) DEFAULT NULL,
  `policy_no` varchar(50) DEFAULT NULL,
  `plan` varchar(50) DEFAULT NULL,
  `approval_date` date DEFAULT NULL,
  `report_date` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for checked_status
-- ----------------------------
DROP TABLE IF EXISTS `checked_status`;
CREATE TABLE `checked_status` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `option` int(11) DEFAULT NULL,
  `error_header` int(11) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `checked` int(11) DEFAULT NULL,
  `name` varchar(50) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for city
-- ----------------------------
DROP TABLE IF EXISTS `city`;
CREATE TABLE `city` (
  `country` int(11) DEFAULT NULL,
  `province` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT '',
  `id_region` varchar(20) DEFAULT NULL,
  `id_province` varchar(20) DEFAULT NULL,
  `id_city` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `city_idx` (`country`,`province`)
) ENGINE=InnoDB AUTO_INCREMENT=680 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for claim_balancer
-- ----------------------------
DROP TABLE IF EXISTS `claim_balancer`;
CREATE TABLE `claim_balancer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `policy_no` varchar(75) DEFAULT NULL,
  `member_name` varchar(255) DEFAULT NULL,
  `member_id` varchar(75) DEFAULT NULL,
  `claim_type` varchar(75) DEFAULT NULL,
  `claim_ref` varchar(75) DEFAULT NULL,
  `hospital_name` varchar(255) DEFAULT NULL,
  `diagnosis` varchar(900) DEFAULT '',
  `admission_date` date DEFAULT NULL,
  `discharge_date` date DEFAULT NULL,
  `duration_days` int(11) DEFAULT NULL,
  `plan_id` varchar(50) DEFAULT NULL,
  `total_amount_incurred` int(11) DEFAULT NULL,
  `total_amount_approved` int(11) DEFAULT NULL,
  `total_amount_not_approved` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for claim_balancer_history
-- ----------------------------
DROP TABLE IF EXISTS `claim_balancer_history`;
CREATE TABLE `claim_balancer_history` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `policy_no` varchar(75) DEFAULT NULL,
  `member_name` varchar(255) DEFAULT NULL,
  `member_id` varchar(75) DEFAULT NULL,
  `claim_type` varchar(75) DEFAULT NULL,
  `claim_ref` varchar(75) DEFAULT NULL,
  `hospital_name` varchar(255) DEFAULT NULL,
  `diagnosis` varchar(900) DEFAULT '',
  `admission_date` date DEFAULT NULL,
  `discharge_date` date DEFAULT NULL,
  `duration_days` int(11) DEFAULT NULL,
  `plan_id` varchar(50) DEFAULT NULL,
  `total_amount_incurred` int(11) DEFAULT NULL,
  `total_amount_approved` int(11) DEFAULT NULL,
  `total_amount_not_approved` int(11) DEFAULT NULL,
  `process_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6134 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for claim_ref_for_imported
-- ----------------------------
DROP TABLE IF EXISTS `claim_ref_for_imported`;
CREATE TABLE `claim_ref_for_imported` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `patient` int(11) DEFAULT NULL,
  `ref` varchar(255) DEFAULT NULL,
  `admission_date` date DEFAULT NULL,
  `discharge_date` date DEFAULT NULL,
  `other_diagnosis` varchar(500) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for client_card
-- ----------------------------
DROP TABLE IF EXISTS `client_card`;
CREATE TABLE `client_card` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `background` varchar(255) DEFAULT NULL,
  `x_client` int(11) DEFAULT NULL,
  `y_client` int(11) DEFAULT NULL,
  `x_name` int(11) DEFAULT NULL,
  `y_name` int(11) DEFAULT NULL,
  `x_polis` int(11) DEFAULT NULL,
  `y_polis` int(11) DEFAULT NULL,
  `x_plan` int(11) DEFAULT NULL,
  `y_plan` int(11) DEFAULT NULL,
  `x_effective` int(11) DEFAULT NULL,
  `y_effective` int(11) DEFAULT NULL,
  `x_expire` int(11) DEFAULT NULL,
  `y_expire` int(11) DEFAULT NULL,
  `x_gender` int(11) DEFAULT NULL,
  `y_gender` int(11) DEFAULT NULL,
  `x_dob` int(11) DEFAULT NULL,
  `y_dob` int(11) DEFAULT NULL,
  `color_font` varchar(10) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `x_card` int(11) DEFAULT NULL,
  `y_card` int(11) DEFAULT NULL,
  `x_program` int(11) DEFAULT NULL,
  `y_program` int(11) DEFAULT NULL,
  `x_special_condition` int(11) DEFAULT NULL,
  `y_special_condition` int(11) DEFAULT NULL,
  `x_effective_date_card` int(11) DEFAULT NULL,
  `y_effective_date_card` int(11) DEFAULT NULL,
  `x_principle` int(11) DEFAULT NULL,
  `y_principle` int(11) DEFAULT NULL,
  `x_relation` int(11) DEFAULT NULL,
  `y_relation` int(11) DEFAULT NULL,
  `x_member_id` int(11) DEFAULT NULL,
  `y_member_id` int(11) DEFAULT NULL,
  `x_area` int(11) DEFAULT NULL,
  `y_area` int(11) DEFAULT NULL,
  `x_company` int(11) DEFAULT NULL,
  `y_company` int(11) DEFAULT NULL,
  `font_type` varchar(255) DEFAULT NULL,
  `font_size` int(11) DEFAULT NULL,
  `created_by` varchar(30) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `angel_card` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=101 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for client_old
-- ----------------------------
DROP TABLE IF EXISTS `client_old`;
CREATE TABLE `client_old` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `status` int(11) DEFAULT NULL,
  `full_name` varchar(75) DEFAULT '',
  `abbreviation_name` varchar(50) DEFAULT '',
  `category` int(11) DEFAULT NULL,
  `effective_date` date DEFAULT NULL,
  `expiry_date` date DEFAULT NULL,
  `address` varchar(255) DEFAULT '',
  `country` int(11) DEFAULT NULL,
  `province` int(11) DEFAULT NULL,
  `city` int(11) DEFAULT NULL,
  `postal` varchar(50) DEFAULT '',
  `phone` varchar(50) DEFAULT '',
  `fax` varchar(50) DEFAULT '',
  `email` varchar(75) DEFAULT '',
  `website` varchar(75) DEFAULT '',
  `bank` int(11) DEFAULT NULL,
  `location` varchar(50) DEFAULT '',
  `account_no` varchar(50) DEFAULT '',
  `on_behalf_of` varchar(75) DEFAULT '',
  `benefit_table` varchar(3000) DEFAULT '',
  `waiting_period` int(11) DEFAULT NULL,
  `conditions_polis` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for company
-- ----------------------------
DROP TABLE IF EXISTS `company`;
CREATE TABLE `company` (
  `client` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(75) DEFAULT '',
  `bank` int(11) DEFAULT NULL,
  `location` varchar(50) DEFAULT '',
  `account_no` varchar(50) DEFAULT '',
  `on_behalf_of` varchar(75) DEFAULT '',
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `company_idx` (`client`)
) ENGINE=InnoDB AUTO_INCREMENT=374 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for compliment_complaint
-- ----------------------------
DROP TABLE IF EXISTS `compliment_complaint`;
CREATE TABLE `compliment_complaint` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `internal_type` varchar(255) DEFAULT NULL,
  `internal_remarks` text DEFAULT NULL,
  `internal_by` varchar(255) DEFAULT NULL,
  `internal_date` datetime DEFAULT NULL,
  `external_type` varchar(255) DEFAULT NULL,
  `external_remarks` text DEFAULT NULL,
  `external_by` varchar(255) DEFAULT NULL,
  `external_date` datetime DEFAULT NULL,
  `operation_type` varchar(255) DEFAULT NULL,
  `operation_remarks` text DEFAULT NULL,
  `operation_by` varchar(255) DEFAULT NULL,
  `operation_date` datetime DEFAULT NULL,
  `network_type` varchar(255) DEFAULT NULL,
  `network_remarks` text DEFAULT NULL,
  `network_by` varchar(255) DEFAULT NULL,
  `network_date` datetime DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `edited_by` varchar(255) DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for compliment_complaint_01
-- ----------------------------
DROP TABLE IF EXISTS `compliment_complaint_01`;
CREATE TABLE `compliment_complaint_01` (
  `case` int(11) DEFAULT NULL,
  `cc_id` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(255) DEFAULT '',
  `date_create` date DEFAULT NULL,
  `attachment` text DEFAULT NULL,
  `remarks` text DEFAULT NULL,
  `submit_by` varchar(255) DEFAULT '',
  `submit_date` date DEFAULT NULL,
  `verify` int(11) DEFAULT NULL,
  `verify_remarks` text DEFAULT NULL,
  `verify_by` varchar(255) DEFAULT '',
  `verify_date` date DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for conditions_polis
-- ----------------------------
DROP TABLE IF EXISTS `conditions_polis`;
CREATE TABLE `conditions_polis` (
  `client` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ketentuan` text DEFAULT NULL,
  `remarks` text DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `upload` varchar(250) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_cpolis` (`client`)
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for config
-- ----------------------------
DROP TABLE IF EXISTS `config`;
CREATE TABLE `config` (
  `code` varchar(50) NOT NULL,
  `value` text NOT NULL,
  PRIMARY KEY (`code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for contact_type
-- ----------------------------
DROP TABLE IF EXISTS `contact_type`;
CREATE TABLE `contact_type` (
  `id` int(11) NOT NULL,
  `sms` int(11) DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for contact_us
-- ----------------------------
DROP TABLE IF EXISTS `contact_us`;
CREATE TABLE `contact_us` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `provider` int(11) DEFAULT NULL,
  `email` varchar(300) DEFAULT NULL,
  `subject` varchar(300) DEFAULT NULL,
  `pesan` text DEFAULT NULL,
  `email_to` text DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for continent
-- ----------------------------
DROP TABLE IF EXISTS `continent`;
CREATE TABLE `continent` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for copayment
-- ----------------------------
DROP TABLE IF EXISTS `copayment`;
CREATE TABLE `copayment` (
  `id` decimal(20,2) NOT NULL,
  `name` varchar(50) DEFAULT '',
  `filter_01` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for country
-- ----------------------------
DROP TABLE IF EXISTS `country`;
CREATE TABLE `country` (
  `id` int(11) NOT NULL,
  `name` varchar(50) DEFAULT '',
  `currency` varchar(50) DEFAULT '',
  `iso-4217` varchar(50) DEFAULT '',
  `continent` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `country_index_01` (`iso-4217`,`continent`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for coverage_region
-- ----------------------------
DROP TABLE IF EXISTS `coverage_region`;
CREATE TABLE `coverage_region` (
  `client` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `country` varchar(4000) CHARACTER SET utf8 DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for customer_survey
-- ----------------------------
DROP TABLE IF EXISTS `customer_survey`;
CREATE TABLE `customer_survey` (
  `case` varchar(255) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `point_01` int(11) DEFAULT NULL,
  `point_02` int(11) DEFAULT NULL,
  `point_03` int(11) DEFAULT NULL,
  `point_04` varchar(250) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=40702 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for data_backup_member
-- ----------------------------
DROP TABLE IF EXISTS `data_backup_member`;
CREATE TABLE `data_backup_member` (
  `client` int(11) DEFAULT NULL,
  `branch` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `department` int(11) DEFAULT NULL,
  `position` int(11) DEFAULT NULL,
  `id` varchar(255) DEFAULT NULL,
  `member_name` varchar(255) DEFAULT NULL,
  `member_id` varchar(255) DEFAULT NULL,
  `member_card` varchar(255) DEFAULT NULL,
  `member_card_edc` varchar(255) DEFAULT NULL,
  `member_dob` varchar(255) DEFAULT NULL,
  `member_gender` varchar(255) DEFAULT NULL,
  `member_marital` varchar(255) DEFAULT NULL,
  `member_address` varchar(255) DEFAULT NULL,
  `member_country` varchar(255) DEFAULT NULL,
  `member_province` varchar(255) DEFAULT NULL,
  `member_city` varchar(255) DEFAULT NULL,
  `member_postal` varchar(255) DEFAULT NULL,
  `member_phone` varchar(255) DEFAULT NULL,
  `member_mobile` varchar(255) DEFAULT NULL,
  `member_email` varchar(255) DEFAULT NULL,
  `member_password` varchar(255) DEFAULT NULL,
  `member_relation` varchar(255) DEFAULT NULL,
  `member_principle` varchar(255) DEFAULT NULL,
  `policy_no` varchar(255) DEFAULT NULL,
  `policy_holder` varchar(255) DEFAULT NULL,
  `policy_issue_date` varchar(255) DEFAULT NULL,
  `policy_declare_date` varchar(255) DEFAULT NULL,
  `policy_effective_date` varchar(255) DEFAULT NULL,
  `policy_effective_date_card` varchar(255) DEFAULT NULL,
  `policy_expiry_date` varchar(255) DEFAULT NULL,
  `policy_lapse_date` varchar(255) DEFAULT NULL,
  `policy_revival_date` varchar(255) DEFAULT NULL,
  `policy_termination_date` varchar(255) DEFAULT NULL,
  `policy_suspend_date` varchar(255) DEFAULT NULL,
  `policy_unsuspend_date` varchar(255) DEFAULT NULL,
  `policy_status` varchar(255) DEFAULT NULL,
  `program` varchar(255) DEFAULT NULL,
  `plan` varchar(255) DEFAULT NULL,
  `plan_external` varchar(255) DEFAULT NULL,
  `plan_attach_date` varchar(255) DEFAULT NULL,
  `plan_expiry_date` varchar(255) DEFAULT NULL,
  `rider` varchar(255) DEFAULT NULL,
  `rider_attach_date` varchar(255) DEFAULT NULL,
  `rider_expiry_date` varchar(255) DEFAULT NULL,
  `special_condition` varchar(255) DEFAULT NULL,
  `exclusion` varchar(255) DEFAULT NULL,
  `bank` varchar(255) DEFAULT NULL,
  `location` varchar(255) DEFAULT NULL,
  `account_no` varchar(255) DEFAULT NULL,
  `on_behalf_of` varchar(255) DEFAULT NULL,
  `medisclick_activation` varchar(255) DEFAULT NULL,
  `medisclick_activation_date` varchar(255) DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `create_date` varchar(255) DEFAULT NULL,
  `edited_by` varchar(255) DEFAULT NULL,
  `edit_date` varchar(255) DEFAULT NULL,
  `member_username` varchar(255) DEFAULT NULL,
  `member_name_encrypt` varchar(255) DEFAULT NULL,
  `member_dob_encrypt` varchar(255) DEFAULT NULL,
  `member_phone_encrypt` varchar(255) DEFAULT NULL,
  `flag_login_medisclick` varchar(255) DEFAULT NULL,
  `member_device` varchar(255) DEFAULT NULL,
  `member_os` varchar(255) DEFAULT NULL,
  `member_app` varchar(255) DEFAULT NULL,
  `member_serial` varchar(255) DEFAULT NULL,
  `member_regid` varchar(255) DEFAULT NULL,
  `medisclick_email` varchar(255) DEFAULT NULL,
  `medisclick_password` varchar(255) DEFAULT NULL,
  `medisclick_phone` varchar(255) DEFAULT NULL,
  `member_card_edc_01` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for delivery_batch
-- ----------------------------
DROP TABLE IF EXISTS `delivery_batch`;
CREATE TABLE `delivery_batch` (
  `client` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `case` varchar(8000) DEFAULT '',
  `received_by_client` int(11) DEFAULT NULL,
  `received_doc_date` datetime DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `dbacth_idx` (`client`,`received_by_client`)
) ENGINE=InnoDB AUTO_INCREMENT=1077 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for department
-- ----------------------------
DROP TABLE IF EXISTS `department`;
CREATE TABLE `department` (
  `client` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `code` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=249 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for diagnosis
-- ----------------------------
DROP TABLE IF EXISTS `diagnosis`;
CREATE TABLE `diagnosis` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(50) DEFAULT NULL,
  `edc_code` varchar(50) DEFAULT NULL,
  `name` varchar(255) DEFAULT '',
  `group` varchar(50) DEFAULT '',
  `category` int(11) DEFAULT NULL,
  `classification` int(11) DEFAULT NULL,
  `accident` int(11) DEFAULT NULL,
  `icd` varchar(50) DEFAULT NULL,
  `averaged_cost` decimal(20,2) DEFAULT NULL,
  `los` varchar(50) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `diagnosis_cgcc` (`code`) USING BTREE,
  KEY `diagnosis_idx` (`group`,`category`,`classification`,`status`) USING BTREE,
  KEY `diagnosis_idx2` (`category`),
  KEY `diagnosis_idx3` (`classification`),
  KEY `diagnosis_idx4` (`edc_code`),
  KEY `diagnosis_idx5` (`icd`,`edc_code`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=102132 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for diagnosis_00
-- ----------------------------
DROP TABLE IF EXISTS `diagnosis_00`;
CREATE TABLE `diagnosis_00` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(50) DEFAULT NULL,
  `edc_code` varchar(50) DEFAULT NULL,
  `name` varchar(255) DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE KEY `diagnosis_cgcc` (`code`) USING BTREE,
  KEY `diagnosis_idx4` (`edc_code`)
) ENGINE=InnoDB AUTO_INCREMENT=102132 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for diagnosis_01
-- ----------------------------
DROP TABLE IF EXISTS `diagnosis_01`;
CREATE TABLE `diagnosis_01` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(50) DEFAULT '',
  `name` varchar(255) DEFAULT '',
  `group` varchar(50) DEFAULT '',
  `category` int(11) DEFAULT NULL,
  `classification` int(11) DEFAULT NULL,
  `accident` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `diagnosis_cgcc` (`code`,`group`,`category`,`classification`)
) ENGINE=InnoDB AUTO_INCREMENT=12158 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for diagnosis_category
-- ----------------------------
DROP TABLE IF EXISTS `diagnosis_category`;
CREATE TABLE `diagnosis_category` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for diagnosis_classification
-- ----------------------------
DROP TABLE IF EXISTS `diagnosis_classification`;
CREATE TABLE `diagnosis_classification` (
  `id` int(11) NOT NULL,
  `name` varchar(100) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for doc_hospital
-- ----------------------------
DROP TABLE IF EXISTS `doc_hospital`;
CREATE TABLE `doc_hospital` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `upload_haf` varchar(500) DEFAULT NULL,
  `upload_doc` varchar(500) DEFAULT NULL,
  `mail_to` varchar(100) DEFAULT NULL,
  `mail_cc` varchar(100) DEFAULT NULL,
  `mail_bcc` varchar(100) DEFAULT NULL,
  `upload_by` varchar(30) DEFAULT NULL,
  `upload_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=116 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for edc_api
-- ----------------------------
DROP TABLE IF EXISTS `edc_api`;
CREATE TABLE `edc_api` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `created_date` datetime DEFAULT NULL,
  `header` varchar(255) DEFAULT NULL,
  `category` varchar(11) DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `provider` int(11) DEFAULT NULL,
  `id_category` int(11) DEFAULT NULL,
  `code_benefit` varchar(255) DEFAULT NULL,
  `day` varchar(255) DEFAULT NULL,
  `index` varchar(255) DEFAULT NULL,
  `service_in` datetime DEFAULT NULL,
  `service_out` datetime DEFAULT NULL,
  `bit1` varchar(255) DEFAULT NULL,
  `bit2` varchar(255) DEFAULT NULL,
  `bit3` varchar(255) DEFAULT NULL,
  `bit4` varchar(255) DEFAULT NULL,
  `bit5` varchar(255) DEFAULT NULL,
  `bit6` varchar(255) DEFAULT NULL,
  `bit7` varchar(255) DEFAULT NULL,
  `bit8` varchar(255) DEFAULT NULL,
  `bit9` varchar(255) DEFAULT NULL,
  `bit10` varchar(255) DEFAULT NULL,
  `bit11` varchar(255) DEFAULT NULL,
  `bit12` varchar(255) DEFAULT NULL,
  `bit13` varchar(255) DEFAULT NULL,
  `bit14` varchar(255) DEFAULT NULL,
  `bit15` varchar(255) DEFAULT NULL,
  `bit16` varchar(255) DEFAULT NULL,
  `bit17` varchar(255) DEFAULT NULL,
  `bit18` varchar(255) DEFAULT NULL,
  `bit19` varchar(255) DEFAULT NULL,
  `bit20` varchar(255) DEFAULT NULL,
  `bit21` varchar(255) DEFAULT NULL,
  `bit22` varchar(255) DEFAULT NULL,
  `bit23` varchar(255) DEFAULT NULL,
  `bit24` varchar(255) DEFAULT NULL,
  `bit25` varchar(255) DEFAULT NULL,
  `bit26` varchar(255) DEFAULT NULL,
  `bit27` varchar(255) DEFAULT NULL,
  `bit28` varchar(255) DEFAULT NULL,
  `bit29` varchar(255) DEFAULT NULL,
  `bit30` varchar(255) DEFAULT NULL,
  `bit31` varchar(255) DEFAULT NULL,
  `bit32` varchar(255) DEFAULT NULL,
  `bit33` varchar(255) DEFAULT NULL,
  `bit34` varchar(255) DEFAULT NULL,
  `bit35` varchar(255) DEFAULT NULL,
  `bit36` varchar(255) DEFAULT NULL,
  `bit37` varchar(255) DEFAULT NULL,
  `bit38` varchar(255) DEFAULT NULL,
  `bit39` varchar(255) DEFAULT NULL,
  `bit40` varchar(255) DEFAULT NULL,
  `bit41` varchar(255) DEFAULT NULL,
  `bit42` varchar(255) DEFAULT NULL,
  `bit43` varchar(255) DEFAULT NULL,
  `bit44` varchar(255) DEFAULT NULL,
  `bit45` varchar(255) DEFAULT NULL,
  `bit46` varchar(255) DEFAULT NULL,
  `bit47` varchar(255) DEFAULT NULL,
  `bit48` varchar(1000) DEFAULT NULL,
  `bit49` varchar(255) DEFAULT NULL,
  `bit50` varchar(255) DEFAULT NULL,
  `bit51` varchar(255) DEFAULT NULL,
  `bit52` varchar(255) DEFAULT NULL,
  `bit53` varchar(255) DEFAULT NULL,
  `bit54` varchar(255) DEFAULT NULL,
  `bit55` varchar(255) DEFAULT NULL,
  `bit56` varchar(255) DEFAULT NULL,
  `bit57` varchar(255) DEFAULT NULL,
  `bit58` varchar(255) DEFAULT NULL,
  `bit59` varchar(255) DEFAULT NULL,
  `bit60` varchar(255) DEFAULT NULL,
  `bit61` varchar(255) DEFAULT NULL,
  `bit62` varchar(255) DEFAULT NULL,
  `bit63` varchar(1000) DEFAULT NULL,
  `bit64` varchar(255) DEFAULT NULL,
  `bit65` varchar(255) DEFAULT NULL,
  `bit66` varchar(255) DEFAULT NULL,
  `bit67` varchar(255) DEFAULT NULL,
  `bit68` varchar(255) DEFAULT NULL,
  `bit69` varchar(255) DEFAULT NULL,
  `bit70` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=163480 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for edc_remarks
-- ----------------------------
DROP TABLE IF EXISTS `edc_remarks`;
CREATE TABLE `edc_remarks` (
  `client` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(40) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=106 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Table structure for email_notif_sunlife
-- ----------------------------
DROP TABLE IF EXISTS `email_notif_sunlife`;
CREATE TABLE `email_notif_sunlife` (
  `id` int(11) DEFAULT NULL,
  `case_id` int(11) DEFAULT NULL,
  `email_status` tinyint(4) DEFAULT NULL,
  `date_send` datetime DEFAULT NULL,
  `nama_peserta` varchar(150) DEFAULT NULL,
  `policy_no` varchar(150) DEFAULT NULL,
  `admission_date` date DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for error_category
-- ----------------------------
DROP TABLE IF EXISTS `error_category`;
CREATE TABLE `error_category` (
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `option` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT NULL,
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for error_detail
-- ----------------------------
DROP TABLE IF EXISTS `error_detail`;
CREATE TABLE `error_detail` (
  `header` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `option` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT NULL,
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for error_header
-- ----------------------------
DROP TABLE IF EXISTS `error_header`;
CREATE TABLE `error_header` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT NULL,
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for error_log
-- ----------------------------
DROP TABLE IF EXISTS `error_log`;
CREATE TABLE `error_log` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `category` int(11) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `remarks` varchar(255) DEFAULT NULL,
  `checked_by` varchar(50) DEFAULT NULL,
  `check_date` datetime DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=539 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for error_type
-- ----------------------------
DROP TABLE IF EXISTS `error_type`;
CREATE TABLE `error_type` (
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT NULL,
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=69 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for external_case
-- ----------------------------
DROP TABLE IF EXISTS `external_case`;
CREATE TABLE `external_case` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `case` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `claim_no` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `claim_type` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `pb_no` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `policy_no` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `insured_name` int(11) DEFAULT NULL,
  `bank` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `branch` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `account_name` varchar(75) CHARACTER SET latin1 DEFAULT NULL,
  `account_no` varchar(50) CHARACTER SET latin1 DEFAULT NULL,
  `amount` decimal(20,2) DEFAULT NULL,
  `finance_receive_date` datetime DEFAULT NULL,
  `paid_date` datetime DEFAULT NULL,
  `hospital` varchar(75) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_extcase` (`case`,`claim_type`)
) ENGINE=InnoDB AUTO_INCREMENT=3352 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for faq
-- ----------------------------
DROP TABLE IF EXISTS `faq`;
CREATE TABLE `faq` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `question` text COLLATE utf8_unicode_ci DEFAULT NULL,
  `answer` text COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Table structure for fcm
-- ----------------------------
DROP TABLE IF EXISTS `fcm`;
CREATE TABLE `fcm` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `device` varchar(100) NOT NULL,
  `os_version` varchar(100) NOT NULL,
  `app_version` varchar(10) NOT NULL,
  `serial` varchar(100) NOT NULL,
  `regid` text NOT NULL,
  `created_at` bigint(20) NOT NULL,
  `last_update` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for final_decision
-- ----------------------------
DROP TABLE IF EXISTS `final_decision`;
CREATE TABLE `final_decision` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for float_fund
-- ----------------------------
DROP TABLE IF EXISTS `float_fund`;
CREATE TABLE `float_fund` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime DEFAULT NULL,
  `description` varchar(50) DEFAULT '',
  `amount` decimal(20,2) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `floatSort` (`date`,`program`,`client`) USING BTREE,
  KEY `floatSort2` (`program`),
  KEY `floatSort3` (`client`)
) ENGINE=InnoDB AUTO_INCREMENT=1961 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for general
-- ----------------------------
DROP TABLE IF EXISTS `general`;
CREATE TABLE `general` (
  `plan_detail` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `id_perawatan` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `generalSort1` (`plan_detail`),
  KEY `generalSort2` (`name`),
  KEY `generalSort3` (`id_perawatan`)
) ENGINE=InnoDB AUTO_INCREMENT=12260 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for general_edc
-- ----------------------------
DROP TABLE IF EXISTS `general_edc`;
CREATE TABLE `general_edc` (
  `client` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_header` int(11) DEFAULT NULL,
  `plan_detail` int(11) DEFAULT NULL,
  `code_edc` int(11) DEFAULT NULL,
  `code_benefit` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11483 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for general_rev
-- ----------------------------
DROP TABLE IF EXISTS `general_rev`;
CREATE TABLE `general_rev` (
  `case` int(11) DEFAULT NULL,
  `general` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `amount` decimal(20,0) DEFAULT 0,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Table structure for generated_card_edc
-- ----------------------------
DROP TABLE IF EXISTS `generated_card_edc`;
CREATE TABLE `generated_card_edc` (
  `Identifier` varchar(255) DEFAULT NULL,
  `Corrected` varchar(255) DEFAULT NULL,
  `Left` varchar(255) DEFAULT NULL,
  `Right` varchar(255) DEFAULT NULL,
  `Concat` varchar(255) DEFAULT NULL,
  `luhn` varchar(50) DEFAULT NULL,
  `id` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for hist_case
-- ----------------------------
DROP TABLE IF EXISTS `hist_case`;
CREATE TABLE `hist_case` (
  `case_group` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `created_by_01` varchar(50) DEFAULT '',
  `create_date_01` datetime DEFAULT NULL,
  `source` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `status_01` int(11) DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `ref` varchar(100) DEFAULT '',
  `final_decision` text DEFAULT NULL,
  `case_remarks` text DEFAULT NULL,
  `averaged_cost` decimal(20,2) DEFAULT NULL,
  `case_remarks_by` varchar(50) DEFAULT '',
  `case_remarks_date` datetime DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `gender` int(11) DEFAULT NULL,
  `member_id` varchar(50) DEFAULT '',
  `member_card` varchar(100) DEFAULT '',
  `member_card_edc` varchar(16) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `relation` int(11) DEFAULT NULL,
  `mobile` varchar(50) DEFAULT '',
  `client` int(11) DEFAULT NULL,
  `branch` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `policy_status` int(11) DEFAULT NULL,
  `policy_no` varchar(50) DEFAULT '',
  `policy_holder` varchar(75) DEFAULT '',
  `policy_effective_date` date DEFAULT NULL,
  `policy_expiry_date` date DEFAULT NULL,
  `policy_issue_date` date DEFAULT NULL,
  `policy_declare_date` date DEFAULT NULL,
  `policy_lapse_date` date DEFAULT NULL,
  `policy_revival_date` date DEFAULT NULL,
  `policy_termination_date` date DEFAULT NULL,
  `policy_suspend_date` date DEFAULT NULL,
  `policy_unsuspend_date` date DEFAULT NULL,
  `waiting_period` int(11) DEFAULT NULL,
  `exclusion` text DEFAULT NULL,
  `special_condition` text DEFAULT NULL,
  `member_remarks` text DEFAULT NULL,
  `member_remarks_by` text DEFAULT NULL,
  `member_remarks_date` datetime DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_header` varchar(50) DEFAULT '',
  `code_rawat` int(11) DEFAULT NULL,
  `plan_attach_date` date DEFAULT NULL,
  `plan_expiry_date` date DEFAULT NULL,
  `rider` int(11) DEFAULT NULL,
  `rider_attach_date` date DEFAULT NULL,
  `rider_expiry_date` date DEFAULT NULL,
  `provider` int(11) DEFAULT NULL,
  `provider_email` varchar(700) DEFAULT '',
  `other_provider` varchar(75) DEFAULT '',
  `other_provider_city` varchar(255) DEFAULT '',
  `other_provider_country` int(11) DEFAULT NULL,
  `provider_cancel` int(11) DEFAULT 0,
  `id_edc` varchar(20) DEFAULT '',
  `currency_01` int(11) DEFAULT NULL,
  `currency_02` int(11) DEFAULT NULL,
  `currency_rate` decimal(20,15) DEFAULT NULL,
  `currency_rate_01_to_idr` decimal(20,15) DEFAULT 0.000000000000000,
  `currency_rate_idr_to_02` decimal(20,15) DEFAULT 0.000000000000000,
  `amount_currency_01` decimal(20,2) DEFAULT NULL,
  `admission_date` date DEFAULT NULL,
  `admission_time` time DEFAULT NULL,
  `admission_doctor` varchar(75) DEFAULT '',
  `symptom` varchar(250) DEFAULT '',
  `symptom_since` date DEFAULT NULL,
  `vital_sign` varchar(75) DEFAULT '',
  `initial_diagnosis` varchar(1000) DEFAULT '',
  `initial_diagnosis_01` varchar(10) DEFAULT '',
  `treatment_plan` varchar(75) DEFAULT '',
  `upload_haf` varchar(150) DEFAULT '',
  `haf_uploaded_by` varchar(50) DEFAULT '',
  `haf_upload_date` datetime DEFAULT NULL,
  `upload_doc` varchar(300) DEFAULT '',
  `doc_uploaded_by` varchar(50) DEFAULT '',
  `doc_upload_date` datetime DEFAULT NULL,
  `upload_haf_doc_finished` int(11) DEFAULT NULL,
  `upload_haf_doc_finished_by` varchar(50) DEFAULT '',
  `upload_haf_doc_finished_date` datetime DEFAULT NULL,
  `haf_doc_completed` int(11) DEFAULT NULL,
  `haf_doc_completed_remarks` varchar(1000) DEFAULT '',
  `haf_doc_completed_by` varchar(50) DEFAULT '',
  `haf_doc_completed_date` datetime DEFAULT NULL,
  `issue_initial_log` int(11) DEFAULT NULL,
  `initial_log_issued_by` varchar(50) DEFAULT '',
  `initial_log_issue_date` datetime DEFAULT NULL,
  `initial_log_issued_by_01` varchar(50) DEFAULT '',
  `initial_log_issue_date_01` datetime DEFAULT NULL,
  `initial_claim_no` varchar(50) DEFAULT '',
  `initial_log_remarks` varchar(1000) DEFAULT '',
  `initial_log_approval` int(11) DEFAULT NULL,
  `discharge_plan` datetime DEFAULT NULL,
  `discharge_plan_received_by` varchar(50) DEFAULT '',
  `discharge_plan_receive_date` datetime DEFAULT NULL,
  `discharge_date` datetime DEFAULT NULL,
  `discharge_doctor` varchar(75) DEFAULT '',
  `actual_treatment` varchar(150) DEFAULT '',
  `diagnosis` varchar(100) DEFAULT '',
  `other_diagnosis` varchar(1000) DEFAULT '',
  `surgery` varchar(50) DEFAULT NULL,
  `other_surgery` varchar(250) DEFAULT NULL,
  `bill_received` int(11) DEFAULT NULL,
  `bill_received_by` varchar(50) DEFAULT '',
  `bill_received_date` datetime DEFAULT NULL,
  `upload_bill` varchar(1500) DEFAULT '',
  `bill_uploaded_by` varchar(50) DEFAULT '',
  `bill_upload_date` datetime DEFAULT NULL,
  `upload_bill_finished` int(11) DEFAULT NULL,
  `upload_bill_finished_by` varchar(50) DEFAULT '',
  `upload_bill_finished_date` datetime DEFAULT NULL,
  `bill_completed` int(11) DEFAULT NULL,
  `bill_completed_remarks` varchar(1000) DEFAULT '',
  `bill_completed_by` varchar(50) DEFAULT '',
  `bill_completed_date` datetime DEFAULT NULL,
  `bill_completed_by_01` varchar(50) DEFAULT '',
  `bill_completed_date_01` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `ws_type` int(11) DEFAULT NULL,
  `ws_option` int(11) DEFAULT NULL,
  `ws_finished` int(11) DEFAULT NULL,
  `ws_finished_by` varchar(50) DEFAULT '',
  `ws_finished_date` datetime DEFAULT NULL,
  `ws_approval` int(11) DEFAULT NULL,
  `ws_approval_remarks` varchar(1000) DEFAULT '',
  `ws_approval_by` varchar(50) DEFAULT '',
  `ws_approval_date` datetime DEFAULT NULL,
  `ws_error_category` int(11) DEFAULT NULL,
  `ws_error_type` int(11) DEFAULT NULL,
  `ws_error_remarks` varchar(255) DEFAULT '',
  `issuance_limit` decimal(20,2) DEFAULT NULL,
  `issue_log` int(11) DEFAULT NULL,
  `issue_log_option` int(11) DEFAULT NULL,
  `log_issued_by` varchar(50) DEFAULT '',
  `log_issue_date` datetime DEFAULT NULL,
  `log_issued_by_01` varchar(50) DEFAULT '',
  `log_issue_date_01` datetime DEFAULT NULL,
  `claim_no` varchar(50) DEFAULT '',
  `log_remarks` varchar(1000) DEFAULT '',
  `log_bank` varchar(50) DEFAULT NULL,
  `log_bank_branch` varchar(50) DEFAULT NULL,
  `log_bank_city` varchar(50) DEFAULT NULL,
  `log_bank_account_no` varchar(50) DEFAULT NULL,
  `log_bank_on_behalf_of` varchar(100) DEFAULT NULL,
  `log_approval` int(11) DEFAULT NULL,
  `nonlog_reason` varchar(1200) DEFAULT '',
  `nonlog_remarks` varchar(1000) DEFAULT '',
  `nonlog_remarks_code` varchar(100) DEFAULT NULL,
  `reject_reason` varchar(1200) DEFAULT '',
  `reject_remarks` varchar(1000) DEFAULT '',
  `batch_received` varchar(50) DEFAULT '',
  `bill_no` varchar(200) DEFAULT '',
  `bill_issue_date` datetime DEFAULT NULL,
  `bill_due_date` datetime DEFAULT NULL,
  `upload_original_bill` varchar(300) DEFAULT '',
  `original_bill_uploaded_by` varchar(50) DEFAULT '',
  `original_bill_upload_date` datetime DEFAULT NULL,
  `original_bill_upload_date_first` datetime DEFAULT NULL,
  `original_bill_checked` int(11) DEFAULT NULL,
  `original_bill_checked_remarks` varchar(1000) DEFAULT '',
  `original_bill_checked_by` varchar(50) DEFAULT '',
  `original_bill_checked_date` datetime DEFAULT NULL,
  `original_bill_checked_01` int(11) DEFAULT NULL,
  `original_bill_checked_by_01` varchar(50) DEFAULT '',
  `original_bill_checked_date_01` datetime DEFAULT NULL,
  `original_bill_checked_error_category` int(11) DEFAULT NULL,
  `original_bill_checked_error_type` int(11) DEFAULT NULL,
  `original_bill_checked_error_remarks` varchar(255) DEFAULT '',
  `close_case_option` int(11) DEFAULT NULL,
  `discount` decimal(20,2) DEFAULT NULL,
  `original_bill_verified` int(11) DEFAULT NULL,
  `original_bill_verified_remarks` varchar(1000) DEFAULT '',
  `original_bill_verified_by` varchar(50) DEFAULT '',
  `original_bill_verified_date` datetime DEFAULT NULL,
  `original_bill_verified_error_category` int(11) DEFAULT NULL,
  `original_bill_verified_error_type` int(11) DEFAULT NULL,
  `original_bill_verified_error_remarks` text DEFAULT NULL,
  `client_approval_for_payment` datetime DEFAULT NULL,
  `payment_approval_by` varchar(50) DEFAULT NULL,
  `payment_approval_date` datetime DEFAULT NULL,
  `upload_payment_approval` varchar(150) DEFAULT NULL,
  `payment_date` datetime DEFAULT NULL,
  `paid_by` varchar(50) DEFAULT '',
  `upload_proof_of_payment` varchar(150) DEFAULT '',
  `upload_payment_date` datetime DEFAULT NULL,
  `payment_date_01` datetime DEFAULT NULL,
  `paid_by_01` varchar(50) DEFAULT '',
  `upload_proof_of_payment_01` varchar(150) DEFAULT '',
  `upload_payment_date_01` datetime DEFAULT NULL,
  `doc_send_back_to_client_required` int(11) DEFAULT NULL,
  `doc_send_back_to_client_date` datetime DEFAULT NULL,
  `doc_received_by_client_date` datetime DEFAULT NULL,
  `send_received_by` varchar(50) DEFAULT '',
  `send_received_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `case_closed_date` datetime DEFAULT NULL,
  `case_closed_date_01` datetime DEFAULT NULL,
  `case_reopen_date` datetime DEFAULT NULL,
  `case_reopen_date_01` datetime DEFAULT NULL,
  `procced_to_worksheet` int(11) DEFAULT 0,
  `case_header` int(11) DEFAULT NULL,
  `is_clean` int(11) DEFAULT NULL,
  `code_edc` int(11) DEFAULT NULL,
  `TraceNumber` varchar(50) DEFAULT '',
  `los` varchar(50) DEFAULT '',
  `copy_case` int(11) DEFAULT NULL,
  `copy_case_no` int(11) DEFAULT NULL,
  `copy_case_no_01` int(11) DEFAULT NULL,
  `copy_by` varchar(50) DEFAULT NULL,
  `copy_date` datetime DEFAULT NULL,
  `sms_send` int(11) DEFAULT NULL,
  `sms_send_01` int(11) DEFAULT NULL,
  `change_status` int(11) DEFAULT NULL,
  `change_status_01` int(11) DEFAULT NULL,
  `change_status_01_by` text DEFAULT NULL,
  `change_status_01_date` datetime DEFAULT NULL,
  `change_status_02` int(11) DEFAULT NULL,
  `change_status_02_by` text DEFAULT NULL,
  `change_status_02_date` datetime DEFAULT NULL,
  `userlevel` int(11) DEFAULT NULL,
  `case_id_client` int(11) DEFAULT NULL,
  `cover_null` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `caseSort` (`patient`,`admission_date`) USING BTREE,
  KEY `caseSort3` (`principle`),
  KEY `caseSort5` (`status`,`admission_date`),
  KEY `caseSort6` (`program`),
  KEY `caseSort7` (`plan`),
  KEY `caseSort8` (`admission_date`),
  KEY `caseSort10` (`plan_header`),
  KEY `caseSort12` (`provider`),
  KEY `caseSort13` (`category`,`type`),
  KEY `caseSort14` (`diagnosis`),
  KEY `caseSort15` (`category`),
  KEY `caseSort9` (`status`) USING BTREE,
  KEY `caseSort16` (`status`,`program`),
  KEY `caseSort18` (`type`),
  KEY `caseSort19` (`source`) USING BTREE,
  KEY `caseSort17` (`payment_date`,`upload_proof_of_payment`,`source`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=438554 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for history_disable_member
-- ----------------------------
DROP TABLE IF EXISTS `history_disable_member`;
CREATE TABLE `history_disable_member` (
  `client` int(11) DEFAULT NULL,
  `member` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `policy_no` varchar(100) DEFAULT '',
  `policy_status` int(11) DEFAULT NULL,
  `policy_issue_date` datetime DEFAULT NULL,
  `policy_declare_date` datetime DEFAULT NULL,
  `policy_effective_date` datetime DEFAULT NULL,
  `policy_expiry_date` datetime DEFAULT NULL,
  `policy_lapse_date` datetime DEFAULT NULL,
  `policy_revival_date` datetime DEFAULT NULL,
  `policy_termination_date` datetime DEFAULT NULL,
  `policy_suspend_date` datetime DEFAULT NULL,
  `policy_unsuspend_date` datetime DEFAULT NULL,
  `plan_attach_date` datetime DEFAULT NULL,
  `plan_expiry_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=102 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for history_member_remarks
-- ----------------------------
DROP TABLE IF EXISTS `history_member_remarks`;
CREATE TABLE `history_member_remarks` (
  `patient` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `remarks` text DEFAULT NULL,
  `remarks_by` varchar(100) DEFAULT NULL,
  `remarks_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=657 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for jagadiri_auto_staging
-- ----------------------------
DROP TABLE IF EXISTS `jagadiri_auto_staging`;
CREATE TABLE `jagadiri_auto_staging` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ref` varchar(255) DEFAULT NULL,
  `member_id` varchar(255) DEFAULT NULL,
  `category` varchar(255) DEFAULT NULL,
  `policy_no` varchar(255) DEFAULT NULL,
  `policy_holder` varchar(255) DEFAULT NULL,
  `patient` varchar(255) DEFAULT NULL,
  `program` varchar(255) DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `gender` varchar(255) DEFAULT NULL,
  `policy_effective_date` date DEFAULT NULL,
  `policy_expiry_date` date DEFAULT NULL,
  `plan` varchar(255) DEFAULT NULL,
  `admission_date` date DEFAULT NULL,
  `discharge_date` date DEFAULT NULL,
  `long_hospitalization` int(255) DEFAULT NULL,
  `akumulasi` int(255) DEFAULT NULL,
  `other_diagnosis` varchar(255) DEFAULT NULL,
  `diagnosis` varchar(255) DEFAULT NULL,
  `create_date` varchar(255) DEFAULT NULL,
  `provider` varchar(255) DEFAULT NULL,
  `discharge_doctor` varchar(255) DEFAULT NULL,
  `issue_log` varchar(255) DEFAULT NULL,
  `payment_date` date DEFAULT NULL,
  `detail` varchar(255) DEFAULT NULL,
  `actual` int(255) DEFAULT NULL,
  `cover` int(255) DEFAULT NULL,
  `excess` int(255) DEFAULT NULL,
  `excess_remark` text DEFAULT NULL,
  `created_by` text DEFAULT NULL,
  `description1` text DEFAULT NULL,
  `description2` text DEFAULT NULL,
  `description3` text DEFAULT NULL,
  `description4` text DEFAULT NULL,
  `description5` text DEFAULT NULL,
  `description6` text DEFAULT NULL,
  `description7` text DEFAULT NULL,
  `description8` text DEFAULT NULL,
  `description9` text DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1233 DEFAULT CHARSET=latin1 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for kondisi_polis
-- ----------------------------
DROP TABLE IF EXISTS `kondisi_polis`;
CREATE TABLE `kondisi_polis` (
  `client` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ketentuan` text DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `created_by` varchar(50) DEFAULT NULL,
  `upload` varchar(250) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for last_version
-- ----------------------------
DROP TABLE IF EXISTS `last_version`;
CREATE TABLE `last_version` (
  `id` int(11) DEFAULT NULL,
  `version` varchar(50) DEFAULT NULL,
  `status` int(11) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for log_page_analytic
-- ----------------------------
DROP TABLE IF EXISTS `log_page_analytic`;
CREATE TABLE `log_page_analytic` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `url` varchar(250) DEFAULT '',
  `name` text DEFAULT NULL,
  `loading_time` int(11) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `flag` int(2) DEFAULT 1,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=64 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for log_reminder_ob
-- ----------------------------
DROP TABLE IF EXISTS `log_reminder_ob`;
CREATE TABLE `log_reminder_ob` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `status` int(11) DEFAULT NULL,
  `batch` varchar(255) DEFAULT NULL,
  `case` int(11) DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `reminder_type` int(11) DEFAULT NULL,
  `ob_checked_remarks` varchar(9000) DEFAULT NULL,
  `create_by` varchar(255) DEFAULT NULL,
  `process_date` datetime DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=115582 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for medical_enquiry
-- ----------------------------
DROP TABLE IF EXISTS `medical_enquiry`;
CREATE TABLE `medical_enquiry` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `attention` varchar(255) DEFAULT NULL,
  `provider` varchar(255) DEFAULT NULL,
  `date` date DEFAULT NULL,
  `cc` varchar(255) DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `diagnose` varchar(255) DEFAULT NULL,
  `email_fax` varchar(255) DEFAULT NULL,
  `telephone` varchar(255) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `edited_by` varchar(255) DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for medical_enquiry_master
-- ----------------------------
DROP TABLE IF EXISTS `medical_enquiry_master`;
CREATE TABLE `medical_enquiry_master` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `question` text DEFAULT NULL,
  `detail` text DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for member
-- ----------------------------
DROP TABLE IF EXISTS `member`;
CREATE TABLE `member` (
  `client` int(11) DEFAULT NULL,
  `branch` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `department` int(11) DEFAULT NULL,
  `position` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `member_name` varchar(75) DEFAULT '',
  `member_id` varchar(50) DEFAULT '',
  `member_card` varchar(100) DEFAULT '',
  `member_card_edc` varchar(16) DEFAULT NULL,
  `member_dob` date DEFAULT NULL,
  `member_gender` int(11) DEFAULT NULL,
  `member_marital` int(11) DEFAULT NULL,
  `member_address` varchar(255) DEFAULT '',
  `member_country` int(11) DEFAULT NULL,
  `member_province` varchar(50) DEFAULT NULL,
  `member_city` varchar(50) DEFAULT NULL,
  `member_postal` varchar(50) DEFAULT '',
  `member_phone` varchar(50) DEFAULT '',
  `member_mobile` varchar(50) DEFAULT '',
  `member_email` varchar(75) DEFAULT '',
  `member_password` varchar(50) DEFAULT '',
  `member_relation` int(11) DEFAULT NULL,
  `member_principle` int(11) DEFAULT NULL,
  `policy_no` varchar(50) DEFAULT '',
  `policy_holder` varchar(75) DEFAULT '',
  `policy_issue_date` date DEFAULT NULL,
  `policy_declare_date` date DEFAULT NULL,
  `policy_effective_date` date DEFAULT NULL,
  `policy_effective_date_card` date DEFAULT NULL,
  `policy_expiry_date` date DEFAULT NULL,
  `policy_lapse_date` date DEFAULT NULL,
  `policy_revival_date` date DEFAULT NULL,
  `policy_termination_date` date DEFAULT NULL,
  `policy_suspend_date` date DEFAULT NULL,
  `policy_unsuspend_date` date DEFAULT NULL,
  `policy_status` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_external` varchar(50) DEFAULT '',
  `plan_attach_date` date DEFAULT NULL,
  `plan_expiry_date` date DEFAULT NULL,
  `rider` int(11) DEFAULT NULL,
  `rider_attach_date` date DEFAULT NULL,
  `rider_expiry_date` date DEFAULT NULL,
  `special_condition` text DEFAULT NULL,
  `exclusion` text DEFAULT NULL,
  `member_remarks` text DEFAULT NULL,
  `remarks_by` varchar(255) DEFAULT NULL,
  `remarks_date` datetime DEFAULT NULL,
  `bank` varchar(50) DEFAULT '',
  `location` varchar(75) DEFAULT '',
  `account_no` varchar(50) DEFAULT '',
  `on_behalf_of` varchar(75) DEFAULT '',
  `medisclick_activation` int(11) DEFAULT 0,
  `medisclick_activation_date` datetime DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `member_username` varchar(50) DEFAULT NULL,
  `member_name_encrypt` blob DEFAULT NULL,
  `member_dob_encrypt` blob DEFAULT NULL,
  `member_phone_encrypt` blob DEFAULT NULL,
  `flag_login_medisclick` int(11) DEFAULT 0,
  `member_device` varchar(50) DEFAULT NULL,
  `member_os` varchar(50) DEFAULT NULL,
  `member_app` varchar(50) DEFAULT NULL,
  `member_serial` varchar(200) DEFAULT NULL,
  `member_regid` varchar(255) DEFAULT NULL,
  `medisclick_email` varchar(75) DEFAULT NULL,
  `medisclick_password` varchar(50) DEFAULT NULL,
  `medisclick_phone` varchar(50) DEFAULT NULL,
  `member_card_edc_01` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `memberIndex` (`client`,`plan`,`program`,`member_principle`,`policy_no`,`company`,`branch`,`member_relation`,`rider`) USING BTREE,
  KEY `memberIndex2` (`member_card_edc`),
  KEY `memberIndex3` (`plan`),
  KEY `memberIndex4` (`program`),
  KEY `memberIndex5` (`policy_status`),
  KEY `memberIndex6` (`member_principle`),
  KEY `memberIndex7` (`policy_status`,`member_principle`,`program`,`plan`),
  KEY `memberIndex8` (`plan`,`rider`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5479782 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for member_history
-- ----------------------------
DROP TABLE IF EXISTS `member_history`;
CREATE TABLE `member_history` (
  `client` int(11) DEFAULT NULL,
  `branch` varchar(100) DEFAULT NULL,
  `company` varchar(100) DEFAULT NULL,
  `region` varchar(100) DEFAULT NULL,
  `division` varchar(100) DEFAULT NULL,
  `id` int(100) NOT NULL AUTO_INCREMENT,
  `member_name` varchar(100) DEFAULT '',
  `member_id` varchar(100) DEFAULT '',
  `member_nric` varchar(100) DEFAULT NULL,
  `member_other_ic` varchar(100) DEFAULT NULL,
  `member_card` varchar(100) DEFAULT '',
  `member_dob` varchar(100) DEFAULT NULL,
  `member_gender` varchar(100) DEFAULT NULL,
  `member_marital` varchar(100) DEFAULT NULL,
  `member_address` varchar(255) DEFAULT '',
  `member_address_01` varchar(255) DEFAULT NULL,
  `member_address_02` varchar(255) DEFAULT NULL,
  `member_country` varchar(100) DEFAULT NULL,
  `member_province` varchar(100) DEFAULT NULL,
  `member_city` varchar(100) DEFAULT NULL,
  `member_postal` varchar(100) DEFAULT '',
  `member_phone` varchar(100) DEFAULT '',
  `member_mobile` varchar(100) DEFAULT '',
  `member_phone_office_01` varchar(100) DEFAULT NULL,
  `member_phone_office_02` varchar(100) DEFAULT NULL,
  `member_email` varchar(100) DEFAULT '',
  `member_password` varchar(100) DEFAULT '',
  `member_relation` varchar(100) DEFAULT NULL,
  `member_principle` varchar(100) DEFAULT NULL,
  `member_job_title` varchar(100) DEFAULT NULL,
  `member_remarks` varchar(200) DEFAULT NULL,
  `policy_no` varchar(100) DEFAULT '',
  `policy_holder` varchar(100) DEFAULT '',
  `policy_issue_date` varchar(100) DEFAULT NULL,
  `policy_declare_date` varchar(100) DEFAULT NULL,
  `policy_effective_date` varchar(100) DEFAULT NULL,
  `policy_expiry_date` varchar(100) DEFAULT NULL,
  `policy_lapse_date` varchar(100) DEFAULT NULL,
  `policy_revival_date` varchar(100) DEFAULT NULL,
  `policy_termination_date` varchar(100) DEFAULT NULL,
  `policy_suspend_date` varchar(100) DEFAULT NULL,
  `policy_unsuspend_date` varchar(100) DEFAULT NULL,
  `policy_renewal_date` varchar(100) DEFAULT NULL,
  `enrollment_date` varchar(100) DEFAULT NULL,
  `policy_status` varchar(100) DEFAULT NULL,
  `policy_status_02` varchar(255) DEFAULT NULL,
  `program` varchar(100) DEFAULT NULL,
  `plan` varchar(100) DEFAULT NULL,
  `plan_external` varchar(100) DEFAULT '',
  `plan_attach_date` varchar(100) DEFAULT NULL,
  `plan_expiry_date` varchar(100) DEFAULT NULL,
  `rider` varchar(100) DEFAULT NULL,
  `rider_attach_date` varchar(100) DEFAULT NULL,
  `rider_expiry_date` varchar(100) DEFAULT NULL,
  `resign_date` varchar(100) DEFAULT NULL,
  `start_date` varchar(100) DEFAULT NULL,
  `special_condition` varchar(3000) DEFAULT '',
  `exclusion` varchar(900) DEFAULT '',
  `bank` varchar(100) DEFAULT '',
  `location` varchar(100) DEFAULT '',
  `account_no` varchar(100) DEFAULT '',
  `on_behalf_of` varchar(100) DEFAULT '',
  `medisclick_activation` varchar(100) DEFAULT '0',
  `member_username` varchar(100) DEFAULT NULL,
  `member_name_encrypt` varchar(100) DEFAULT NULL,
  `member_dob_encrypt` varchar(100) DEFAULT NULL,
  `member_phone_encrypt` varchar(100) DEFAULT NULL,
  `flag_login_medisclick` varchar(100) DEFAULT '0',
  `member_device` varchar(100) DEFAULT NULL,
  `member_os` varchar(100) DEFAULT NULL,
  `member_app` varchar(100) DEFAULT NULL,
  `member_serial` varchar(200) DEFAULT NULL,
  `member_regid` varchar(255) DEFAULT NULL,
  `id_type` varchar(100) DEFAULT NULL,
  `id_number` varchar(100) DEFAULT NULL,
  `id_name` varchar(100) DEFAULT NULL,
  `id_dob` varchar(100) DEFAULT NULL,
  `id_nationality` varchar(100) DEFAULT NULL,
  `rsa_item_no` varchar(100) DEFAULT NULL,
  `rsa_limit_currency` varchar(100) DEFAULT NULL,
  `rsa_vehicle_brand` varchar(100) DEFAULT NULL,
  `rsa_vehicle_model` varchar(100) DEFAULT NULL,
  `rsa_vehicle_machine` varchar(100) DEFAULT NULL,
  `rsa_vehicle_police_no` varchar(100) DEFAULT NULL,
  `rsa_vehicle_chassis_no` varchar(100) DEFAULT NULL,
  `edited_by` varchar(100) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `created_by` varchar(100) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `member_ref` varchar(100) DEFAULT NULL,
  `enrollment_type` int(11) DEFAULT 0,
  PRIMARY KEY (`id`),
  KEY `memberIndex` (`client`,`policy_no`,`plan`,`policy_expiry_date`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=10737172 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for mobile_ads
-- ----------------------------
DROP TABLE IF EXISTS `mobile_ads`;
CREATE TABLE `mobile_ads` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `title` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `content` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `link` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT 0,
  `created_by` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for mobile_version
-- ----------------------------
DROP TABLE IF EXISTS `mobile_version`;
CREATE TABLE `mobile_version` (
  `id` int(255) NOT NULL AUTO_INCREMENT,
  `version` varchar(10) CHARACTER SET latin1 DEFAULT NULL,
  `link1` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `link2` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `description` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `created_by` varchar(255) CHARACTER SET latin1 DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for monitoring_diagnose
-- ----------------------------
DROP TABLE IF EXISTS `monitoring_diagnose`;
CREATE TABLE `monitoring_diagnose` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `date_first_appeared` datetime DEFAULT NULL,
  `etiology` varchar(255) DEFAULT NULL,
  `received_by` varchar(255) DEFAULT NULL,
  `received_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=139 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for monitoring_diagnose_01
-- ----------------------------
DROP TABLE IF EXISTS `monitoring_diagnose_01`;
CREATE TABLE `monitoring_diagnose_01` (
  `case` int(11) DEFAULT NULL,
  `dg_id` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `diagnosis` varchar(255) DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `keluhan` varchar(255) DEFAULT NULL,
  `attachment` text DEFAULT NULL,
  `remarks` text DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for monitoring_patient_condition
-- ----------------------------
DROP TABLE IF EXISTS `monitoring_patient_condition`;
CREATE TABLE `monitoring_patient_condition` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime DEFAULT NULL,
  `upload_document` text DEFAULT NULL,
  `anamnesa` varchar(255) DEFAULT NULL,
  `temp` varchar(255) DEFAULT NULL,
  `reason_admission` varchar(255) DEFAULT NULL,
  `idp` varchar(255) DEFAULT NULL,
  `procedure` varchar(255) DEFAULT NULL,
  `los` varchar(255) DEFAULT NULL,
  `reason_not_able` varchar(255) DEFAULT NULL,
  `interim_bill` varchar(255) DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `edited_by` varchar(255) DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11218 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for monitoring_patient_condition_01
-- ----------------------------
DROP TABLE IF EXISTS `monitoring_patient_condition_01`;
CREATE TABLE `monitoring_patient_condition_01` (
  `case` int(11) DEFAULT NULL,
  `mp_id` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `date` datetime DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `diagnose` varchar(255) DEFAULT NULL,
  `doctor` varchar(255) DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `edited_by` varchar(255) DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for monitoring_room
-- ----------------------------
DROP TABLE IF EXISTS `monitoring_room`;
CREATE TABLE `monitoring_room` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `current_room_type` int(11) DEFAULT NULL,
  `current_start_date` datetime DEFAULT NULL,
  `current_end_date` datetime DEFAULT NULL,
  `current_price` decimal(10,0) DEFAULT NULL,
  `change_room_type` int(11) DEFAULT NULL,
  `change_start_date` datetime DEFAULT NULL,
  `change_end_date` datetime DEFAULT NULL,
  `change_price` decimal(10,0) DEFAULT NULL,
  `remarks_type` varchar(255) DEFAULT '',
  `upload_document` text DEFAULT NULL,
  `notes` text DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  `edited_by` varchar(255) DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=35 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for monitoring_treatment
-- ----------------------------
DROP TABLE IF EXISTS `monitoring_treatment`;
CREATE TABLE `monitoring_treatment` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `date_procedure` datetime DEFAULT NULL,
  `type_procedure` int(11) DEFAULT NULL,
  `diagnosis` varchar(255) DEFAULT NULL,
  `upload_document` text DEFAULT NULL,
  `indication` text DEFAULT NULL,
  `received_by` varchar(255) DEFAULT NULL,
  `received_date` datetime DEFAULT NULL,
  `edited_by` varchar(255) DEFAULT NULL,
  `edited_date` datetime DEFAULT NULL,
  `email_automation` int(11) DEFAULT NULL,
  `email_provider` varchar(255) DEFAULT NULL,
  `sms_automation` int(11) DEFAULT NULL,
  `sms_provider` varchar(255) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `remarks` varchar(255) DEFAULT NULL,
  `approved_by` varchar(255) DEFAULT NULL,
  `approved_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=121 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for monitoring_treatment_email
-- ----------------------------
DROP TABLE IF EXISTS `monitoring_treatment_email`;
CREATE TABLE `monitoring_treatment_email` (
  `case` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `email_to` varchar(255) DEFAULT NULL,
  `email_cc` varchar(255) DEFAULT NULL,
  `upload_claim_form` text DEFAULT NULL,
  `upload_others` text DEFAULT NULL,
  `patient_name` varchar(255) DEFAULT NULL,
  `remarks` text DEFAULT NULL,
  `created_by` varchar(255) DEFAULT NULL,
  `created_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for news_info
-- ----------------------------
DROP TABLE IF EXISTS `news_info`;
CREATE TABLE `news_info` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `title` varchar(100) NOT NULL,
  `brief_content` varchar(200) NOT NULL,
  `full_content` text NOT NULL,
  `image` varchar(110) NOT NULL,
  `draft` tinyint(1) NOT NULL,
  `status` varchar(50) NOT NULL,
  `created_at` bigint(20) NOT NULL,
  `last_update` bigint(20) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 ROW_FORMAT=COMPACT;

-- ----------------------------
-- Table structure for nonlog_reason
-- ----------------------------
DROP TABLE IF EXISTS `nonlog_reason`;
CREATE TABLE `nonlog_reason` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for notifikasi_email_log_sunlife
-- ----------------------------
DROP TABLE IF EXISTS `notifikasi_email_log_sunlife`;
CREATE TABLE `notifikasi_email_log_sunlife` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `case_id` bigint(20) NOT NULL,
  `email_status` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for numbers_split
-- ----------------------------
DROP TABLE IF EXISTS `numbers_split`;
CREATE TABLE `numbers_split` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `n` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=50770 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for patient_detail_balance_01
-- ----------------------------
DROP TABLE IF EXISTS `patient_detail_balance_01`;
CREATE TABLE `patient_detail_balance_01` (
  `patient` int(11) NOT NULL,
  `detail` int(11) NOT NULL,
  `name` varchar(800) DEFAULT '',
  `day` decimal(20,2) DEFAULT NULL,
  `cover` decimal(20,2) DEFAULT NULL,
  PRIMARY KEY (`patient`,`detail`),
  KEY `pdetail_balance_idx2` (`name`) USING BTREE,
  KEY `pdetail_balance_idx1` (`detail`),
  KEY `pdetail_balance_idx` (`patient`,`detail`,`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for patient_header_balance_01
-- ----------------------------
DROP TABLE IF EXISTS `patient_header_balance_01`;
CREATE TABLE `patient_header_balance_01` (
  `patient` int(11) NOT NULL,
  `header` int(11) NOT NULL,
  `name` varchar(300) DEFAULT '',
  `cover` decimal(20,2) DEFAULT NULL,
  `deductible` decimal(20,2) DEFAULT NULL,
  PRIMARY KEY (`patient`,`header`),
  KEY `index_pHeader_balance` (`patient`,`header`,`name`) USING BTREE,
  KEY `index_pHeader_balance1` (`header`),
  KEY `index_pHeader_balance2` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for perawatan
-- ----------------------------
DROP TABLE IF EXISTS `perawatan`;
CREATE TABLE `perawatan` (
  `client` int(11) DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `perawatanSort01` (`client`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=78 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for plan
-- ----------------------------
DROP TABLE IF EXISTS `plan`;
CREATE TABLE `plan` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT '',
  `limit` int(11) DEFAULT NULL,
  `service` int(11) DEFAULT NULL,
  `coverage_region` int(11) DEFAULT NULL,
  `plan_header_link` varchar(50) DEFAULT '',
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `remarks` varchar(100) DEFAULT '',
  `fullcover` int(11) DEFAULT 0,
  `dline` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `planIndex` (`client`,`program`,`coverage_region`) USING BTREE,
  KEY `planIndex2` (`limit`),
  KEY `planIndex3` (`program`),
  KEY `planIndex4` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=4267 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for plan_aceg
-- ----------------------------
DROP TABLE IF EXISTS `plan_aceg`;
CREATE TABLE `plan_aceg` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `policy_no` varchar(50) DEFAULT NULL,
  `company_name` varchar(255) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `max_day_rate` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3549 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for plan_aia
-- ----------------------------
DROP TABLE IF EXISTS `plan_aia`;
CREATE TABLE `plan_aia` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `id` int(11) DEFAULT NULL,
  `name` varchar(50) DEFAULT '',
  `limit` int(11) DEFAULT NULL,
  `service` int(11) DEFAULT NULL,
  `remarks` varchar(50) NOT NULL DEFAULT '',
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`remarks`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for plan_astraaviva
-- ----------------------------
DROP TABLE IF EXISTS `plan_astraaviva`;
CREATE TABLE `plan_astraaviva` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan_id` int(11) DEFAULT NULL,
  `name` varchar(75) DEFAULT NULL,
  `remarks` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for plan_detail
-- ----------------------------
DROP TABLE IF EXISTS `plan_detail`;
CREATE TABLE `plan_detail` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(50) DEFAULT '',
  `code_hospital_portal` varchar(50) DEFAULT NULL,
  `name` varchar(300) DEFAULT '',
  `max_day_per_year` decimal(20,2) DEFAULT NULL,
  `max_per_day` decimal(20,2) DEFAULT NULL,
  `max_day_rate` decimal(20,2) DEFAULT NULL,
  `per_day_limit` decimal(20,2) DEFAULT NULL,
  `per_case_limit` decimal(20,2) DEFAULT NULL,
  `per_group_limit` decimal(20,2) DEFAULT NULL,
  `annual_limit` decimal(20,2) DEFAULT NULL,
  `cash_benefit_availability` int(11) DEFAULT NULL,
  `loa_desc` varchar(50) DEFAULT NULL,
  `ref_detail` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT 0,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `planSort3` (`program`),
  KEY `planSort5` (`plan`),
  KEY `planSort` (`header`) USING BTREE,
  KEY `planSort7` (`client`),
  KEY `planSort2` (`name`),
  KEY `planSort4` (`name`,`plan`) USING BTREE,
  KEY `planSort6` (`header`,`plan`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=105744 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for plan_detail_copy
-- ----------------------------
DROP TABLE IF EXISTS `plan_detail_copy`;
CREATE TABLE `plan_detail_copy` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(50) DEFAULT '',
  `code_hospital_portal` varchar(50) DEFAULT NULL,
  `name` varchar(300) DEFAULT '',
  `max_day_per_year` decimal(20,2) DEFAULT NULL,
  `max_per_day` decimal(20,2) DEFAULT NULL,
  `max_day_rate` decimal(20,2) DEFAULT NULL,
  `per_day_limit` decimal(20,2) DEFAULT NULL,
  `per_case_limit` decimal(20,2) DEFAULT NULL,
  `per_group_limit` decimal(20,2) DEFAULT NULL,
  `annual_limit` decimal(20,2) DEFAULT NULL,
  `cash_benefit_availability` int(11) DEFAULT NULL,
  `loa_desc` varchar(50) DEFAULT NULL,
  `ref_detail` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT 0,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `planSort3` (`program`),
  KEY `planSort5` (`plan`),
  KEY `planSort` (`header`) USING BTREE,
  KEY `planSort7` (`client`),
  KEY `planSort2` (`name`),
  KEY `planSort4` (`name`,`plan`) USING BTREE,
  KEY `planSort6` (`header`,`plan`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=65174 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for plan_header
-- ----------------------------
DROP TABLE IF EXISTS `plan_header`;
CREATE TABLE `plan_header` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) DEFAULT '',
  `effective_date` date DEFAULT NULL,
  `expiry_date` date DEFAULT NULL,
  `annual_limit` decimal(20,2) DEFAULT NULL,
  `deductible_per_year` decimal(20,2) DEFAULT NULL,
  `deductible_per_group` decimal(20,2) DEFAULT NULL,
  `copayment` decimal(20,2) DEFAULT NULL,
  `copayment_01` int(11) DEFAULT NULL,
  `plan_detail_link` varchar(50) DEFAULT '',
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `flag_limit_benefit` int(11) DEFAULT NULL,
  `flag_sesuai_tgh` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `phIndex` (`plan`,`program`,`client`) USING BTREE,
  KEY `phIndex2` (`program`),
  KEY `phIndex3` (`client`),
  KEY `phIndex4` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=6845 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for plan_header_copy1
-- ----------------------------
DROP TABLE IF EXISTS `plan_header_copy1`;
CREATE TABLE `plan_header_copy1` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(150) DEFAULT '',
  `effective_date` date DEFAULT NULL,
  `expiry_date` date DEFAULT NULL,
  `annual_limit` decimal(20,2) DEFAULT NULL,
  `deductible_per_year` decimal(20,2) DEFAULT NULL,
  `deductible_per_group` decimal(20,2) DEFAULT NULL,
  `copayment` decimal(20,2) DEFAULT NULL,
  `copayment_01` int(11) DEFAULT NULL,
  `plan_detail_link` varchar(50) DEFAULT '',
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `flag_limit_benefit` int(11) DEFAULT NULL,
  `flag_sesuai_tgh` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `phIndex` (`plan`,`program`,`client`) USING BTREE,
  KEY `phIndex2` (`program`),
  KEY `phIndex3` (`client`),
  KEY `phIndex4` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=6645 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for plan_limit
-- ----------------------------
DROP TABLE IF EXISTS `plan_limit`;
CREATE TABLE `plan_limit` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for plan_service
-- ----------------------------
DROP TABLE IF EXISTS `plan_service`;
CREATE TABLE `plan_service` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for plan_sunlife
-- ----------------------------
DROP TABLE IF EXISTS `plan_sunlife`;
CREATE TABLE `plan_sunlife` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan_id` int(11) DEFAULT NULL,
  `name` varchar(75) DEFAULT NULL,
  `remarks` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=384 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for plan_tmli
-- ----------------------------
DROP TABLE IF EXISTS `plan_tmli`;
CREATE TABLE `plan_tmli` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan_id` int(11) DEFAULT NULL,
  `name` varchar(255) DEFAULT '',
  `code` varchar(50) DEFAULT NULL,
  `product_client` varchar(50) DEFAULT '',
  `plan_client` varchar(50) DEFAULT '',
  PRIMARY KEY (`id`),
  KEY `tmli_plan_idx` (`client`,`program`,`plan_id`,`code`)
) ENGINE=InnoDB AUTO_INCREMENT=1408 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for position
-- ----------------------------
DROP TABLE IF EXISTS `position`;
CREATE TABLE `position` (
  `client` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `code` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=142 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for pre_admission
-- ----------------------------
DROP TABLE IF EXISTS `pre_admission`;
CREATE TABLE `pre_admission` (
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `source` int(11) DEFAULT NULL,
  `category` int(11) NOT NULL,
  `type` int(11) NOT NULL,
  `ref` varchar(50) DEFAULT '',
  `patient` int(11) NOT NULL,
  `dob` datetime DEFAULT NULL,
  `gender` int(11) DEFAULT NULL,
  `member_id` varchar(50) DEFAULT '',
  `member_card` varchar(100) DEFAULT '',
  `principle` int(11) DEFAULT NULL,
  `relation` int(11) DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `branch` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `policy_status` int(11) DEFAULT NULL,
  `policy_no` varchar(50) DEFAULT '',
  `policy_holder` varchar(75) DEFAULT NULL,
  `policy_effective_date` datetime DEFAULT NULL,
  `policy_expiry_date` datetime DEFAULT NULL,
  `policy_issue_date` datetime DEFAULT NULL,
  `policy_declare_date` datetime DEFAULT NULL,
  `policy_lapse_date` datetime DEFAULT NULL,
  `policy_revival_date` datetime DEFAULT NULL,
  `policy_termination_date` datetime DEFAULT NULL,
  `special_condition` varchar(300) DEFAULT '',
  `exclusion` varchar(300) DEFAULT '',
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_attach_date` datetime DEFAULT NULL,
  `plan_expiry_date` datetime DEFAULT NULL,
  `rider` int(11) DEFAULT NULL,
  `rider_attach_date` datetime DEFAULT NULL,
  `rider_expiry_date` datetime DEFAULT NULL,
  `provider` int(11) NOT NULL,
  `provider_status` int(11) DEFAULT NULL,
  `is_panel` int(11) DEFAULT NULL,
  `is_service_provided` int(11) DEFAULT NULL,
  `other_provider` varchar(75) DEFAULT '',
  `admission_date` date NOT NULL,
  `admission_hour` varchar(2) DEFAULT '',
  `admission_minute` varchar(2) DEFAULT '',
  `currency_01` int(11) DEFAULT NULL,
  `currency_02` int(11) DEFAULT NULL,
  `currency_rate` decimal(20,15) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `cancel_reason` int(11) DEFAULT NULL,
  `case_link` varchar(50) DEFAULT '',
  `appended` int(11) DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `userlevel` int(11) DEFAULT NULL,
  PRIMARY KEY (`category`,`type`,`patient`,`provider`,`admission_date`),
  KEY `adIndex` (`category`,`patient`,`member_id`,`principle`,`plan`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for pre_analysis_02
-- ----------------------------
DROP TABLE IF EXISTS `pre_analysis_02`;
CREATE TABLE `pre_analysis_02` (
  `case` int(11) DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `admission_date` datetime DEFAULT NULL,
  `id` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `ws_option` int(11) DEFAULT NULL,
  `max_per_day` decimal(20,2) DEFAULT NULL,
  `max_day_per_year` decimal(20,2) DEFAULT NULL,
  `max_day_rate` decimal(20,2) DEFAULT NULL,
  `inner_limit` decimal(20,2) DEFAULT NULL,
  `day` decimal(20,2) DEFAULT NULL,
  `day_rate` decimal(20,2) DEFAULT NULL,
  `case_rate` decimal(20,2) DEFAULT NULL,
  `actual` decimal(20,2) DEFAULT NULL,
  `tolerance` decimal(20,2) DEFAULT NULL,
  `non_prorate` decimal(20,2) DEFAULT NULL,
  `prorate` decimal(20,2) DEFAULT NULL,
  `prorate_percent` decimal(20,15) DEFAULT NULL,
  `prorate_result` decimal(20,2) DEFAULT NULL,
  `exclusion` decimal(20,2) DEFAULT NULL,
  `remaining_deductible` decimal(20,2) DEFAULT NULL,
  `copayment` decimal(20,2) DEFAULT NULL,
  `copayment_01` int(11) DEFAULT NULL,
  `per_day_limit` decimal(20,2) DEFAULT NULL,
  `per_day_limit_balance` decimal(20,2) DEFAULT NULL,
  `per_case_limit` decimal(20,2) DEFAULT NULL,
  `remaining_day` decimal(20,2) DEFAULT NULL,
  `remaining_inner_limit` decimal(20,2) DEFAULT NULL,
  `remaining_annual_limit` decimal(20,2) DEFAULT NULL,
  `using_float_fund` int(11) DEFAULT NULL,
  `remaining_float_fund` decimal(20,2) DEFAULT NULL,
  `cash_benefit_availability` int(11) DEFAULT NULL,
  `pre_analysis_id` int(11) NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`pre_analysis_id`),
  KEY `pre_analyst_02Sort` (`case`,`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5919318 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for pre_worksheet
-- ----------------------------
DROP TABLE IF EXISTS `pre_worksheet`;
CREATE TABLE `pre_worksheet` (
  `case` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `code_rawat` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `general` int(11) DEFAULT NULL,
  `amount` decimal(10,0) DEFAULT 0,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `patient` int(11) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `ref` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `pre_worksheet_index` (`case`,`patient`,`header`,`detail`,`plan`,`program`,`code_rawat`,`principle`) USING BTREE,
  KEY `pre_worksheet_index2` (`case`,`detail`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1004138 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for pre_worksheet_02
-- ----------------------------
DROP TABLE IF EXISTS `pre_worksheet_02`;
CREATE TABLE `pre_worksheet_02` (
  `case` int(11) DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `code_rawat` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `general` int(11) DEFAULT NULL,
  `amount` decimal(10,0) DEFAULT 0,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `patient` int(11) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `pre_worksheet_index` (`case`,`plan`,`header`,`detail`,`patient`,`principle`,`program`) USING BTREE,
  KEY `pre_worksheet02Sort1` (`case`,`detail`)
) ENGINE=InnoDB AUTO_INCREMENT=423477 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for pre_worksheet_edc
-- ----------------------------
DROP TABLE IF EXISTS `pre_worksheet_edc`;
CREATE TABLE `pre_worksheet_edc` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `case` int(11) DEFAULT NULL,
  `ref` varchar(100) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `code_edc` int(11) DEFAULT NULL,
  `general_edc` int(11) DEFAULT NULL,
  `code_benefit` int(11) DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `plan_detail_benefit` varchar(255) DEFAULT NULL,
  `name_benefit` varchar(255) DEFAULT NULL,
  `day` int(11) DEFAULT NULL,
  `amount` decimal(65,2) DEFAULT 0.00,
  PRIMARY KEY (`id`),
  KEY `pre_worksheet_index` (`case`,`plan`,`header`,`code_edc`,`detail`,`patient`,`principle`,`program`),
  KEY `pre_worksheet_index2` (`case`,`detail`)
) ENGINE=InnoDB AUTO_INCREMENT=383758 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for pre_worksheet_edc_02
-- ----------------------------
DROP TABLE IF EXISTS `pre_worksheet_edc_02`;
CREATE TABLE `pre_worksheet_edc_02` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `client` int(11) DEFAULT NULL,
  `case` int(11) DEFAULT NULL,
  `ref` varchar(100) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `code_edc` int(11) DEFAULT NULL,
  `general_edc` int(11) DEFAULT NULL,
  `code_benefit` int(11) DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `plan_detail_benefit` varchar(255) DEFAULT NULL,
  `name_benefit` varchar(255) DEFAULT NULL,
  `day` int(11) DEFAULT NULL,
  `amount` decimal(65,2) DEFAULT 0.00,
  PRIMARY KEY (`id`),
  KEY `pre_worksheet_index` (`case`,`plan`,`header`,`code_edc`,`detail`,`patient`,`principle`,`program`),
  KEY `pre_worksheet_edc02_index2` (`case`,`detail`)
) ENGINE=InnoDB AUTO_INCREMENT=74492 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for principle_detail_balance_01
-- ----------------------------
DROP TABLE IF EXISTS `principle_detail_balance_01`;
CREATE TABLE `principle_detail_balance_01` (
  `principle` int(11) NOT NULL,
  `detail` int(11) DEFAULT NULL,
  `name` varchar(255) NOT NULL DEFAULT '',
  `day` decimal(20,2) DEFAULT NULL,
  `cover` decimal(20,2) DEFAULT NULL,
  PRIMARY KEY (`principle`,`name`),
  KEY `index_principle_detail1` (`detail`),
  KEY `index_principle_detail3` (`name`),
  KEY `index_principle_detail2` (`principle`,`detail`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for principle_header_balance_01
-- ----------------------------
DROP TABLE IF EXISTS `principle_header_balance_01`;
CREATE TABLE `principle_header_balance_01` (
  `principle` int(11) NOT NULL,
  `header` int(11) DEFAULT NULL,
  `name` varchar(255) NOT NULL DEFAULT '',
  `cover` decimal(20,2) DEFAULT NULL,
  `deductible` decimal(20,2) DEFAULT NULL,
  PRIMARY KEY (`principle`,`name`),
  KEY `index_principle_header1` (`header`),
  KEY `index_principle_header` (`principle`,`header`),
  KEY `index_principle` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for program
-- ----------------------------
DROP TABLE IF EXISTS `program`;
CREATE TABLE `program` (
  `client` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(75) DEFAULT '',
  `effective_date` date DEFAULT NULL,
  `expiry_date` date DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `service` varchar(50) DEFAULT '',
  `using_float_fund` int(11) DEFAULT NULL,
  `remaining_float_fund` decimal(20,2) DEFAULT NULL,
  `provider` varchar(10500) DEFAULT '',
  `provider_01` varchar(10500) DEFAULT '',
  `currency` int(11) DEFAULT NULL,
  `claim_paid_by` int(11) DEFAULT NULL,
  `close_case_option` int(11) DEFAULT NULL,
  `doc_send_back_required` int(11) DEFAULT NULL,
  `membership_fee` decimal(20,2) DEFAULT NULL,
  `case_fee` decimal(20,2) DEFAULT NULL,
  `basic_float_fund` decimal(20,2) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  `chashless_availability` varchar(20) DEFAULT NULL,
  `reimbursement_availability` varchar(20) DEFAULT NULL,
  `dline` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `programSort` (`client`,`name`) USING BTREE,
  KEY `programSort1` (`client`),
  KEY `programSort2` (`status`)
) ENGINE=InnoDB AUTO_INCREMENT=117 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for provider_code_client
-- ----------------------------
DROP TABLE IF EXISTS `provider_code_client`;
CREATE TABLE `provider_code_client` (
  `client` varchar(255) NOT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `code` varchar(255) DEFAULT NULL,
  `provider_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  KEY `provcodeSort1` (`client`),
  KEY `provcodeSort2` (`code`),
  KEY `provcodeSort3` (`provider_id`)
) ENGINE=InnoDB AUTO_INCREMENT=750 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for provider_type
-- ----------------------------
DROP TABLE IF EXISTS `provider_type`;
CREATE TABLE `provider_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for province
-- ----------------------------
DROP TABLE IF EXISTS `province`;
CREATE TABLE `province` (
  `country` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `id_region` varchar(10) DEFAULT NULL,
  `id_province` varchar(10) DEFAULT NULL,
  `name` varchar(100) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for r_create_case
-- ----------------------------
DROP TABLE IF EXISTS `r_create_case`;
CREATE TABLE `r_create_case` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `status` int(11) NOT NULL DEFAULT 0,
  `created_by` varchar(255) DEFAULT NULL,
  `receive_date` datetime DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `admission_date` date DEFAULT NULL,
  `admission_time` varchar(255) DEFAULT NULL,
  `discharge_date` datetime DEFAULT NULL,
  `discharge_doctor` varchar(255) DEFAULT NULL,
  `diagnosis` varchar(255) DEFAULT NULL,
  `bill_no` varchar(255) DEFAULT NULL,
  `bill_issue_date` date DEFAULT NULL,
  `bill_due_date` date DEFAULT NULL,
  `id_provider` int(11) DEFAULT NULL,
  `provider_error_remarks` varchar(255) DEFAULT NULL,
  `provider` varchar(255) DEFAULT NULL,
  `other_provider` varchar(255) DEFAULT NULL,
  `other_provider_city` varchar(255) DEFAULT NULL,
  `other_provider_country` int(11) DEFAULT NULL,
  `policy_no` varchar(255) DEFAULT NULL,
  `dob` date DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `company` int(11) DEFAULT NULL,
  `branch` int(11) DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `patient_error_remarks` varchar(255) DEFAULT NULL,
  `member_id` varchar(255) DEFAULT NULL,
  `member_card` varchar(255) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `gender` int(11) DEFAULT NULL,
  `relation` int(11) DEFAULT NULL,
  `policy_status` int(11) DEFAULT NULL,
  `policy_holder` varchar(255) DEFAULT NULL,
  `policy_effective_date` date DEFAULT NULL,
  `policy_expiry_date` date DEFAULT NULL,
  `policy_issue_date` date DEFAULT NULL,
  `policy_declare_date` date DEFAULT NULL,
  `policy_lapse_date` date DEFAULT NULL,
  `policy_revival_date` date DEFAULT NULL,
  `policy_termination_date` date DEFAULT NULL,
  `policy_suspend_date` date DEFAULT NULL,
  `policy_unsuspend_date` date DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `plan_attach_date` date DEFAULT NULL,
  `plan_expiry_date` date DEFAULT NULL,
  `rider` int(11) DEFAULT NULL,
  `rider_attach_date` date DEFAULT NULL,
  `rider_expiry_date` date DEFAULT NULL,
  `special_condition` text DEFAULT NULL,
  `exclusion` text DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `edit_date` datetime DEFAULT NULL,
  `ref` varchar(255) DEFAULT NULL,
  `batch_received` varchar(255) DEFAULT NULL,
  `amount_currency_01` decimal(20,2) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=65418 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for reference_cases
-- ----------------------------
DROP TABLE IF EXISTS `reference_cases`;
CREATE TABLE `reference_cases` (
  `client` int(255) DEFAULT NULL,
  `id` int(255) DEFAULT NULL,
  `category` int(255) DEFAULT NULL,
  `type` int(255) DEFAULT NULL,
  `patient` bigint(255) DEFAULT NULL,
  `provider` bigint(255) DEFAULT NULL,
  `other_provider` bigint(255) DEFAULT NULL,
  `admission_date` varchar(255) DEFAULT NULL,
  `discharge_date` varchar(255) DEFAULT NULL,
  `diagnosis` varchar(255) DEFAULT NULL,
  `other_diagnosis` varchar(255) DEFAULT NULL,
  `total_actual` bigint(255) DEFAULT NULL,
  `total_cover` bigint(255) DEFAULT NULL,
  `total_excess` bigint(255) DEFAULT NULL,
  `total_cash_benefit` bigint(255) DEFAULT NULL,
  `total_deductible` bigint(20) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `remarks` varchar(255) DEFAULT NULL,
  `final_decision` varchar(255) DEFAULT NULL,
  `member_remarks` varchar(255) DEFAULT NULL,
  KEY `patient` (`patient`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for reference_plan_header_n
-- ----------------------------
DROP TABLE IF EXISTS `reference_plan_header_n`;
CREATE TABLE `reference_plan_header_n` (
  `member` int(255) DEFAULT NULL,
  `plan` int(255) DEFAULT NULL,
  `header` int(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `annual_limit` float DEFAULT NULL,
  `additional_annual_limit` float DEFAULT NULL,
  `utilized_annual_limit` float DEFAULT NULL,
  `remaining_annual_limit` float DEFAULT NULL,
  `deductible_per_year` float DEFAULT NULL,
  `utilized_deductible_per_year` float DEFAULT NULL,
  `remaining_deductible_per_year` float DEFAULT NULL,
  KEY `member` (`member`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for region
-- ----------------------------
DROP TABLE IF EXISTS `region`;
CREATE TABLE `region` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `id_region` varchar(10) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for reimbursement
-- ----------------------------
DROP TABLE IF EXISTS `reimbursement`;
CREATE TABLE `reimbursement` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `source` int(11) DEFAULT NULL,
  `category` int(11) DEFAULT NULL,
  `type` int(11) DEFAULT NULL,
  `case` int(11) DEFAULT NULL,
  `ref` varchar(50) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `policy_no` varchar(50) DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `patient` int(11) DEFAULT NULL,
  `provider` int(11) DEFAULT NULL,
  `other_provider` varchar(75) DEFAULT NULL,
  `admission_date` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `discharge_date` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `bill_no` varchar(50) DEFAULT NULL,
  `bill_issue_date` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `bill_due_date` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `currency` int(11) DEFAULT NULL,
  `total_actual` decimal(20,2) DEFAULT NULL,
  `total_cover` decimal(20,2) DEFAULT NULL,
  `total_excess` decimal(20,2) DEFAULT NULL,
  `excess_remarks` varchar(250) DEFAULT NULL,
  `upload_01` varchar(250) DEFAULT NULL,
  `upload_02` varchar(250) DEFAULT NULL,
  `upload_03` varchar(250) DEFAULT NULL,
  `upload_04` varchar(250) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `status_remarks` varchar(250) DEFAULT NULL,
  `payment_date` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `created_by` varchar(50) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  `edited_by` varchar(50) DEFAULT NULL,
  `edit_date` datetime DEFAULT NULL ON UPDATE current_timestamp(),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for relation
-- ----------------------------
DROP TABLE IF EXISTS `relation`;
CREATE TABLE `relation` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT '',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for remarks_type
-- ----------------------------
DROP TABLE IF EXISTS `remarks_type`;
CREATE TABLE `remarks_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for rider
-- ----------------------------
DROP TABLE IF EXISTS `rider`;
CREATE TABLE `rider` (
  `client` int(11) DEFAULT NULL,
  `program` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) DEFAULT '',
  `additional_annual_limit` decimal(20,2) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `riderSort1` (`client`),
  KEY `riderSort2` (`program`),
  KEY `riderSort3` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for room_type
-- ----------------------------
DROP TABLE IF EXISTS `room_type`;
CREATE TABLE `room_type` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for status
-- ----------------------------
DROP TABLE IF EXISTS `status`;
CREATE TABLE `status` (
  `id` int(11) NOT NULL,
  `name` varchar(50) DEFAULT '',
  `choice` varchar(50) DEFAULT '',
  `gender` varchar(50) DEFAULT '',
  `polis` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for status_admission
-- ----------------------------
DROP TABLE IF EXISTS `status_admission`;
CREATE TABLE `status_admission` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(50) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Table structure for status_hospital
-- ----------------------------
DROP TABLE IF EXISTS `status_hospital`;
CREATE TABLE `status_hospital` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `status_finance` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=99 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for subcategory_email_notify
-- ----------------------------
DROP TABLE IF EXISTS `subcategory_email_notify`;
CREATE TABLE `subcategory_email_notify` (
  `category` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for T_a01
-- ----------------------------
DROP TABLE IF EXISTS `T_a01`;
CREATE TABLE `T_a01` (
  `full_name` varchar(255) DEFAULT NULL,
  `status` varchar(255) DEFAULT NULL,
  `id` int(255) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `category` varchar(255) DEFAULT NULL,
  `policy_no` varchar(155) DEFAULT NULL,
  `pateint` varchar(255) DEFAULT NULL,
  `gender` varchar(155) DEFAULT NULL,
  `principle` varchar(255) DEFAULT NULL,
  `relation` varchar(255) DEFAULT NULL,
  `ref` varchar(255) DEFAULT NULL,
  `benefit` varchar(255) DEFAULT NULL,
  `jenis_benefit` varchar(255) DEFAULT NULL,
  `policy_status` varchar(255) DEFAULT NULL,
  `program` varchar(255) DEFAULT NULL,
  `provider` varchar(255) DEFAULT NULL,
  `other_provider` varchar(255) DEFAULT NULL,
  `addmision_date` date DEFAULT NULL,
  `discharge_date` datetime DEFAULT NULL,
  `discharge_doctor` varchar(255) DEFAULT NULL,
  `diagnosis` varchar(255) DEFAULT NULL,
  `other_diagnosis` varchar(255) DEFAULT NULL,
  `payment_date` datetime DEFAULT NULL,
  `actual` float DEFAULT NULL,
  `cover` float DEFAULT NULL,
  `excess` float DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for temp_case_provider_fu
-- ----------------------------
DROP TABLE IF EXISTS `temp_case_provider_fu`;
CREATE TABLE `temp_case_provider_fu` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `case_id` int(11) DEFAULT NULL,
  `insert_date` datetime DEFAULT NULL,
  `case_status` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for upload
-- ----------------------------
DROP TABLE IF EXISTS `upload`;
CREATE TABLE `upload` (
  `client` varchar(255) DEFAULT NULL,
  `program` varchar(255) DEFAULT NULL,
  `plan` varchar(255) DEFAULT NULL,
  `plan_header` varchar(255) DEFAULT NULL,
  `plan_detail` varchar(255) DEFAULT NULL,
  `code_edc` varchar(255) DEFAULT NULL,
  `code_benefit` varchar(255) DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- ----------------------------
-- Table structure for userlevelpermissions
-- ----------------------------
DROP TABLE IF EXISTS `userlevelpermissions`;
CREATE TABLE `userlevelpermissions` (
  `userlevelid` int(11) NOT NULL,
  `tablename` varchar(255) NOT NULL DEFAULT '',
  `permission` int(11) DEFAULT NULL,
  PRIMARY KEY (`userlevelid`,`tablename`),
  KEY `userlevelPermissionSort1` (`permission`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for userlevelpermissions_hospital
-- ----------------------------
DROP TABLE IF EXISTS `userlevelpermissions_hospital`;
CREATE TABLE `userlevelpermissions_hospital` (
  `userlevelid` int(11) NOT NULL,
  `tablename` varchar(255) NOT NULL DEFAULT '',
  `permission` int(11) DEFAULT NULL,
  PRIMARY KEY (`userlevelid`,`tablename`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for userlevelpermissions_hospital_old
-- ----------------------------
DROP TABLE IF EXISTS `userlevelpermissions_hospital_old`;
CREATE TABLE `userlevelpermissions_hospital_old` (
  `userlevelid` int(11) NOT NULL,
  `tablename` varchar(255) NOT NULL DEFAULT '',
  `permission` int(11) DEFAULT NULL,
  PRIMARY KEY (`userlevelid`,`tablename`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for userlevelpermissions_old
-- ----------------------------
DROP TABLE IF EXISTS `userlevelpermissions_old`;
CREATE TABLE `userlevelpermissions_old` (
  `userlevelid` int(11) NOT NULL,
  `tablename` varchar(255) NOT NULL DEFAULT '',
  `permission` int(11) DEFAULT NULL,
  PRIMARY KEY (`userlevelid`,`tablename`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for userlevelpermissions_reimbursement
-- ----------------------------
DROP TABLE IF EXISTS `userlevelpermissions_reimbursement`;
CREATE TABLE `userlevelpermissions_reimbursement` (
  `userlevelid` int(11) NOT NULL,
  `tablename` varchar(255) NOT NULL DEFAULT '',
  `permission` int(11) DEFAULT NULL,
  PRIMARY KEY (`userlevelid`,`tablename`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for userlevels
-- ----------------------------
DROP TABLE IF EXISTS `userlevels`;
CREATE TABLE `userlevels` (
  `userlevelid` int(11) NOT NULL,
  `userlevelname` varchar(50) DEFAULT '',
  PRIMARY KEY (`userlevelid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for userlevels_hospital
-- ----------------------------
DROP TABLE IF EXISTS `userlevels_hospital`;
CREATE TABLE `userlevels_hospital` (
  `userlevelid` int(11) NOT NULL,
  `userlevelname` varchar(50) DEFAULT '',
  PRIMARY KEY (`userlevelid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for userlevels_old
-- ----------------------------
DROP TABLE IF EXISTS `userlevels_old`;
CREATE TABLE `userlevels_old` (
  `userlevelid` int(11) NOT NULL,
  `userlevelname` varchar(50) DEFAULT '',
  PRIMARY KEY (`userlevelid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for userlevels_reimbursement
-- ----------------------------
DROP TABLE IF EXISTS `userlevels_reimbursement`;
CREATE TABLE `userlevels_reimbursement` (
  `userlevelid` int(11) NOT NULL,
  `userlevelname` varchar(50) DEFAULT '',
  PRIMARY KEY (`userlevelid`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for users
-- ----------------------------
DROP TABLE IF EXISTS `users`;
CREATE TABLE `users` (
  `username` varchar(50) NOT NULL DEFAULT '',
  `full_name` varchar(75) DEFAULT '',
  `password` blob DEFAULT NULL,
  `userlevel` int(11) DEFAULT NULL,
  `email` varchar(75) DEFAULT '',
  `profile` text DEFAULT NULL,
  `client` int(11) DEFAULT NULL,
  `report_to` int(11) DEFAULT NULL,
  `issuance_limit` decimal(20,2) DEFAULT NULL,
  `signature` varchar(50) DEFAULT '',
  `status` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`username`),
  KEY `username_i` (`username`,`client`,`report_to`) USING BTREE,
  KEY `username_i2` (`client`),
  KEY `username_i3` (`report_to`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for users_hospital
-- ----------------------------
DROP TABLE IF EXISTS `users_hospital`;
CREATE TABLE `users_hospital` (
  `username` varchar(50) NOT NULL DEFAULT '',
  `full_name` varchar(75) DEFAULT '',
  `password` varchar(100) DEFAULT '',
  `userlevel` int(11) DEFAULT NULL,
  `email` varchar(75) DEFAULT '',
  `profile` text DEFAULT NULL,
  `report_to` int(11) DEFAULT NULL,
  `provider` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`username`),
  KEY `username_i` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for users_reimbursement
-- ----------------------------
DROP TABLE IF EXISTS `users_reimbursement`;
CREATE TABLE `users_reimbursement` (
  `real_name` varchar(75) DEFAULT '',
  `username` varchar(50) NOT NULL DEFAULT '',
  `dob` date DEFAULT NULL,
  `emailx` varchar(75) DEFAULT '',
  `mobile_phone` varchar(50) DEFAULT '',
  `password` varchar(50) DEFAULT '',
  `client` int(11) DEFAULT NULL,
  `principle` int(11) DEFAULT NULL,
  `patient` int(255) DEFAULT NULL,
  `userlevel` int(11) DEFAULT NULL,
  `profile` text DEFAULT NULL,
  `source` int(11) DEFAULT NULL,
  `status` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`username`),
  KEY `username_i` (`username`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for worksheet
-- ----------------------------
DROP TABLE IF EXISTS `worksheet`;
CREATE TABLE `worksheet` (
  `case` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `start_date` date DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `day` decimal(20,2) DEFAULT 1.00,
  `day_rate` decimal(20,2) DEFAULT 0.00,
  `actual` decimal(20,2) DEFAULT 0.00,
  `tolerance` decimal(20,2) DEFAULT 0.00,
  `non_prorate` decimal(20,2) DEFAULT 0.00,
  `prorate` decimal(20,2) DEFAULT 0.00,
  `prorate_percent` decimal(20,15) DEFAULT 0.000000000000000,
  `prorate_result` decimal(20,2) DEFAULT 0.00,
  `exclusion` decimal(20,2) DEFAULT 0.00,
  `remaining_deductible` decimal(20,2) DEFAULT 0.00,
  `copayment` decimal(20,2) DEFAULT 1.00,
  `per_day_limit` decimal(20,2) DEFAULT 0.00,
  `per_day_limit_balance` decimal(20,2) DEFAULT 0.00,
  `per_case_limit` decimal(20,2) DEFAULT 0.00,
  `remaining_day` decimal(20,2) DEFAULT 0.00,
  `remaining_inner_limit` decimal(20,2) DEFAULT 0.00,
  `remaining_annual_limit` decimal(20,2) DEFAULT 0.00,
  `using_float_fund` int(11) DEFAULT 0,
  `remaining_float_fund` decimal(20,2) DEFAULT 0.00,
  `cash_benefit_availability` int(11) DEFAULT 0,
  `cover` decimal(20,2) DEFAULT 0.00,
  `excess` decimal(20,2) DEFAULT 0.00,
  `deductible` decimal(20,2) DEFAULT 0.00,
  `cash_benefit` decimal(20,2) DEFAULT 0.00,
  `remarks` varchar(3000) DEFAULT '',
  `remarks_01` varchar(3000) DEFAULT '',
  `relocated_to` int(11) DEFAULT NULL,
  `tick` int(11) DEFAULT 0,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `wsSort6` (`header`) USING BTREE,
  KEY `wsSort7` (`detail`) USING BTREE,
  KEY `wsSort` (`plan`) USING BTREE,
  KEY `wsSort10` (`plan`,`header`,`detail`) USING BTREE,
  KEY `wsSort3` (`per_day_limit`,`relocated_to`,`tick`) USING BTREE,
  KEY `wsSort5` (`case`,`detail`) USING BTREE,
  KEY `wsSort8` (`relocated_to`,`tick`) USING BTREE,
  KEY `wsSort2` (`case`) USING BTREE,
  KEY `wsSort11` (`case`,`header`) USING BTREE,
  KEY `wsSort9` (`tick`,`case`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1059051 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- Table structure for worksheet_01
-- ----------------------------
DROP TABLE IF EXISTS `worksheet_01`;
CREATE TABLE `worksheet_01` (
  `case` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL,
  `start_date` date DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `day` decimal(20,2) DEFAULT NULL,
  `day_rate` decimal(20,2) DEFAULT NULL,
  `actual` decimal(20,2) DEFAULT NULL,
  `tolerance` decimal(20,2) DEFAULT NULL,
  `non_prorate` decimal(20,2) DEFAULT NULL,
  `prorate` decimal(20,2) DEFAULT NULL,
  `prorate_percent` decimal(20,15) DEFAULT NULL,
  `prorate_result` decimal(20,2) DEFAULT NULL,
  `exclusion` decimal(20,2) DEFAULT NULL,
  `remaining_deductible` decimal(20,2) DEFAULT NULL,
  `copayment` decimal(20,2) DEFAULT NULL,
  `per_day_limit` decimal(20,2) DEFAULT 0.00,
  `per_day_limit_balance` decimal(20,2) DEFAULT 0.00,
  `per_case_limit` decimal(20,2) DEFAULT 0.00,
  `remaining_day` decimal(20,2) DEFAULT NULL,
  `remaining_inner_limit` decimal(20,2) DEFAULT NULL,
  `remaining_annual_limit` decimal(20,2) DEFAULT NULL,
  `using_float_fund` int(11) DEFAULT NULL,
  `remaining_float_fund` decimal(20,2) DEFAULT NULL,
  `cash_benefit_availability` int(11) DEFAULT NULL,
  `cover` decimal(20,2) DEFAULT NULL,
  `excess` decimal(20,2) DEFAULT NULL,
  `deductible` decimal(20,2) DEFAULT NULL,
  `cash_benefit` decimal(20,2) DEFAULT NULL,
  `remarks` varchar(3000) DEFAULT '',
  `remarks_01` varchar(3000) DEFAULT '',
  `relocated_to` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `wsSort` (`case`,`plan`,`header`,`detail`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for worksheet_02
-- ----------------------------
DROP TABLE IF EXISTS `worksheet_02`;
CREATE TABLE `worksheet_02` (
  `case` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL,
  `start_date` date DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `day` decimal(20,2) DEFAULT NULL,
  `day_rate` decimal(20,2) DEFAULT NULL,
  `actual` decimal(20,2) DEFAULT NULL,
  `tolerance` decimal(20,2) DEFAULT NULL,
  `non_prorate` decimal(20,2) DEFAULT NULL,
  `prorate` decimal(20,2) DEFAULT NULL,
  `prorate_percent` decimal(20,15) DEFAULT NULL,
  `prorate_result` decimal(20,2) DEFAULT NULL,
  `exclusion` decimal(20,2) DEFAULT NULL,
  `remaining_deductible` decimal(20,2) DEFAULT NULL,
  `copayment` decimal(20,2) DEFAULT NULL,
  `per_day_limit` decimal(20,2) DEFAULT 0.00,
  `per_day_limit_balance` decimal(20,2) DEFAULT 0.00,
  `per_case_limit` decimal(20,2) DEFAULT 0.00,
  `remaining_day` decimal(20,2) DEFAULT NULL,
  `remaining_inner_limit` decimal(20,2) DEFAULT NULL,
  `remaining_annual_limit` decimal(20,2) DEFAULT NULL,
  `using_float_fund` int(11) DEFAULT NULL,
  `remaining_float_fund` decimal(20,2) DEFAULT NULL,
  `cash_benefit_availability` int(11) DEFAULT NULL,
  `cover` decimal(20,2) DEFAULT NULL,
  `excess` decimal(20,2) DEFAULT NULL,
  `deductible` decimal(20,2) DEFAULT NULL,
  `cash_benefit` decimal(20,2) DEFAULT NULL,
  `remarks` varchar(3000) DEFAULT '',
  `remarks_01` varchar(3000) DEFAULT '',
  `relocated_to` int(11) DEFAULT NULL,
  `approved` int(11) DEFAULT NULL,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `ws2Sort2` (`case`,`detail`,`header`,`plan`) USING BTREE,
  KEY `ws2Sort21` (`detail`),
  KEY `ws2Sort22` (`header`),
  KEY `ws2Sort23` (`plan`),
  KEY `ws2Sort24` (`relocated_to`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for worksheet_04
-- ----------------------------
DROP TABLE IF EXISTS `worksheet_04`;
CREATE TABLE `worksheet_04` (
  `case` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `start_date` date DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `day` decimal(20,2) DEFAULT 1.00,
  `day_rate` decimal(20,2) DEFAULT 0.00,
  `actual` decimal(20,2) DEFAULT 0.00,
  `tolerance` decimal(20,2) DEFAULT 0.00,
  `non_prorate` decimal(20,2) DEFAULT 0.00,
  `prorate` decimal(20,2) DEFAULT 0.00,
  `prorate_percent` decimal(20,15) DEFAULT 0.000000000000000,
  `prorate_result` decimal(20,2) DEFAULT 0.00,
  `exclusion` decimal(20,2) DEFAULT 0.00,
  `remaining_deductible` decimal(20,2) DEFAULT 0.00,
  `copayment` decimal(20,2) DEFAULT 1.00,
  `per_day_limit` decimal(20,2) DEFAULT 0.00,
  `per_day_limit_balance` decimal(20,2) DEFAULT 0.00,
  `per_case_limit` decimal(20,2) DEFAULT 0.00,
  `remaining_day` decimal(20,2) DEFAULT 0.00,
  `remaining_inner_limit` decimal(20,2) DEFAULT 0.00,
  `remaining_annual_limit` decimal(20,2) DEFAULT 0.00,
  `using_float_fund` int(11) DEFAULT 0,
  `remaining_float_fund` decimal(20,2) DEFAULT 0.00,
  `cash_benefit_availability` int(11) DEFAULT 0,
  `cover` decimal(20,2) DEFAULT 0.00,
  `excess` decimal(20,2) DEFAULT 0.00,
  `deductible` decimal(20,2) DEFAULT 0.00,
  `cash_benefit` decimal(20,2) DEFAULT 0.00,
  `remarks` varchar(3000) DEFAULT '',
  `remarks_01` varchar(3000) DEFAULT '',
  `relocated_to` int(11) DEFAULT NULL,
  `tick` int(11) DEFAULT 0,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `wsSort6` (`header`),
  KEY `wsSort7` (`detail`),
  KEY `wsSort` (`plan`) USING BTREE,
  KEY `wsSort10` (`plan`,`header`,`detail`) USING BTREE,
  KEY `wsSort3` (`per_day_limit`,`relocated_to`,`tick`) USING BTREE,
  KEY `wsSort5` (`case`,`detail`) USING BTREE,
  KEY `wsSort8` (`relocated_to`,`tick`) USING BTREE,
  KEY `wsSort2` (`case`),
  KEY `wsSort11` (`case`,`header`),
  KEY `wsSort9` (`tick`,`case`)
) ENGINE=InnoDB AUTO_INCREMENT=1055730 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for worksheet_balancer
-- ----------------------------
DROP TABLE IF EXISTS `worksheet_balancer`;
CREATE TABLE `worksheet_balancer` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `claim_ref` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `plan_id` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `policy_no` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `benefit_code` varchar(255) CHARACTER SET utf8 COLLATE utf8_unicode_ci DEFAULT NULL,
  `benefit_desc` varchar(300) DEFAULT '',
  `amount_incurred` int(11) DEFAULT NULL,
  `amount_approved` int(11) DEFAULT NULL,
  `amount_not_approved` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=67 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Table structure for worksheet_balancer_history
-- ----------------------------
DROP TABLE IF EXISTS `worksheet_balancer_history`;
CREATE TABLE `worksheet_balancer_history` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `claim_ref` varchar(75) COLLATE utf8_unicode_ci DEFAULT NULL,
  `plan_id` varchar(75) COLLATE utf8_unicode_ci DEFAULT NULL,
  `policy_no` varchar(75) COLLATE utf8_unicode_ci DEFAULT NULL,
  `benefit_code` varchar(75) COLLATE utf8_unicode_ci DEFAULT NULL,
  `benefit_desc` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `amount_incurred` int(11) DEFAULT NULL,
  `amount_approved` int(11) DEFAULT NULL,
  `amount_not_approved` int(11) DEFAULT NULL,
  `process_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=16466 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Table structure for worksheetold01
-- ----------------------------
DROP TABLE IF EXISTS `worksheetold01`;
CREATE TABLE `worksheetold01` (
  `case` int(11) DEFAULT NULL,
  `plan` int(11) DEFAULT NULL,
  `header` int(11) DEFAULT NULL,
  `detail` int(11) DEFAULT NULL,
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `start_date` date DEFAULT NULL,
  `end_date` date DEFAULT NULL,
  `day` decimal(20,2) DEFAULT 1.00,
  `day_rate` decimal(20,2) DEFAULT 0.00,
  `actual` decimal(20,2) DEFAULT 0.00,
  `tolerance` decimal(20,2) DEFAULT 0.00,
  `non_prorate` decimal(20,2) DEFAULT 0.00,
  `prorate` decimal(20,2) DEFAULT 0.00,
  `prorate_percent` decimal(20,15) DEFAULT 0.000000000000000,
  `prorate_result` decimal(20,2) DEFAULT 0.00,
  `exclusion` decimal(20,2) DEFAULT 0.00,
  `remaining_deductible` decimal(20,2) DEFAULT 0.00,
  `copayment` decimal(20,2) DEFAULT 1.00,
  `per_day_limit` decimal(20,2) DEFAULT 0.00,
  `per_day_limit_balance` decimal(20,2) DEFAULT 0.00,
  `per_case_limit` decimal(20,2) DEFAULT 0.00,
  `remaining_day` decimal(20,2) DEFAULT 0.00,
  `remaining_inner_limit` decimal(20,2) DEFAULT 0.00,
  `remaining_annual_limit` decimal(20,2) DEFAULT 0.00,
  `using_float_fund` int(11) DEFAULT 0,
  `remaining_float_fund` decimal(20,2) DEFAULT 0.00,
  `cash_benefit_availability` int(11) DEFAULT 0,
  `cover` decimal(20,2) DEFAULT 0.00,
  `excess` decimal(20,2) DEFAULT 0.00,
  `deductible` decimal(20,2) DEFAULT 0.00,
  `cash_benefit` decimal(20,2) DEFAULT 0.00,
  `remarks` varchar(3000) DEFAULT '',
  `remarks_01` varchar(3000) DEFAULT '',
  `relocated_to` int(11) DEFAULT NULL,
  `tick` int(11) DEFAULT 0,
  `created_by` varchar(50) DEFAULT '',
  `create_date` datetime DEFAULT NULL,
  `edited_by` varchar(50) DEFAULT '',
  `edit_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  KEY `wsSort6` (`header`) USING BTREE,
  KEY `wsSort7` (`detail`) USING BTREE,
  KEY `wsSort` (`plan`) USING BTREE,
  KEY `wsSort10` (`plan`,`header`,`detail`) USING BTREE,
  KEY `wsSort3` (`per_day_limit`,`relocated_to`,`tick`) USING BTREE,
  KEY `wsSort5` (`case`,`detail`) USING BTREE,
  KEY `wsSort8` (`relocated_to`,`tick`) USING BTREE,
  KEY `wsSort2` (`case`) USING BTREE,
  KEY `wsSort11` (`case`,`header`) USING BTREE,
  KEY `wsSort9` (`tick`,`case`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=1056111 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

-- ----------------------------
-- View structure for a_01
-- ----------------------------
DROP VIEW IF EXISTS `a_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `a_01` AS select `client`.`full_name` AS `full_name`,`his-tpa`.`case_status`.`name` AS `status`,`his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`create_date` AS `create_date`,if(`his-tpa`.`case`.`type` = 1,'Reimbursement',if(`his-tpa`.`case`.`type` = 2,'Cashless',if(`his-tpa`.`case`.`type` = 3,'Cashless Non-LOG',if(`his-tpa`.`case`.`type` = 4,'Pay & File','')))) AS `type`,if(`his-tpa`.`case`.`category` = 0,'Outpatient','Inpatient') AS `category`,`his-tpa`.`member`.`policy_no` AS `policy_no`,`his-tpa`.`member`.`member_name` AS `patient`,if(`his-tpa`.`case`.`gender` = 0,'Female','Male') AS `gender`,`principle`.`member_name` AS `principle`,if(`his-tpa`.`case`.`relation` = 1,'principle',if(`his-tpa`.`case`.`relation` = 2,'Spouse',if(`his-tpa`.`case`.`relation` = 3,'Child',if(`his-tpa`.`case`.`relation` = 4,'Dependant','')))) AS `relation`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`plan_detail`.`name` AS `benefit`,`his-tpa`.`plan_header`.`name` AS `jenis_benefit`,`his-tpa`.`status`.`name` AS `policy_status`,`his-tpa`.`program`.`name` AS `program`,`provider`.`full_name` AS `provider`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`diagnosis`.`name` AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`payment_date` AS `payment_date`,sum(`his-tpa`.`worksheet`.`actual`) AS `actual`,sum(`his-tpa`.`worksheet`.`cover`) AS `cover`,sum(`his-tpa`.`worksheet`.`excess`) AS `excess` from (((((((((((((((`his-tpa`.`case` left join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) left join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) left join `his-tpa`.`principle` on(`his-tpa`.`case`.`principle` = `principle`.`id`)) left join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`status` on(`his-tpa`.`case`.`policy_status` = `his-tpa`.`status`.`id`)) left join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) left join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`plan_detail` on(`his-tpa`.`worksheet`.`detail` = `his-tpa`.`plan_detail`.`id`)) left join `his-tpa`.`plan_header` on(`his-tpa`.`worksheet`.`header` = `his-tpa`.`plan_header`.`id`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`client` = 30 and date_format(`his-tpa`.`case`.`create_date`,'%Y-%m-%d') >= '2016-02-01' and date_format(`his-tpa`.`case`.`create_date`,'%Y-%m-%d') <= current_timestamp() group by `his-tpa`.`case`.`id` order by NULL ;

-- ----------------------------
-- View structure for activity_log_01
-- ----------------------------
DROP VIEW IF EXISTS `activity_log_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `activity_log_01` AS select `activity_log`.`case` AS `case`,`activity_log`.`id` AS `id`,`activity_log`.`datetime` AS `datetime`,`activity_log`.`contact_type` AS `contact_type`,`activity_log`.`contact_info` AS `contact_info`,`activity_log`.`contact_person` AS `contact_person`,`activity_log`.`description` AS `description`,`activity_log`.`status` AS `status`,`activity_log`.`created_by` AS `created_by`,`activity_log`.`create_date` AS `create_date`,`activity_log`.`edited_by` AS `edited_by`,`activity_log`.`edit_date` AS `edit_date` from `activity_log` ;

-- ----------------------------
-- View structure for activity_log_02
-- ----------------------------
DROP VIEW IF EXISTS `activity_log_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `activity_log_02` AS select `activity_log`.`case` AS `case`,`activity_log`.`id` AS `id`,`activity_log`.`datetime` AS `datetime`,`activity_log`.`contact_type` AS `contact_type`,`activity_log`.`contact_info` AS `contact_info`,`activity_log`.`contact_person` AS `contact_person`,`activity_log`.`description` AS `description`,`activity_log`.`status` AS `status`,`activity_log`.`created_by` AS `created_by`,`activity_log`.`create_date` AS `create_date`,`activity_log`.`edited_by` AS `edited_by`,`activity_log`.`edit_date` AS `edit_date` from `activity_log` ;

-- ----------------------------
-- View structure for activity_log_03
-- ----------------------------
DROP VIEW IF EXISTS `activity_log_03`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `activity_log_03` AS select `activity_log`.`case` AS `case`,`activity_log`.`id` AS `id`,`activity_log`.`datetime` AS `datetime`,`activity_log`.`contact_type` AS `contact_type`,`activity_log`.`contact_info` AS `contact_info`,`activity_log`.`contact_person` AS `contact_person`,`activity_log`.`description` AS `description`,`activity_log`.`status` AS `status`,`activity_log`.`created_by` AS `created_by`,`activity_log`.`create_date` AS `create_date`,`activity_log`.`edited_by` AS `edited_by`,`activity_log`.`edit_date` AS `edit_date` from `activity_log` where `activity_log`.`access` = 1 ;

-- ----------------------------
-- View structure for activity_log_04
-- ----------------------------
DROP VIEW IF EXISTS `activity_log_04`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `activity_log_04` AS select `activity_log`.`case` AS `case`,`activity_log`.`id` AS `id`,`activity_log`.`datetime` AS `datetime`,`activity_log`.`contact_type` AS `contact_type`,`activity_log`.`contact_info` AS `contact_info`,`activity_log`.`contact_person` AS `contact_person`,`activity_log`.`description` AS `description`,`activity_log`.`status` AS `status`,`activity_log`.`created_by` AS `created_by`,`activity_log`.`create_date` AS `create_date`,`activity_log`.`edited_by` AS `edited_by`,`activity_log`.`edit_date` AS `edit_date` from `activity_log` where `activity_log`.`contact_type` not in (9,10,11,12,13,14,15,16,17,18,96,97,99,100,28) ;

-- ----------------------------
-- View structure for admission_01
-- ----------------------------
DROP VIEW IF EXISTS `admission_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `admission_01` AS select `admission`.`id` AS `id`,`admission`.`created_by` AS `created_by`,`admission`.`create_date` AS `create_date`,`admission`.`created_by_01` AS `created_by_01`,`admission`.`create_date_01` AS `create_date_01`,`admission`.`source_header` AS `source_header`,`admission`.`source` AS `source`,`admission`.`category` AS `category`,`admission`.`type` AS `type`,`admission`.`ref` AS `ref`,`admission`.`patient` AS `patient`,`admission`.`dob` AS `dob`,`admission`.`gender` AS `gender`,`admission`.`member_id` AS `member_id`,`admission`.`member_card` AS `member_card`,`admission`.`principle` AS `principle`,`admission`.`relation` AS `relation`,`admission`.`mobile` AS `mobile`,`admission`.`client` AS `client`,`admission`.`branch` AS `branch`,`admission`.`company` AS `company`,`admission`.`policy_status` AS `policy_status`,`admission`.`policy_no` AS `policy_no`,`admission`.`policy_holder` AS `policy_holder`,`admission`.`policy_effective_date` AS `policy_effective_date`,`admission`.`policy_expiry_date` AS `policy_expiry_date`,`admission`.`policy_issue_date` AS `policy_issue_date`,`admission`.`policy_declare_date` AS `policy_declare_date`,`admission`.`policy_suspend_date` AS `policy_suspend_date`,`admission`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`admission`.`policy_lapse_date` AS `policy_lapse_date`,`admission`.`policy_revival_date` AS `policy_revival_date`,`admission`.`policy_termination_date` AS `policy_termination_date`,`admission`.`waiting_period` AS `waiting_period`,`admission`.`exclusion` AS `exclusion`,`admission`.`special_condition` AS `special_condition`,`admission`.`program` AS `program`,`admission`.`plan` AS `plan`,`admission`.`plan_attach_date` AS `plan_attach_date`,`admission`.`plan_expiry_date` AS `plan_expiry_date`,`admission`.`rider` AS `rider`,`admission`.`rider_attach_date` AS `rider_attach_date`,`admission`.`rider_expiry_date` AS `rider_expiry_date`,`admission`.`provider` AS `provider`,`admission`.`provider_status` AS `provider_status`,`admission`.`is_panel` AS `is_panel`,`admission`.`is_service_provided` AS `is_service_provided`,`admission`.`is_multiple_cashier` AS `is_multiple_cashier`,`admission`.`other_provider` AS `other_provider`,`admission`.`admission_date` AS `admission_date`,`admission`.`admission_hour` AS `admission_hour`,`admission`.`admission_minute` AS `admission_minute`,`admission`.`currency_01` AS `currency_01`,`admission`.`currency_02` AS `currency_02`,`admission`.`currency_rate` AS `currency_rate`,`admission`.`status` AS `status`,`admission`.`cancel_reason` AS `cancel_reason`,`admission`.`case_link` AS `case_link`,`admission`.`appended` AS `appended`,`admission`.`edited_by` AS `edited_by`,`admission`.`edit_date` AS `edit_date`,`admission`.`userlevel` AS `userlevel`,`admission`.`amount_currency_01` AS `amount_currency_01`,`admission`.`batch_received` AS `batch_received`,`admission`.`bill_no` AS `bill_no`,`admission`.`bill_issue_date` AS `bill_issue_date`,`admission`.`bill_due_date` AS `bill_due_date`,`admission`.`plan_header` AS `plan_header`,`admission`.`code_rawat` AS `code_rawat`,`admission`.`email_ops` AS `email_ops`,`admission`.`email_cc` AS `email_cc`,`admission`.`email_bcc` AS `email_bcc`,`admission`.`conditions_polis` AS `conditions_polis`,`admission`.`cek` AS `cek`,`admission`.`member_name` AS `member_name`,`admission`.`astra_vip` AS `astra_vip`,`admission`.`original_bill_upload` AS `original_bill_upload`,`admission`.`original_bill_status` AS `original_bill_status`,`admission`.`case_id` AS `case_id`,`admission`.`case_header` AS `case_header`,`admission`.`other_provider_city` AS `other_provider_city`,`admission`.`other_provider_country` AS `other_provider_country`,`admission`.`member_card_edc` AS `member_card_edc` from `admission` ;

-- ----------------------------
-- View structure for admission_02
-- ----------------------------
DROP VIEW IF EXISTS `admission_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `admission_02` AS select `admission`.`id` AS `id`,`admission`.`created_by` AS `created_by`,`admission`.`create_date` AS `create_date`,`admission`.`created_by_01` AS `created_by_01`,`admission`.`create_date_01` AS `create_date_01`,`admission`.`source_header` AS `source_header`,`admission`.`source` AS `source`,`admission`.`category` AS `category`,`admission`.`type` AS `type`,`admission`.`ref` AS `ref`,`admission`.`patient` AS `patient`,`admission`.`dob` AS `dob`,`admission`.`gender` AS `gender`,`admission`.`member_id` AS `member_id`,`admission`.`member_card` AS `member_card`,`admission`.`principle` AS `principle`,`admission`.`relation` AS `relation`,`admission`.`mobile` AS `mobile`,`admission`.`client` AS `client`,`admission`.`branch` AS `branch`,`admission`.`company` AS `company`,`admission`.`policy_status` AS `policy_status`,`admission`.`policy_no` AS `policy_no`,`admission`.`policy_holder` AS `policy_holder`,`admission`.`policy_effective_date` AS `policy_effective_date`,`admission`.`policy_expiry_date` AS `policy_expiry_date`,`admission`.`policy_issue_date` AS `policy_issue_date`,`admission`.`policy_declare_date` AS `policy_declare_date`,`admission`.`policy_suspend_date` AS `policy_suspend_date`,`admission`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`admission`.`policy_lapse_date` AS `policy_lapse_date`,`admission`.`policy_revival_date` AS `policy_revival_date`,`admission`.`policy_termination_date` AS `policy_termination_date`,`admission`.`waiting_period` AS `waiting_period`,`admission`.`exclusion` AS `exclusion`,`admission`.`special_condition` AS `special_condition`,`admission`.`program` AS `program`,`admission`.`plan` AS `plan`,`admission`.`plan_attach_date` AS `plan_attach_date`,`admission`.`plan_expiry_date` AS `plan_expiry_date`,`admission`.`rider` AS `rider`,`admission`.`rider_attach_date` AS `rider_attach_date`,`admission`.`rider_expiry_date` AS `rider_expiry_date`,`admission`.`provider` AS `provider`,`admission`.`provider_status` AS `provider_status`,`admission`.`is_panel` AS `is_panel`,`admission`.`is_service_provided` AS `is_service_provided`,`admission`.`is_multiple_cashier` AS `is_multiple_cashier`,`admission`.`other_provider` AS `other_provider`,`admission`.`admission_date` AS `admission_date`,`admission`.`admission_hour` AS `admission_hour`,`admission`.`admission_minute` AS `admission_minute`,`admission`.`currency_01` AS `currency_01`,`admission`.`currency_02` AS `currency_02`,`admission`.`currency_rate` AS `currency_rate`,`admission`.`status` AS `status`,`admission`.`cancel_reason` AS `cancel_reason`,`admission`.`case_link` AS `case_link`,`admission`.`appended` AS `appended`,`admission`.`edited_by` AS `edited_by`,`admission`.`edit_date` AS `edit_date`,`admission`.`userlevel` AS `userlevel`,`admission`.`amount_currency_01` AS `amount_currency_01`,`admission`.`batch_received` AS `batch_received`,`admission`.`bill_no` AS `bill_no`,`admission`.`bill_issue_date` AS `bill_issue_date`,`admission`.`bill_due_date` AS `bill_due_date`,`admission`.`plan_header` AS `plan_header`,`admission`.`code_rawat` AS `code_rawat`,`admission`.`email_ops` AS `email_ops`,`admission`.`email_cc` AS `email_cc`,`admission`.`email_bcc` AS `email_bcc`,`admission`.`conditions_polis` AS `conditions_polis`,`admission`.`cek` AS `cek`,`admission`.`member_name` AS `member_name`,`admission`.`astra_vip` AS `astra_vip`,`admission`.`original_bill_upload` AS `original_bill_upload`,`admission`.`original_bill_status` AS `original_bill_status`,`admission`.`case_id` AS `case_id`,`admission`.`case_header` AS `case_header`,`admission`.`other_provider_city` AS `other_provider_city`,`admission`.`other_provider_country` AS `other_provider_country`,`admission`.`member_card_edc` AS `member_card_edc` from `admission` where `admission`.`type` = 1 and `admission`.`source` = 0 ;

-- ----------------------------
-- View structure for analysis
-- ----------------------------
DROP VIEW IF EXISTS `analysis`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `analysis` AS select `a`.`case` AS `case`,`a`.`id` AS `id`,`a`.`plan` AS `plan`,`a`.`header` AS `header`,`a`.`detail` AS `detail`,`a`.`max_per_day` AS `max_per_day`,`a`.`max_day_per_year` AS `max_day_per_year`,`a`.`max_day_rate` AS `max_day_rate`,`a`.`day` AS `day`,`a`.`day_rate` AS `day_rate`,`a`.`actual` AS `actual`,`a`.`non_prorate` AS `non_prorate`,`a`.`prorate` AS `prorate`,`a`.`prorate_percent` AS `prorate_percent`,`a`.`prorate_result` AS `prorate_result`,`a`.`exclusion` AS `exclusion`,`a`.`remaining_deductible` AS `remaining_deductible`,`a`.`copayment` AS `copayment`,`a`.`per_day_limit` AS `per_day_limit`,`a`.`per_day_limit_balance` AS `per_day_limit_balance`,`a`.`per_case_limit` AS `per_case_limit`,`a`.`remaining_day` AS `remaining_day`,`a`.`remaining_inner_limit` AS `remaining_inner_limit`,`a`.`remaining_annual_limit` AS `remaining_annual_limit`,`a`.`using_float_fund` AS `using_float_fund`,`a`.`remaining_float_fund` AS `remaining_float_fund`,`a`.`cash_benefit_availability` AS `cash_benefit_availability`,if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) + `a`.`tolerance` AS `cover`,`a`.`actual` - (if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) + `a`.`tolerance`) AS `excess`,coalesce(if(`a`.`remaining_deductible` > `a`.`actual` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`),`a`.`actual` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`),`a`.`remaining_deductible`),0) AS `deductible`,if(`a`.`cash_benefit_availability` = 1,if(`a`.`max_day_rate` * `a`.`day` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) < 0,0,`a`.`max_day_rate` * `a`.`day` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`)),0) AS `cash_benefit` from (select `pre_analysis`.`case` AS `case`,`pre_analysis`.`id` AS `id`,`pre_analysis`.`plan` AS `plan`,`pre_analysis`.`header` AS `header`,`pre_analysis`.`detail` AS `detail`,`pre_analysis`.`max_per_day` AS `max_per_day`,`pre_analysis`.`max_day_per_year` AS `max_day_per_year`,if(`pre_analysis`.`ws_option` is null,`pre_analysis`.`max_day_rate`,`pre_analysis`.`inner_limit`) AS `max_day_rate`,`pre_analysis`.`day` AS `day`,`pre_analysis`.`day_rate` AS `day_rate`,`pre_analysis`.`actual` AS `actual`,`pre_analysis`.`tolerance` AS `tolerance`,`pre_analysis`.`non_prorate` AS `non_prorate`,`pre_analysis`.`prorate` AS `prorate`,`pre_analysis`.`prorate_percent` AS `prorate_percent`,`pre_analysis`.`prorate_result` AS `prorate_result`,`pre_analysis`.`exclusion` AS `exclusion`,coalesce(`pre_analysis`.`remaining_deductible`,0) AS `remaining_deductible`,`pre_analysis`.`copayment` AS `copayment`,`pre_analysis`.`copayment_01` AS `copayment_01`,`pre_analysis`.`per_day_limit` AS `per_day_limit`,coalesce(`pre_analysis`.`per_day_limit_balance`,0) AS `per_day_limit_balance`,`pre_analysis`.`per_case_limit` AS `per_case_limit`,coalesce(`pre_analysis`.`remaining_day`,0) AS `remaining_day`,coalesce(`pre_analysis`.`remaining_inner_limit`,0) AS `remaining_inner_limit`,coalesce(`pre_analysis`.`remaining_annual_limit`,0) AS `remaining_annual_limit`,`pre_analysis`.`using_float_fund` AS `using_float_fund`,`pre_analysis`.`remaining_float_fund` AS `remaining_float_fund`,`pre_analysis`.`cash_benefit_availability` AS `cash_benefit_availability`,if(`pre_analysis`.`using_float_fund` = 0,if(if(if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))) > `pre_analysis`.`remaining_annual_limit`,`pre_analysis`.`remaining_annual_limit`,if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))))) < 0,0,if(if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))) > `pre_analysis`.`remaining_annual_limit`,`pre_analysis`.`remaining_annual_limit`,if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))))),if(if(if(if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))) > `pre_analysis`.`remaining_annual_limit`,`pre_analysis`.`remaining_annual_limit`,if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))))) < 0,0,if(if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))) > `pre_analysis`.`remaining_annual_limit`,`pre_analysis`.`remaining_annual_limit`,if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))))) > `pre_analysis`.`remaining_float_fund`,`pre_analysis`.`remaining_float_fund`,if(if(if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))) > `pre_analysis`.`remaining_annual_limit`,`pre_analysis`.`remaining_annual_limit`,if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))))) < 0,0,if(if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))) > `pre_analysis`.`remaining_annual_limit`,`pre_analysis`.`remaining_annual_limit`,if(if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))) > `pre_analysis`.`remaining_inner_limit`,`pre_analysis`.`remaining_inner_limit`,if(`pre_analysis`.`ws_option` is null,if(if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)) > `pre_analysis`.`case_rate`,`pre_analysis`.`case_rate`,if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1))),if(`pre_analysis`.`day` > `pre_analysis`.`remaining_day`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1) - (`pre_analysis`.`day` - `pre_analysis`.`remaining_day`) * `pre_analysis`.`day_rate`,if(`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` > `pre_analysis`.`remaining_deductible`,`pre_analysis`.`actual` - `pre_analysis`.`prorate_result` - `pre_analysis`.`exclusion` - `pre_analysis`.`remaining_deductible`,0) * if(`pre_analysis`.`copayment_01` = 0,`pre_analysis`.`copayment`,1)))))))) AS `cover` from `his-tpa`.`pre_analysis`) `a` ;

-- ----------------------------
-- View structure for analysis_01
-- ----------------------------
DROP VIEW IF EXISTS `analysis_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `analysis_01` AS select `a`.`case` AS `case`,`a`.`id` AS `id`,`a`.`plan` AS `plan`,`a`.`header` AS `header`,`a`.`detail` AS `detail`,`a`.`max_per_day` AS `max_per_day`,`a`.`max_day_per_year` AS `max_day_per_year`,`a`.`max_day_rate` AS `max_day_rate`,`a`.`day` AS `day`,`a`.`day_rate` AS `day_rate`,`a`.`actual` AS `actual`,`a`.`non_prorate` AS `non_prorate`,`a`.`prorate` AS `prorate`,`a`.`prorate_percent` AS `prorate_percent`,`a`.`prorate_result` AS `prorate_result`,`a`.`exclusion` AS `exclusion`,`a`.`remaining_deductible` AS `remaining_deductible`,`a`.`copayment` AS `copayment`,`a`.`per_day_limit` AS `per_day_limit`,`a`.`per_day_limit_balance` AS `per_day_limit_balance`,`a`.`per_case_limit` AS `per_case_limit`,`a`.`remaining_day` AS `remaining_day`,`a`.`remaining_inner_limit` AS `remaining_inner_limit`,`a`.`remaining_annual_limit` AS `remaining_annual_limit`,`a`.`using_float_fund` AS `using_float_fund`,`a`.`remaining_float_fund` AS `remaining_float_fund`,`a`.`cash_benefit_availability` AS `cash_benefit_availability`,if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) + `a`.`tolerance` AS `cover`,`a`.`actual` - (if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) + `a`.`tolerance`) AS `excess`,coalesce(if(`a`.`remaining_deductible` > `a`.`actual` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`),`a`.`actual` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`),`a`.`remaining_deductible`),0) AS `deductible`,if(`a`.`cash_benefit_availability` = 1,if(`a`.`max_day_rate` * `a`.`day` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) < 0,0,`a`.`max_day_rate` * `a`.`day` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`)),0) AS `cash_benefit` from (select `pre_analysis_01`.`case` AS `case`,`pre_analysis_01`.`id` AS `id`,`pre_analysis_01`.`plan` AS `plan`,`pre_analysis_01`.`header` AS `header`,`pre_analysis_01`.`detail` AS `detail`,`pre_analysis_01`.`max_per_day` AS `max_per_day`,`pre_analysis_01`.`max_day_per_year` AS `max_day_per_year`,if(`pre_analysis_01`.`ws_option` is null,`pre_analysis_01`.`max_day_rate`,`pre_analysis_01`.`inner_limit`) AS `max_day_rate`,`pre_analysis_01`.`day` AS `day`,`pre_analysis_01`.`day_rate` AS `day_rate`,`pre_analysis_01`.`actual` AS `actual`,`pre_analysis_01`.`tolerance` AS `tolerance`,`pre_analysis_01`.`non_prorate` AS `non_prorate`,`pre_analysis_01`.`prorate` AS `prorate`,`pre_analysis_01`.`prorate_percent` AS `prorate_percent`,`pre_analysis_01`.`prorate_result` AS `prorate_result`,`pre_analysis_01`.`exclusion` AS `exclusion`,coalesce(`pre_analysis_01`.`remaining_deductible`,0) AS `remaining_deductible`,`pre_analysis_01`.`copayment` AS `copayment`,`pre_analysis_01`.`copayment_01` AS `copayment_01`,`pre_analysis_01`.`per_day_limit` AS `per_day_limit`,coalesce(`pre_analysis_01`.`per_day_limit_balance`,0) AS `per_day_limit_balance`,`pre_analysis_01`.`per_case_limit` AS `per_case_limit`,coalesce(`pre_analysis_01`.`remaining_day`,0) AS `remaining_day`,coalesce(`pre_analysis_01`.`remaining_inner_limit`,0) AS `remaining_inner_limit`,coalesce(`pre_analysis_01`.`remaining_annual_limit`,0) AS `remaining_annual_limit`,`pre_analysis_01`.`using_float_fund` AS `using_float_fund`,`pre_analysis_01`.`remaining_float_fund` AS `remaining_float_fund`,`pre_analysis_01`.`cash_benefit_availability` AS `cash_benefit_availability`,if(`pre_analysis_01`.`using_float_fund` = 0,if(if(if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))) > `pre_analysis_01`.`remaining_annual_limit`,`pre_analysis_01`.`remaining_annual_limit`,if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))))) < 0,0,if(if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))) > `pre_analysis_01`.`remaining_annual_limit`,`pre_analysis_01`.`remaining_annual_limit`,if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))))),if(if(if(if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))) > `pre_analysis_01`.`remaining_annual_limit`,`pre_analysis_01`.`remaining_annual_limit`,if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))))) < 0,0,if(if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))) > `pre_analysis_01`.`remaining_annual_limit`,`pre_analysis_01`.`remaining_annual_limit`,if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))))) > `pre_analysis_01`.`remaining_float_fund`,`pre_analysis_01`.`remaining_float_fund`,if(if(if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))) > `pre_analysis_01`.`remaining_annual_limit`,`pre_analysis_01`.`remaining_annual_limit`,if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))))) < 0,0,if(if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))) > `pre_analysis_01`.`remaining_annual_limit`,`pre_analysis_01`.`remaining_annual_limit`,if(if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))) > `pre_analysis_01`.`remaining_inner_limit`,`pre_analysis_01`.`remaining_inner_limit`,if(`pre_analysis_01`.`ws_option` is null,if(if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)) > `pre_analysis_01`.`case_rate`,`pre_analysis_01`.`case_rate`,if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1))),if(`pre_analysis_01`.`day` > `pre_analysis_01`.`remaining_day`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1) - (`pre_analysis_01`.`day` - `pre_analysis_01`.`remaining_day`) * `pre_analysis_01`.`day_rate`,if(`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` > `pre_analysis_01`.`remaining_deductible`,`pre_analysis_01`.`actual` - `pre_analysis_01`.`prorate_result` - `pre_analysis_01`.`exclusion` - `pre_analysis_01`.`remaining_deductible`,0) * if(`pre_analysis_01`.`copayment_01` = 0,`pre_analysis_01`.`copayment`,1)))))))) AS `cover` from `his-tpa`.`pre_analysis_01`) `a` ;

-- ----------------------------
-- View structure for analysis_02
-- ----------------------------
DROP VIEW IF EXISTS `analysis_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `analysis_02` AS select `a`.`case` AS `case`,`a`.`id` AS `id`,`a`.`plan` AS `plan`,`a`.`header` AS `header`,`a`.`detail` AS `detail`,`a`.`max_per_day` AS `max_per_day`,`a`.`max_day_per_year` AS `max_day_per_year`,`a`.`max_day_rate` AS `max_day_rate`,`a`.`day` AS `day`,`a`.`day_rate` AS `day_rate`,`a`.`actual` AS `actual`,`a`.`non_prorate` AS `non_prorate`,`a`.`prorate` AS `prorate`,`a`.`prorate_percent` AS `prorate_percent`,`a`.`prorate_result` AS `prorate_result`,`a`.`exclusion` AS `exclusion`,`a`.`remaining_deductible` AS `remaining_deductible`,`a`.`copayment` AS `copayment`,`a`.`per_day_limit` AS `per_day_limit`,`a`.`per_day_limit_balance` AS `per_day_limit_balance`,`a`.`per_case_limit` AS `per_case_limit`,`a`.`remaining_day` AS `remaining_day`,`a`.`remaining_inner_limit` AS `remaining_inner_limit`,`a`.`remaining_annual_limit` AS `remaining_annual_limit`,`a`.`using_float_fund` AS `using_float_fund`,`a`.`remaining_float_fund` AS `remaining_float_fund`,`a`.`cash_benefit_availability` AS `cash_benefit_availability`,if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) + `a`.`tolerance` AS `cover`,`a`.`actual` - (if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) + `a`.`tolerance`) AS `excess`,coalesce(if(`a`.`remaining_deductible` > `a`.`actual` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`),`a`.`actual` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`),`a`.`remaining_deductible`),0) AS `deductible`,if(`a`.`cash_benefit_availability` = 1,if(`a`.`max_day_rate` * `a`.`day` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`) < 0,0,`a`.`max_day_rate` * `a`.`day` - if(`a`.`copayment_01` = 1,`a`.`cover` * `a`.`copayment`,`a`.`cover`)),0) AS `cash_benefit` from (select `his-tpa`.`pre_analysis_02`.`case` AS `case`,`his-tpa`.`pre_analysis_02`.`id` AS `id`,`his-tpa`.`pre_analysis_02`.`plan` AS `plan`,`his-tpa`.`pre_analysis_02`.`header` AS `header`,`his-tpa`.`pre_analysis_02`.`detail` AS `detail`,`his-tpa`.`pre_analysis_02`.`max_per_day` AS `max_per_day`,`his-tpa`.`pre_analysis_02`.`max_day_per_year` AS `max_day_per_year`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,`his-tpa`.`pre_analysis_02`.`max_day_rate`,`his-tpa`.`pre_analysis_02`.`inner_limit`) AS `max_day_rate`,`his-tpa`.`pre_analysis_02`.`day` AS `day`,`his-tpa`.`pre_analysis_02`.`day_rate` AS `day_rate`,`his-tpa`.`pre_analysis_02`.`actual` AS `actual`,`his-tpa`.`pre_analysis_02`.`tolerance` AS `tolerance`,`his-tpa`.`pre_analysis_02`.`non_prorate` AS `non_prorate`,`his-tpa`.`pre_analysis_02`.`prorate` AS `prorate`,`his-tpa`.`pre_analysis_02`.`prorate_percent` AS `prorate_percent`,`his-tpa`.`pre_analysis_02`.`prorate_result` AS `prorate_result`,`his-tpa`.`pre_analysis_02`.`exclusion` AS `exclusion`,coalesce(`his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) AS `remaining_deductible`,`his-tpa`.`pre_analysis_02`.`copayment` AS `copayment`,`his-tpa`.`pre_analysis_02`.`copayment_01` AS `copayment_01`,`his-tpa`.`pre_analysis_02`.`per_day_limit` AS `per_day_limit`,coalesce(`his-tpa`.`pre_analysis_02`.`per_day_limit_balance`,0) AS `per_day_limit_balance`,`his-tpa`.`pre_analysis_02`.`per_case_limit` AS `per_case_limit`,coalesce(`his-tpa`.`pre_analysis_02`.`remaining_day`,0) AS `remaining_day`,coalesce(`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,0) AS `remaining_inner_limit`,coalesce(`his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,0) AS `remaining_annual_limit`,`his-tpa`.`pre_analysis_02`.`using_float_fund` AS `using_float_fund`,`his-tpa`.`pre_analysis_02`.`remaining_float_fund` AS `remaining_float_fund`,`his-tpa`.`pre_analysis_02`.`cash_benefit_availability` AS `cash_benefit_availability`,if(`his-tpa`.`pre_analysis_02`.`using_float_fund` = 0,if(if(if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))) > `his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,`his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))))) < 0,0,if(if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))) > `his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,`his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))))),if(if(if(if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))) > `his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,`his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))))) < 0,0,if(if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))) > `his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,`his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))))) > `his-tpa`.`pre_analysis_02`.`remaining_float_fund`,`his-tpa`.`pre_analysis_02`.`remaining_float_fund`,if(if(if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))) > `his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,`his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))))) < 0,0,if(if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))) > `his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,`his-tpa`.`pre_analysis_02`.`remaining_annual_limit`,if(if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))) > `his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,`his-tpa`.`pre_analysis_02`.`remaining_inner_limit`,if(`his-tpa`.`pre_analysis_02`.`ws_option` is null,if(if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)) > `his-tpa`.`pre_analysis_02`.`case_rate`,`his-tpa`.`pre_analysis_02`.`case_rate`,if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1))),if(`his-tpa`.`pre_analysis_02`.`day` > `his-tpa`.`pre_analysis_02`.`remaining_day`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1) - (`his-tpa`.`pre_analysis_02`.`day` - `his-tpa`.`pre_analysis_02`.`remaining_day`) * `his-tpa`.`pre_analysis_02`.`day_rate`,if(`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` > `his-tpa`.`pre_analysis_02`.`remaining_deductible`,`his-tpa`.`pre_analysis_02`.`actual` - `his-tpa`.`pre_analysis_02`.`prorate_result` - `his-tpa`.`pre_analysis_02`.`exclusion` - `his-tpa`.`pre_analysis_02`.`remaining_deductible`,0) * if(`his-tpa`.`pre_analysis_02`.`copayment_01` = 0,`his-tpa`.`pre_analysis_02`.`copayment`,1)))))))) AS `cover` from `his-tpa`.`pre_analysis_02`) `a` ;

-- ----------------------------
-- View structure for balance_detail
-- ----------------------------
DROP VIEW IF EXISTS `balance_detail`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `balance_detail` AS select `member`.`id` AS `patient`,`plan_detail`.`id` AS `detail`,`plan_detail`.`name` AS `name`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance`.`day`,0),coalesce(`principle_detail_balance`.`day`,0)) AS `max_day_per_year_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`max_day_per_year` - coalesce(`patient_detail_balance`.`day`,0),`plan_detail`.`max_day_per_year` - coalesce(`principle_detail_balance`.`day`,0)) AS `max_day_per_year_balance`,`plan_detail`.`annual_limit` AS `detail_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance`.`cover`,0),coalesce(`principle_detail_balance`.`cover`,0)) AS `detail_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`annual_limit` - coalesce(`patient_detail_balance`.`cover`,0),`plan_detail`.`annual_limit` - coalesce(`principle_detail_balance`.`cover`,0)) AS `detail_annual_limit_balance` from ((((`member` join `plan_detail` on(`member`.`plan` = `plan_detail`.`plan`)) left join `patient_detail_balance` on(`patient_detail_balance`.`name` = `plan_detail`.`name` and `patient_detail_balance`.`patient` = `member`.`id`)) left join `principle_detail_balance` on(`principle_detail_balance`.`principle` = `member`.`member_principle` and `principle_detail_balance`.`name` = `plan_detail`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) ;

-- ----------------------------
-- View structure for balance_detail_01
-- ----------------------------
DROP VIEW IF EXISTS `balance_detail_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `balance_detail_01` AS select `member`.`id` AS `patient`,`plan_detail`.`id` AS `detail`,`plan_detail`.`name` AS `name`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance_01`.`day`,0),coalesce(`principle_detail_balance_01`.`day`,0)) AS `max_day_per_year_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`max_day_per_year` - coalesce(`patient_detail_balance_01`.`day`,0),`plan_detail`.`max_day_per_year` - coalesce(`principle_detail_balance_01`.`day`,0)) AS `max_day_per_year_balance`,`plan_detail`.`annual_limit` AS `detail_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance_01`.`cover`,0),coalesce(`principle_detail_balance_01`.`cover`,0)) AS `detail_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`annual_limit` - coalesce(`patient_detail_balance_01`.`cover`,0),`plan_detail`.`annual_limit` - coalesce(`principle_detail_balance_01`.`cover`,0)) AS `detail_annual_limit_balance` from ((((`member` join `plan_detail` on(`member`.`plan` = `plan_detail`.`plan`)) left join `patient_detail_balance_01` on(`patient_detail_balance_01`.`name` = `plan_detail`.`name` and `patient_detail_balance_01`.`patient` = `member`.`id`)) left join `principle_detail_balance_01` on(`principle_detail_balance_01`.`principle` = `member`.`member_principle` and `principle_detail_balance_01`.`name` = `plan_detail`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) where `member`.`policy_status` = 1 ;

-- ----------------------------
-- View structure for balance_detail_02
-- ----------------------------
DROP VIEW IF EXISTS `balance_detail_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `balance_detail_02` AS select `member`.`id` AS `patient`,`plan_detail`.`id` AS `detail`,`plan_detail`.`name` AS `name`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance_01`.`day`,0),coalesce(`principle_detail_balance_01`.`day`,0)) AS `max_day_per_year_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`max_day_per_year` - coalesce(`patient_detail_balance_01`.`day`,0),`plan_detail`.`max_day_per_year` - coalesce(`principle_detail_balance_01`.`day`,0)) AS `max_day_per_year_balance`,`plan_detail`.`annual_limit` AS `detail_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance_01`.`cover`,0),coalesce(`principle_detail_balance_01`.`cover`,0)) AS `detail_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`annual_limit` - coalesce(`patient_detail_balance_01`.`cover`,0),`plan_detail`.`annual_limit` - coalesce(`principle_detail_balance_01`.`cover`,0)) AS `detail_annual_limit_balance` from ((((`member` join `plan_detail` on(`member`.`plan` = `plan_detail`.`plan`)) join `patient_detail_balance_01` on(`patient_detail_balance_01`.`name` = `plan_detail`.`name` and `patient_detail_balance_01`.`patient` = `member`.`id`)) join `principle_detail_balance_01` on(`principle_detail_balance_01`.`principle` = `member`.`member_principle` and `principle_detail_balance_01`.`name` = `plan_detail`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) ;

-- ----------------------------
-- View structure for balance_detail_04
-- ----------------------------
DROP VIEW IF EXISTS `balance_detail_04`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `balance_detail_04` AS select `member`.`id` AS `patient`,`plan_detail`.`id` AS `detail`,`plan_detail`.`name` AS `name`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance_02`.`day`,0),coalesce(`principle_detail_balance_02`.`day`,0)) AS `max_day_per_year_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`max_day_per_year` - coalesce(`patient_detail_balance_02`.`day`,0),`plan_detail`.`max_day_per_year` - coalesce(`principle_detail_balance_02`.`day`,0)) AS `max_day_per_year_balance`,`plan_detail`.`annual_limit` AS `detail_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance_02`.`cover`,0),coalesce(`principle_detail_balance_02`.`cover`,0)) AS `detail_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`annual_limit` - coalesce(`patient_detail_balance_02`.`cover`,0),`plan_detail`.`annual_limit` - coalesce(`principle_detail_balance_02`.`cover`,0)) AS `detail_annual_limit_balance` from ((((`member` join `plan_detail` on(`member`.`plan` = `plan_detail`.`plan`)) left join `patient_detail_balance_02` on(`patient_detail_balance_02`.`name` = `plan_detail`.`name` and `patient_detail_balance_02`.`patient` = `member`.`id`)) left join `principle_detail_balance_02` on(`principle_detail_balance_02`.`principle` = `member`.`member_principle` and `principle_detail_balance_02`.`name` = `plan_detail`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) ;

-- ----------------------------
-- View structure for balance_detail_temp
-- ----------------------------
DROP VIEW IF EXISTS `balance_detail_temp`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `balance_detail_temp` AS select `member`.`id` AS `patient`,`plan_detail`.`id` AS `detail`,`plan_detail`.`name` AS `name`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance`.`day`,0),coalesce(`principle_detail_balance`.`day`,0)) AS `max_day_per_year_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`max_day_per_year` - coalesce(`patient_detail_balance`.`day`,0),`plan_detail`.`max_day_per_year` - coalesce(`principle_detail_balance`.`day`,0)) AS `max_day_per_year_balance`,`plan_detail`.`annual_limit` AS `detail_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_detail_balance`.`cover`,0),coalesce(`principle_detail_balance`.`cover`,0)) AS `detail_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_detail`.`annual_limit` - coalesce(`patient_detail_balance`.`cover`,0),`plan_detail`.`annual_limit` - coalesce(`principle_detail_balance`.`cover`,0)) AS `detail_annual_limit_balance` from ((((`member` join `plan_detail` on(`member`.`plan` = `plan_detail`.`plan`)) join `patient_detail_balance` on(`patient_detail_balance`.`name` = `plan_detail`.`name` and `patient_detail_balance`.`patient` = `member`.`id`)) join `principle_detail_balance` on(`principle_detail_balance`.`principle` = `member`.`member_principle` and `principle_detail_balance`.`name` = `plan_detail`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) ;

-- ----------------------------
-- View structure for balance_header
-- ----------------------------
DROP VIEW IF EXISTS `balance_header`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `balance_header` AS select `member`.`id` AS `patient`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `header_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance`.`cover`,0),coalesce(`principle_header_balance`.`cover`,0)) AS `header_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_header`.`annual_limit` - coalesce(`patient_header_balance`.`cover`,0),`plan_header`.`annual_limit` - coalesce(`principle_header_balance`.`cover`,0)) AS `header_annual_limit_balance`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance`.`deductible`,0),coalesce(`principle_header_balance`.`deductible`,0)) AS `deductible_per_year_utilized`,if(`plan`.`limit` = 1,`plan_header`.`deductible_per_year` - coalesce(`patient_header_balance`.`deductible`,0),`plan_header`.`deductible_per_year` - coalesce(`principle_header_balance`.`deductible`,0)) AS `deductible_per_year_balance` from ((((`member` join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) left join `patient_header_balance` on(`patient_header_balance`.`name` = `plan_header`.`name` and `patient_header_balance`.`patient` = `member`.`id`)) left join `principle_header_balance` on(`principle_header_balance`.`principle` = `member`.`member_principle` and `principle_header_balance`.`name` = `plan_header`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) ;

-- ----------------------------
-- View structure for balance_header_01
-- ----------------------------
DROP VIEW IF EXISTS `balance_header_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `balance_header_01` AS select `member`.`id` AS `patient`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `header_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance_01`.`cover`,0),coalesce(`principle_header_balance_01`.`cover`,0)) AS `header_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_header`.`annual_limit` - coalesce(`patient_header_balance_01`.`cover`,0),`plan_header`.`annual_limit` - coalesce(`principle_header_balance_01`.`cover`,0)) AS `header_annual_limit_balance`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance_01`.`deductible`,0),coalesce(`principle_header_balance_01`.`deductible`,0)) AS `deductible_per_year_utilized`,if(`plan`.`limit` = 1,`plan_header`.`deductible_per_year` - coalesce(`patient_header_balance_01`.`deductible`,0),`plan_header`.`deductible_per_year` - coalesce(`principle_header_balance_01`.`deductible`,0)) AS `deductible_per_year_balance` from ((((`member` join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) left join `patient_header_balance_01` on(`patient_header_balance_01`.`name` = `plan_header`.`name` and `patient_header_balance_01`.`patient` = `member`.`id`)) left join `principle_header_balance_01` on(`principle_header_balance_01`.`principle` = `member`.`member_principle` and `principle_header_balance_01`.`name` = `plan_header`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) where `member`.`policy_status` = 1 ;

-- ----------------------------
-- View structure for balance_header_02
-- ----------------------------
DROP VIEW IF EXISTS `balance_header_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `balance_header_02` AS select `member`.`id` AS `patient`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `header_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance_01`.`cover`,0),coalesce(`principle_header_balance_01`.`cover`,0)) AS `header_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_header`.`annual_limit` - coalesce(`patient_header_balance_01`.`cover`,0),`plan_header`.`annual_limit` - coalesce(`principle_header_balance_01`.`cover`,0)) AS `header_annual_limit_balance`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance_01`.`deductible`,0),coalesce(`principle_header_balance_01`.`deductible`,0)) AS `deductible_per_year_utilized`,if(`plan`.`limit` = 1,`plan_header`.`deductible_per_year` - coalesce(`patient_header_balance_01`.`deductible`,0),`plan_header`.`deductible_per_year` - coalesce(`principle_header_balance_01`.`deductible`,0)) AS `deductible_per_year_balance` from ((((`member` join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) join `patient_header_balance_01` on(`patient_header_balance_01`.`name` = `plan_header`.`name` and `patient_header_balance_01`.`patient` = `member`.`id`)) join `principle_header_balance_01` on(`principle_header_balance_01`.`principle` = `member`.`member_principle` and `principle_header_balance_01`.`name` = `plan_header`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) ;

-- ----------------------------
-- View structure for balance_header_04
-- ----------------------------
DROP VIEW IF EXISTS `balance_header_04`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `balance_header_04` AS select `member`.`id` AS `patient`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `header_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance_02`.`cover`,0),coalesce(`principle_header_balance_02`.`cover`,0)) AS `header_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_header`.`annual_limit` - coalesce(`patient_header_balance_02`.`cover`,0),`plan_header`.`annual_limit` - coalesce(`principle_header_balance_02`.`cover`,0)) AS `header_annual_limit_balance`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance_02`.`deductible`,0),coalesce(`principle_header_balance_02`.`deductible`,0)) AS `deductible_per_year_utilized`,if(`plan`.`limit` = 1,`plan_header`.`deductible_per_year` - coalesce(`patient_header_balance_02`.`deductible`,0),`plan_header`.`deductible_per_year` - coalesce(`principle_header_balance_02`.`deductible`,0)) AS `deductible_per_year_balance` from ((((`member` join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) left join `patient_header_balance_02` on(`patient_header_balance_02`.`name` = `plan_header`.`name` and `patient_header_balance_02`.`patient` = `member`.`id`)) left join `principle_header_balance_02` on(`principle_header_balance_02`.`principle` = `member`.`member_principle` and `principle_header_balance_02`.`name` = `plan_header`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) ;

-- ----------------------------
-- View structure for balance_header_temp
-- ----------------------------
DROP VIEW IF EXISTS `balance_header_temp`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `balance_header_temp` AS select `member`.`id` AS `patient`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `header_annual_limit`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance`.`cover`,0),coalesce(`principle_header_balance`.`cover`,0)) AS `header_annual_limit_utilized`,if(`plan`.`limit` = 1,`plan_header`.`annual_limit` - coalesce(`patient_header_balance`.`cover`,0),`plan_header`.`annual_limit` - coalesce(`principle_header_balance`.`cover`,0)) AS `header_annual_limit_balance`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,if(`plan`.`limit` = 1,coalesce(`patient_header_balance`.`deductible`,0),coalesce(`principle_header_balance`.`deductible`,0)) AS `deductible_per_year_utilized`,if(`plan`.`limit` = 1,`plan_header`.`deductible_per_year` - coalesce(`patient_header_balance`.`deductible`,0),`plan_header`.`deductible_per_year` - coalesce(`principle_header_balance`.`deductible`,0)) AS `deductible_per_year_balance` from ((((`member` join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) join `patient_header_balance` on(`patient_header_balance`.`name` = `plan_header`.`name` and `patient_header_balance`.`patient` = `member`.`id`)) join `principle_header_balance` on(`principle_header_balance`.`principle` = `member`.`member_principle` and `principle_header_balance`.`name` = `plan_header`.`name`)) join `plan` on(`member`.`plan` = `plan`.`id`)) ;

-- ----------------------------
-- View structure for calendar
-- ----------------------------
DROP VIEW IF EXISTS `calendar`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `calendar` AS select `intsys`.`calendar`.`id` AS `id`,`intsys`.`calendar`.`tgl_1` AS `tgl_1`,`intsys`.`calendar`.`tgl_2` AS `tgl_2`,`intsys`.`calendar`.`shift` AS `shift`,`intsys`.`calendar`.`day` AS `day`,`intsys`.`calendar`.`status` AS `status`,`intsys`.`calendar`.`is_holiday` AS `is_holiday` from `intsys`.`calendar` ;

-- ----------------------------
-- View structure for case_01
-- ----------------------------
DROP VIEW IF EXISTS `case_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_01` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`created_by_01` AS `created_by_01`,`his-tpa`.`case`.`create_date_01` AS `create_date_01`,`his-tpa`.`case`.`source` AS `source`,`his-tpa`.`case`.`status` AS `status`,`his-tpa`.`case`.`status_01` AS `status_01`,`his-tpa`.`case`.`category` AS `category`,`his-tpa`.`case`.`type` AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`case`.`patient` AS `patient`,`his-tpa`.`case`.`dob` AS `dob`,`his-tpa`.`case`.`gender` AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,`his-tpa`.`case`.`member_card_edc` AS `member_card_edc`,`his-tpa`.`case`.`principle` AS `principle`,`his-tpa`.`case`.`relation` AS `relation`,`his-tpa`.`case`.`mobile` AS `mobile`,`his-tpa`.`case`.`client` AS `client`,`his-tpa`.`case`.`branch` AS `branch`,`his-tpa`.`case`.`company` AS `company`,`his-tpa`.`case`.`policy_status` AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`policy_suspend_date` AS `policy_suspend_date`,`his-tpa`.`case`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`his-tpa`.`case`.`waiting_period` AS `waiting_period`,`his-tpa`.`case`.`final_decision` AS `final_decision`,`his-tpa`.`case`.`case_remarks` AS `case_remarks`,`his-tpa`.`case`.`case_remarks_by` AS `case_remarks_by`,`his-tpa`.`case`.`averaged_cost` AS `averaged_cost`,`his-tpa`.`case`.`los` AS `los`,`his-tpa`.`case`.`case_remarks_date` AS `case_remarks_date`,`his-tpa`.`case`.`exclusion` AS `exclusion`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`case`.`member_remarks` AS `member_remarks`,`his-tpa`.`case`.`member_remarks_by` AS `member_remarks_by`,`his-tpa`.`case`.`member_remarks_date` AS `member_remarks_date`,`his-tpa`.`case`.`program` AS `program`,`his-tpa`.`case`.`plan` AS `plan`,`his-tpa`.`case`.`plan_header` AS `plan_header`,`his-tpa`.`case`.`code_rawat` AS `code_rawat`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`case`.`rider` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,`his-tpa`.`case`.`provider` AS `provider`,`his-tpa`.`case`.`provider_email` AS `provider_email`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`other_provider_city` AS `other_provider_city`,`his-tpa`.`case`.`other_provider_country` AS `other_provider_country`,`his-tpa`.`case`.`provider_cancel` AS `provider_cancel`,`his-tpa`.`case`.`id_edc` AS `id_edc`,cast(if(`provider`.`country` = 2417,'2',if(`his-tpa`.`case`.`provider` = 310,'1',if(`provider`.`country` = 85,'1',if(`provider`.`country` = 0,'0','2')))) as unsigned) AS `provider_location`,`his-tpa`.`case`.`currency_01` AS `currency_01`,`his-tpa`.`case`.`currency_02` AS `currency_02`,`his-tpa`.`case`.`currency_rate` AS `currency_rate`,`his-tpa`.`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`his-tpa`.`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`his-tpa`.`case`.`amount_currency_01` AS `amount_currency_01`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`initial_diagnosis_01` AS `initial_diagnosis_01`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,`his-tpa`.`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`his-tpa`.`case`.`haf_doc_completed` AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`his-tpa`.`case`.`issue_initial_log` AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`his-tpa`.`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,`his-tpa`.`case`.`initial_log_approval` AS `initial_log_approval`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`his-tpa`.`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,`his-tpa`.`case`.`diagnosis` AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`surgery` AS `surgery`,`his-tpa`.`case`.`other_surgery` AS `other_surgery`,`his-tpa`.`case`.`bill_received` AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished` AS `upload_bill_finished`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`his-tpa`.`case`.`bill_completed` AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`his-tpa`.`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`his-tpa`.`case`.`ws_type` AS `ws_type`,`his-tpa`.`case`.`ws_option` AS `ws_option`,`his-tpa`.`case`.`ws_finished` AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,`his-tpa`.`case`.`ws_approval` AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,`his-tpa`.`case`.`issue_log` AS `issue_log`,`his-tpa`.`case`.`issue_log_option` AS `issue_log_option`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `log_issued_by_01`,`his-tpa`.`case`.`log_issue_date_01` AS `log_issue_date_01`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,`his-tpa`.`case`.`log_bank` AS `log_bank`,`his-tpa`.`case`.`log_bank_branch` AS `log_bank_branch`,`his-tpa`.`case`.`log_bank_city` AS `log_bank_city`,`his-tpa`.`case`.`log_bank_account_no` AS `log_bank_account_no`,`his-tpa`.`case`.`log_bank_on_behalf_of` AS `log_bank_on_behalf_of`,`his-tpa`.`case`.`log_approval` AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`nonlog_remarks_code` AS `nonlog_remarks_code`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`batch_received` AS `batch_received`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`his-tpa`.`case`.`original_bill_upload_date_first` AS `original_bill_upload_date_first`,`his-tpa`.`case`.`original_bill_checked` AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`his-tpa`.`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`his-tpa`.`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`his-tpa`.`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`his-tpa`.`case`.`close_case_option` AS `close_case_option`,`his-tpa`.`case`.`discount` AS `discount`,`his-tpa`.`case`.`original_bill_verified` AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`client_approval_for_payment` AS `client_approval_for_payment`,`his-tpa`.`case`.`payment_approval_by` AS `payment_approval_by`,`his-tpa`.`case`.`payment_approval_date` AS `payment_approval_date`,`his-tpa`.`case`.`upload_payment_approval` AS `upload_payment_approval`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`his-tpa`.`case`.`upload_payment_date` AS `upload_payment_date`,`his-tpa`.`case`.`payment_date_01` AS `payment_date_01`,`his-tpa`.`case`.`paid_by_01` AS `paid_by_01`,`his-tpa`.`case`.`upload_proof_of_payment_01` AS `upload_proof_of_payment_01`,`his-tpa`.`case`.`upload_payment_date_01` AS `upload_payment_date_01`,`his-tpa`.`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,`his-tpa`.`case`.`case_closed_date` AS `case_closed_date`,`his-tpa`.`case`.`case_closed_date_01` AS `case_closed_date_01`,`his-tpa`.`case`.`case_reopen_date` AS `case_reopen_date`,`his-tpa`.`case`.`case_reopen_date_01` AS `case_reopen_date_01`,`his-tpa`.`case`.`procced_to_worksheet` AS `procced_to_worksheet`,`his-tpa`.`case`.`case_header` AS `case_header`,`his-tpa`.`case`.`ws_error_category` AS `ws_error_category`,`his-tpa`.`case`.`ws_error_type` AS `ws_error_type`,`his-tpa`.`case`.`ws_error_remarks` AS `ws_error_remarks`,`his-tpa`.`case`.`original_bill_checked_error_category` AS `original_bill_checked_error_category`,`his-tpa`.`case`.`original_bill_checked_error_type` AS `original_bill_checked_error_type`,`his-tpa`.`case`.`original_bill_checked_error_remarks` AS `original_bill_checked_error_remarks`,`his-tpa`.`case`.`original_bill_verified_error_category` AS `original_bill_verified_error_category`,`his-tpa`.`case`.`original_bill_verified_error_type` AS `original_bill_verified_error_type`,`his-tpa`.`case`.`original_bill_verified_error_remarks` AS `original_bill_verified_error_remarks`,`his-tpa`.`case`.`is_clean` AS `is_clean`,`his-tpa`.`case`.`userlevel` AS `userlevel`,`his-tpa`.`case`.`copy_case` AS `copy_case`,`his-tpa`.`case`.`copy_case_no` AS `copy_case_no`,`his-tpa`.`case`.`copy_case_no_01` AS `copy_case_no_01`,`his-tpa`.`case`.`copy_by` AS `copy_by`,`his-tpa`.`case`.`copy_date` AS `copy_date`,`his-tpa`.`case`.`sms_send` AS `sms_send`,`his-tpa`.`case`.`sms_send_01` AS `sms_send_01`,`his-tpa`.`case`.`change_status` AS `change_status`,`his-tpa`.`case`.`change_status_01` AS `change_status_01`,`his-tpa`.`case`.`change_status_01_by` AS `change_status_01_by`,`his-tpa`.`case`.`change_status_01_date` AS `change_status_01_date`,`his-tpa`.`case`.`change_status_02` AS `change_status_02`,`his-tpa`.`case`.`change_status_02_by` AS `change_status_02_by`,`his-tpa`.`case`.`change_status_02_date` AS `change_status_02_date`,`his-tpa`.`case`.`cover_null` AS `cover_null` from (`his-tpa`.`case` left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) ;

-- ----------------------------
-- View structure for case_02
-- ----------------------------
DROP VIEW IF EXISTS `case_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_02` AS select `case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`created_by_01` AS `created_by_01`,`case`.`create_date_01` AS `create_date_01`,`case`.`source` AS `source`,`case`.`status` AS `status`,`case`.`status_01` AS `status_01`,`case`.`category` AS `category`,`case`.`type` AS `type`,`case`.`ref` AS `ref`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`gender` AS `gender`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`member_card_edc` AS `member_card_edc`,`case`.`principle` AS `principle`,`case`.`relation` AS `relation`,`case`.`mobile` AS `mobile`,`case`.`client` AS `client`,`case`.`branch` AS `branch`,`case`.`company` AS `company`,`case`.`policy_status` AS `policy_status`,`case`.`policy_no` AS `policy_no`,`case`.`policy_holder` AS `policy_holder`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,`case`.`policy_termination_date` AS `policy_termination_date`,`case`.`policy_suspend_date` AS `policy_suspend_date`,`case`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`case`.`waiting_period` AS `waiting_period`,`case`.`case_remarks` AS `case_remarks`,`case`.`averaged_cost` AS `averaged_cost`,`case`.`case_remarks_by` AS `case_remarks_by`,`case`.`case_remarks_date` AS `case_remarks_date`,`case`.`final_decision` AS `final_decision`,`case`.`los` AS `los`,`case`.`exclusion` AS `exclusion`,`case`.`special_condition` AS `special_condition`,`case`.`member_remarks` AS `member_remarks`,`case`.`member_remarks_by` AS `member_remarks_by`,`case`.`member_remarks_date` AS `member_remarks_date`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`case`.`plan_header` AS `plan_header`,`case`.`code_rawat` AS `code_rawat`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,`case`.`rider` AS `rider`,`case`.`rider_attach_date` AS `rider_attach_date`,`case`.`rider_expiry_date` AS `rider_expiry_date`,`case`.`provider` AS `provider`,`case`.`provider_email` AS `provider_email`,`case`.`other_provider` AS `other_provider`,`case`.`other_provider_city` AS `other_provider_city`,`case`.`other_provider_country` AS `other_provider_country`,`case`.`provider_cancel` AS `provider_cancel`,`case`.`id_edc` AS `id_edc`,`case`.`currency_01` AS `currency_01`,`case`.`currency_02` AS `currency_02`,`case`.`currency_rate` AS `currency_rate`,`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case`.`amount_currency_01` AS `amount_currency_01`,`case`.`admission_date` AS `admission_date`,`case`.`admission_time` AS `admission_time`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`symptom` AS `symptom`,`case`.`symptom_since` AS `symptom_since`,`case`.`vital_sign` AS `vital_sign`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`treatment_plan` AS `treatment_plan`,`case`.`upload_haf` AS `upload_haf`,`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`case`.`haf_upload_date` AS `haf_upload_date`,`case`.`upload_doc` AS `upload_doc`,`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`case`.`doc_upload_date` AS `doc_upload_date`,`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case`.`haf_doc_completed` AS `haf_doc_completed`,`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case`.`issue_initial_log` AS `issue_initial_log`,`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case`.`initial_claim_no` AS `initial_claim_no`,`case`.`initial_log_remarks` AS `initial_log_remarks`,`case`.`initial_log_approval` AS `initial_log_approval`,`case`.`initial_diagnosis_01` AS `initial_diagnosis_01`,`case`.`discharge_plan` AS `discharge_plan`,`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`discharge_doctor` AS `discharge_doctor`,`case`.`actual_treatment` AS `actual_treatment`,`case`.`diagnosis` AS `diagnosis`,`case`.`other_diagnosis` AS `other_diagnosis`,`case`.`surgery` AS `surgery`,`case`.`other_surgery` AS `other_surgery`,`case`.`bill_received` AS `bill_received`,`case`.`bill_received_by` AS `bill_received_by`,`case`.`bill_received_date` AS `bill_received_date`,`case`.`upload_bill` AS `upload_bill`,`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`case`.`bill_upload_date` AS `bill_upload_date`,`case`.`upload_bill_finished` AS `upload_bill_finished`,`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case`.`bill_completed` AS `bill_completed`,`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`case`.`bill_completed_by` AS `bill_completed_by`,`case`.`bill_completed_date` AS `bill_completed_date`,`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`case`.`ws_type` AS `ws_type`,`case`.`ws_option` AS `ws_option`,`case`.`ws_finished` AS `ws_finished`,`case`.`ws_finished_by` AS `ws_finished_by`,`case`.`ws_finished_date` AS `ws_finished_date`,`case`.`ws_approval` AS `ws_approval`,`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`case`.`ws_approval_by` AS `ws_approval_by`,`case`.`ws_approval_date` AS `ws_approval_date`,`case`.`issuance_limit` AS `issuance_limit`,`case`.`issue_log` AS `issue_log`,`case`.`issue_log_option` AS `issue_log_option`,`case`.`log_issued_by` AS `log_issued_by`,`case`.`log_issue_date` AS `log_issue_date`,`case`.`log_issued_by_01` AS `log_issued_by_01`,`case`.`log_issue_date_01` AS `log_issue_date_01`,`case`.`claim_no` AS `claim_no`,`case`.`log_remarks` AS `log_remarks`,`case`.`log_bank` AS `log_bank`,`case`.`log_bank_branch` AS `log_bank_branch`,`case`.`log_bank_city` AS `log_bank_city`,`case`.`log_bank_account_no` AS `log_bank_account_no`,`case`.`log_bank_on_behalf_of` AS `log_bank_on_behalf_of`,`case`.`log_approval` AS `log_approval`,`case`.`nonlog_reason` AS `nonlog_reason`,`case`.`nonlog_remarks` AS `nonlog_remarks`,`case`.`reject_reason` AS `reject_reason`,`case`.`nonlog_remarks_code` AS `nonlog_remarks_code`,`case`.`reject_remarks` AS `reject_remarks`,`case`.`batch_received` AS `batch_received`,`case`.`bill_no` AS `bill_no`,`case`.`bill_issue_date` AS `bill_issue_date`,`case`.`bill_due_date` AS `bill_due_date`,`case`.`upload_original_bill` AS `upload_original_bill`,`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`case`.`original_bill_upload_date_first` AS `original_bill_upload_date_first`,`case`.`original_bill_checked` AS `original_bill_checked`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case`.`close_case_option` AS `close_case_option`,`case`.`discount` AS `discount`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`client_approval_for_payment` AS `client_approval_for_payment`,`case`.`payment_approval_by` AS `payment_approval_by`,`case`.`payment_approval_date` AS `payment_approval_date`,`case`.`upload_payment_approval` AS `upload_payment_approval`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`upload_payment_date` AS `upload_payment_date`,`case`.`payment_date_01` AS `payment_date_01`,`case`.`paid_by_01` AS `paid_by_01`,`case`.`upload_proof_of_payment_01` AS `upload_proof_of_payment_01`,`case`.`upload_payment_date_01` AS `upload_payment_date_01`,`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`case_closed_date` AS `case_closed_date`,`case`.`case_closed_date_01` AS `case_closed_date_01`,`case`.`case_reopen_date` AS `case_reopen_date`,`case`.`case_reopen_date_01` AS `case_reopen_date_01`,`case`.`procced_to_worksheet` AS `procced_to_worksheet`,`case`.`case_header` AS `case_header`,`case`.`ws_error_category` AS `ws_error_category`,`case`.`ws_error_type` AS `ws_error_type`,`case`.`ws_error_remarks` AS `ws_error_remarks`,`case`.`original_bill_checked_error_category` AS `original_bill_checked_error_category`,`case`.`original_bill_checked_error_type` AS `original_bill_checked_error_type`,`case`.`original_bill_checked_error_remarks` AS `original_bill_checked_error_remarks`,`case`.`original_bill_verified_error_category` AS `original_bill_verified_error_category`,`case`.`original_bill_verified_error_type` AS `original_bill_verified_error_type`,`case`.`original_bill_verified_error_remarks` AS `original_bill_verified_error_remarks`,`case`.`is_clean` AS `is_clean`,`case`.`userlevel` AS `userlevel`,`case`.`copy_case` AS `copy_case`,`case`.`copy_case_no` AS `copy_case_no`,`case`.`copy_case_no_01` AS `copy_case_no_01`,`case`.`copy_by` AS `copy_by`,`case`.`copy_date` AS `copy_date`,`case`.`sms_send` AS `sms_send`,`case`.`sms_send_01` AS `sms_send_01`,`case`.`change_status` AS `change_status`,`case`.`change_status_01` AS `change_status_01`,`case`.`change_status_01_by` AS `change_status_01_by`,`case`.`change_status_01_date` AS `change_status_01_date`,`case`.`change_status_02` AS `change_status_02`,`case`.`change_status_02_by` AS `change_status_02_by`,`case`.`change_status_02_date` AS `change_status_02_date`,`case`.`cover_null` AS `cover_null` from `case` ;

-- ----------------------------
-- View structure for case_03
-- ----------------------------
DROP VIEW IF EXISTS `case_03`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `case_03` AS select `case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`created_by_01` AS `created_by_01`,`case`.`create_date_01` AS `create_date_01`,`case`.`status` AS `status`,`case`.`status_01` AS `status_01`,`case`.`category` AS `category`,`case`.`type` AS `type`,`case`.`ref` AS `ref`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`gender` AS `gender`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`member_card_edc` AS `member_card_edc`,`case`.`principle` AS `principle`,`case`.`relation` AS `relation`,`case`.`mobile` AS `mobile`,`case`.`client` AS `client`,`case`.`branch` AS `branch`,`case`.`company` AS `company`,`case`.`policy_status` AS `policy_status`,`case`.`policy_no` AS `policy_no`,`case`.`policy_holder` AS `policy_holder`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,`case`.`policy_termination_date` AS `policy_termination_date`,`case`.`policy_suspend_date` AS `policy_suspend_date`,`case`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`case`.`waiting_period` AS `waiting_period`,`case`.`exclusion` AS `exclusion`,`case`.`special_condition` AS `special_condition`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`case`.`plan_header` AS `plan_header`,`case`.`code_rawat` AS `code_rawat`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,`case`.`rider` AS `rider`,`case`.`rider_attach_date` AS `rider_attach_date`,`case`.`rider_expiry_date` AS `rider_expiry_date`,`case`.`provider` AS `provider`,`case`.`other_provider` AS `other_provider`,`case`.`other_provider_country` AS `other_provider_country`,`case`.`other_provider_city` AS `other_provider_city`,`case`.`currency_01` AS `currency_01`,`case`.`currency_02` AS `currency_02`,`case`.`currency_rate` AS `currency_rate`,`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case`.`amount_currency_01` AS `amount_currency_01`,`case`.`admission_date` AS `admission_date`,`case`.`admission_time` AS `admission_time`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`symptom` AS `symptom`,`case`.`symptom_since` AS `symptom_since`,`case`.`vital_sign` AS `vital_sign`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`treatment_plan` AS `treatment_plan`,`case`.`upload_haf` AS `upload_haf`,`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`case`.`haf_upload_date` AS `haf_upload_date`,`case`.`upload_doc` AS `upload_doc`,`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`case`.`doc_upload_date` AS `doc_upload_date`,`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case`.`haf_doc_completed` AS `haf_doc_completed`,`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case`.`issue_initial_log` AS `issue_initial_log`,`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case`.`initial_claim_no` AS `initial_claim_no`,`case`.`initial_log_remarks` AS `initial_log_remarks`,`case`.`initial_log_approval` AS `initial_log_approval`,`case`.`discharge_plan` AS `discharge_plan`,`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`discharge_doctor` AS `discharge_doctor`,`case`.`actual_treatment` AS `actual_treatment`,`case`.`diagnosis` AS `diagnosis`,`case`.`other_diagnosis` AS `other_diagnosis`,`case`.`surgery` AS `surgery`,`case`.`other_surgery` AS `other_surgery`,`case`.`bill_received` AS `bill_received`,`case`.`bill_received_by` AS `bill_received_by`,`case`.`bill_received_date` AS `bill_received_date`,`case`.`upload_bill` AS `upload_bill`,`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`case`.`bill_upload_date` AS `bill_upload_date`,`case`.`upload_bill_finished` AS `upload_bill_finished`,`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case`.`bill_completed` AS `bill_completed`,`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`case`.`bill_completed_by` AS `bill_completed_by`,`case`.`bill_completed_date` AS `bill_completed_date`,`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`case`.`ws_type` AS `ws_type`,`case`.`ws_option` AS `ws_option`,`case`.`ws_finished` AS `ws_finished`,`case`.`ws_finished_by` AS `ws_finished_by`,`case`.`ws_finished_date` AS `ws_finished_date`,`case`.`ws_approval` AS `ws_approval`,`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`case`.`ws_approval_by` AS `ws_approval_by`,`case`.`ws_approval_date` AS `ws_approval_date`,`case`.`issuance_limit` AS `issuance_limit`,`case`.`issue_log` AS `issue_log`,`case`.`issue_log_option` AS `issue_log_option`,`case`.`log_issued_by` AS `log_issued_by`,`case`.`log_issue_date` AS `log_issue_date`,`case`.`log_issued_by_01` AS `log_issued_by_01`,`case`.`log_issue_date_01` AS `log_issue_date_01`,`case`.`claim_no` AS `claim_no`,`case`.`log_remarks` AS `log_remarks`,`case`.`log_approval` AS `log_approval`,`case`.`nonlog_reason` AS `nonlog_reason`,`case`.`nonlog_remarks` AS `nonlog_remarks`,`case`.`reject_reason` AS `reject_reason`,`case`.`reject_remarks` AS `reject_remarks`,`case`.`batch_received` AS `batch_received`,`case`.`bill_no` AS `bill_no`,`case`.`bill_issue_date` AS `bill_issue_date`,`case`.`bill_due_date` AS `bill_due_date`,`case`.`upload_original_bill` AS `upload_original_bill`,`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`case`.`original_bill_checked` AS `original_bill_checked`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case`.`close_case_option` AS `close_case_option`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`client_approval_for_payment` AS `client_approval_for_payment`,`case`.`payment_approval_by` AS `payment_approval_by`,`case`.`payment_approval_date` AS `payment_approval_date`,`case`.`upload_payment_approval` AS `upload_payment_approval`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`upload_payment_date` AS `upload_payment_date`,`case`.`payment_date_01` AS `payment_date_01`,`case`.`paid_by_01` AS `paid_by_01`,`case`.`upload_proof_of_payment_01` AS `upload_proof_of_payment_01`,`case`.`upload_payment_date_01` AS `upload_payment_date_01`,`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`case_closed_date` AS `case_closed_date`,`case`.`case_closed_date_01` AS `case_closed_date_01`,`case`.`case_reopen_date` AS `case_reopen_date`,`case`.`case_reopen_date_01` AS `case_reopen_date_01`,`case`.`procced_to_worksheet` AS `procced_to_worksheet`,`case`.`is_clean` AS `is_clean`,`case`.`userlevel` AS `userlevel`,`case`.`log_bank` AS `log_bank`,`case`.`log_bank_branch` AS `log_bank_branch`,`case`.`log_bank_city` AS `log_bank_city`,`case`.`log_bank_account_no` AS `log_bank_account_no`,`case`.`log_bank_on_behalf_of` AS `log_bank_on_behalf_of` from `case` where `case`.`status` <> 96 ;

-- ----------------------------
-- View structure for case_04
-- ----------------------------
DROP VIEW IF EXISTS `case_04`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_04` AS select `case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`created_by_01` AS `created_by_01`,`case`.`create_date_01` AS `create_date_01`,`case`.`status` AS `status`,`case`.`status_01` AS `status_01`,`case`.`category` AS `category`,`case`.`type` AS `type`,`case`.`ref` AS `ref`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`gender` AS `gender`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`member_card_edc` AS `member_card_edc`,`case`.`principle` AS `principle`,`case`.`relation` AS `relation`,`case`.`mobile` AS `mobile`,`case`.`client` AS `client`,`case`.`branch` AS `branch`,`case`.`company` AS `company`,`case`.`policy_status` AS `policy_status`,`case`.`policy_no` AS `policy_no`,`case`.`policy_holder` AS `policy_holder`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,`case`.`policy_termination_date` AS `policy_termination_date`,`case`.`policy_suspend_date` AS `policy_suspend_date`,`case`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`case`.`waiting_period` AS `waiting_period`,`case`.`exclusion` AS `exclusion`,`case`.`special_condition` AS `special_condition`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`case`.`plan_header` AS `plan_header`,`case`.`code_rawat` AS `code_rawat`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,`case`.`rider` AS `rider`,`case`.`rider_attach_date` AS `rider_attach_date`,`case`.`rider_expiry_date` AS `rider_expiry_date`,`case`.`provider` AS `provider`,`case`.`other_provider` AS `other_provider`,`case`.`other_provider_country` AS `other_provider_country`,`case`.`other_provider_city` AS `other_provider_city`,`case`.`currency_01` AS `currency_01`,`case`.`currency_02` AS `currency_02`,`case`.`currency_rate` AS `currency_rate`,`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case`.`amount_currency_01` AS `amount_currency_01`,`case`.`admission_date` AS `admission_date`,`case`.`admission_time` AS `admission_time`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`symptom` AS `symptom`,`case`.`symptom_since` AS `symptom_since`,`case`.`vital_sign` AS `vital_sign`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`treatment_plan` AS `treatment_plan`,`case`.`upload_haf` AS `upload_haf`,`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`case`.`haf_upload_date` AS `haf_upload_date`,`case`.`upload_doc` AS `upload_doc`,`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`case`.`doc_upload_date` AS `doc_upload_date`,`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case`.`haf_doc_completed` AS `haf_doc_completed`,`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case`.`issue_initial_log` AS `issue_initial_log`,`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case`.`initial_claim_no` AS `initial_claim_no`,`case`.`initial_log_remarks` AS `initial_log_remarks`,`case`.`initial_log_approval` AS `initial_log_approval`,`case`.`discharge_plan` AS `discharge_plan`,`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`discharge_doctor` AS `discharge_doctor`,`case`.`actual_treatment` AS `actual_treatment`,`case`.`diagnosis` AS `diagnosis`,`case`.`other_diagnosis` AS `other_diagnosis`,`case`.`surgery` AS `surgery`,`case`.`other_surgery` AS `other_surgery`,`case`.`bill_received` AS `bill_received`,`case`.`bill_received_by` AS `bill_received_by`,`case`.`bill_received_date` AS `bill_received_date`,`case`.`upload_bill` AS `upload_bill`,`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`case`.`bill_upload_date` AS `bill_upload_date`,`case`.`upload_bill_finished` AS `upload_bill_finished`,`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case`.`bill_completed` AS `bill_completed`,`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`case`.`bill_completed_by` AS `bill_completed_by`,`case`.`bill_completed_date` AS `bill_completed_date`,`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`case`.`ws_type` AS `ws_type`,`case`.`ws_option` AS `ws_option`,`case`.`ws_finished` AS `ws_finished`,`case`.`ws_finished_by` AS `ws_finished_by`,`case`.`ws_finished_date` AS `ws_finished_date`,`case`.`ws_approval` AS `ws_approval`,`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`case`.`ws_approval_by` AS `ws_approval_by`,`case`.`ws_approval_date` AS `ws_approval_date`,`case`.`issuance_limit` AS `issuance_limit`,`case`.`issue_log` AS `issue_log`,`case`.`issue_log_option` AS `issue_log_option`,`case`.`log_issued_by` AS `log_issued_by`,`case`.`log_issue_date` AS `log_issue_date`,`case`.`log_issued_by_01` AS `log_issued_by_01`,`case`.`log_issue_date_01` AS `log_issue_date_01`,`case`.`claim_no` AS `claim_no`,`case`.`log_remarks` AS `log_remarks`,`case`.`log_approval` AS `log_approval`,`case`.`nonlog_reason` AS `nonlog_reason`,`case`.`nonlog_remarks` AS `nonlog_remarks`,`case`.`reject_reason` AS `reject_reason`,`case`.`reject_remarks` AS `reject_remarks`,`case`.`batch_received` AS `batch_received`,`case`.`bill_no` AS `bill_no`,`case`.`bill_issue_date` AS `bill_issue_date`,`case`.`bill_due_date` AS `bill_due_date`,`case`.`upload_original_bill` AS `upload_original_bill`,`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`case`.`original_bill_checked` AS `original_bill_checked`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case`.`close_case_option` AS `close_case_option`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`client_approval_for_payment` AS `client_approval_for_payment`,`case`.`payment_approval_by` AS `payment_approval_by`,`case`.`payment_approval_date` AS `payment_approval_date`,`case`.`upload_payment_approval` AS `upload_payment_approval`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`upload_payment_date` AS `upload_payment_date`,`case`.`payment_date_01` AS `payment_date_01`,`case`.`paid_by_01` AS `paid_by_01`,`case`.`upload_proof_of_payment_01` AS `upload_proof_of_payment_01`,`case`.`upload_payment_date_01` AS `upload_payment_date_01`,`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`case_closed_date` AS `case_closed_date`,`case`.`case_closed_date_01` AS `case_closed_date_01`,`case`.`case_reopen_date` AS `case_reopen_date`,`case`.`case_reopen_date_01` AS `case_reopen_date_01`,`case`.`procced_to_worksheet` AS `procced_to_worksheet`,`case`.`is_clean` AS `is_clean`,`case`.`userlevel` AS `userlevel` from `case` where `case`.`status` <> 96 ;

-- ----------------------------
-- View structure for case_cancel_provider
-- ----------------------------
DROP VIEW IF EXISTS `case_cancel_provider`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_cancel_provider` AS select `case`.`id` AS `id_case`,`case`.`status` AS `status`,`case`.`status_01` AS `status_01`,`case`.`provider_cancel` AS `provider_cancel` from `case` where `case`.`source` = 5 ;

-- ----------------------------
-- View structure for case_detail_cashless_equity
-- ----------------------------
DROP VIEW IF EXISTS `case_detail_cashless_equity`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_detail_cashless_equity` AS select cast(`worksheet`.`case` as char(15) charset utf8mb4) AS `claim_id`,`member`.`member_id` AS `member_id`,coalesce(cast(left(`plan_detail`.`code`,2) as char(2) charset utf8mb4),convert(`case`.`plan_header` using utf8mb4)) AS `benefit_code`,`plan_detail`.`loa_desc` AS `benefit_description`,`plan_detail`.`max_day_rate` AS `benefit_limit`,`worksheet`.`actual` AS `amt_incurred`,`worksheet`.`cover` AS `amt_approved`,`worksheet`.`excess` AS `amt_not_approved`,'01' AS `coverage_type`,`member`.`plan_external` AS `plan_id`,substr(`plan_detail`.`code`,3) AS `equity_benefit_code` from (((`worksheet` left join `case` on(`worksheet`.`case` = `case`.`id`)) left join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) left join `member` on(`case`.`patient` = `member`.`id`)) where `case`.`client` = 34 and `case`.`id` = 345652 ;

-- ----------------------------
-- View structure for case_email_notify_data
-- ----------------------------
DROP VIEW IF EXISTS `case_email_notify_data`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_email_notify_data` AS select `his-tpa`.`case`.`id` AS `case`,year(current_timestamp()) AS `years`,`his-tpa`.`case`.`patient` AS `patient`,`his-tpa`.`member`.`member_name` AS `patient_name`,concat(`his-tpa`.`case`.`id`,' | ',`his-tpa`.`member`.`member_name`,' | ',year(current_timestamp())) AS `subject`,`his-tpa`.`case`.`client` AS `client`,`client`.`full_name` AS `client_name`,`client`.`email` AS `email_to`,'operation.cashless@aa-international.co.id, helpline@aa-international.co.id, claim-support@aa-international.co.id' AS `email_cc`,'helpdesk@aa-international.co.id' AS `email_cc_01`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`plan` AS `plan`,`his-tpa`.`plan`.`name` AS `plan_name`,`his-tpa`.`member`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`dob` AS `dob`,`his-tpa`.`case`.`provider` AS `provider`,if(`his-tpa`.`case`.`provider` not in (310,2417,2462),`provider`.`full_name`,`his-tpa`.`case`.`other_provider`) AS `provider_name`,if(`his-tpa`.`case`.`provider` not in (310,2417,2462),`his-tpa`.`country`.`name`,`country_01`.`name`) AS `provider_county`,coalesce(`his-tpa`.`case`.`discharge_doctor`,`his-tpa`.`case`.`admission_doctor`) AS `doctor`,`his-tpa`.`case`.`initial_diagnosis_01` AS `initial_diagnosis` from ((((((`his-tpa`.`case` left join `his-tpa`.`member` on(`his-tpa`.`member`.`id` = `his-tpa`.`case`.`patient`)) left join `his-tpa`.`client` on(`client`.`id` = `his-tpa`.`case`.`client`)) left join `his-tpa`.`plan` on(`his-tpa`.`plan`.`id` = `his-tpa`.`case`.`plan`)) left join `his-tpa`.`provider` on(`provider`.`id` = `his-tpa`.`case`.`provider`)) left join `his-tpa`.`country` on(`his-tpa`.`country`.`id` = `provider`.`country`)) left join `his-tpa`.`country_01` on(`country_01`.`id` = `his-tpa`.`case`.`other_provider_country`)) ;

-- ----------------------------
-- View structure for case_header_cashless_equity
-- ----------------------------
DROP VIEW IF EXISTS `case_header_cashless_equity`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_header_cashless_equity` AS select `case`.`member_id` AS `member_id`,if(`case`.`type` = 2,'M','R') AS `claim_type`,cast(`case`.`id` as char(15) charset utf8mb4) AS `claim_id`,`case`.`member_id` AS `policy_number`,`member`.`member_name` AS `member_name`,coalesce(convert(`case`.`plan_header` using utf8mb4),cast(left(`plan_detail`.`code`,2) as char(2) charset utf8mb4)) AS `coverage_type`,`case`.`provider` AS `provider_code`,date_format(`case`.`admission_date`,'%d-%m-%Y') AS `admission_date`,date_format(`case`.`discharge_date`,'%d-%m-%Y') AS `discharge_date`,abs(to_days(cast(`case`.`admission_date` as date)) - to_days(cast(`case`.`discharge_date` as date))) AS `duration_days`,if(`case`.`status` >= 11 and `case`.`status` <= 30,13,if(`case`.`status` = 31,14,NULL)) AS `claim_process_status`,date_format(`case`.`log_issue_date`,'%d-%m-%Y') AS `app_date`,`case`.`log_issued_by` AS `app_by`,`case`.`diagnosis` AS `diagnosis_code`,`diagnosis`.`name` AS `diagnosis_desc`,`member`.`plan_external` AS `plan_id`,coalesce(sum(`worksheet`.`actual`),0) AS `amt_incurred`,coalesce(sum(`worksheet`.`cover`),0) AS `amt_approved`,coalesce(sum(`worksheet`.`excess`),0) AS `amt_not_approved` from (((((`case` left join `member` on(`case`.`patient` = `member`.`id`)) left join `worksheet` on(`case`.`id` = `worksheet`.`case`)) left join `country` on(`case`.`currency_01` = `country`.`id`)) left join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) join `diagnosis` on(`case`.`diagnosis` = `diagnosis`.`code`)) where `case`.`client` = 34 and `case`.`id` = 345652 group by `case`.`id` ;

-- ----------------------------
-- View structure for case_hospital_portal
-- ----------------------------
DROP VIEW IF EXISTS `case_hospital_portal`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_hospital_portal` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`client`.`full_name` AS `client`,`provider`.`full_name` AS `provider`,`his-tpa`.`case`.`member_card` AS `member_card`,`his-tpa`.`member`.`member_name` AS `patient`,`his-tpa`.`perawatan`.`name` AS `perawatan`,`his-tpa`.`case`.`status` AS `status_perawatan`,`his-tpa`.`case`.`issue_initial_log` AS `issue_initial_log`,`his-tpa`.`case`.`issue_log` AS `issue_log`,`his-tpa`.`case`.`status` AS `status`,`his-tpa`.`case`.`category` AS `category`,`his-tpa`.`case`.`source` AS `source`,`provider`.`id` AS `provider_id` from (((((`his-tpa`.`case` left join `his-tpa`.`client` on(`client`.`id` = `his-tpa`.`case`.`client`)) left join `his-tpa`.`provider` on(`provider`.`id` = `his-tpa`.`case`.`provider`)) left join `his-tpa`.`member` on(`his-tpa`.`member`.`id` = `his-tpa`.`case`.`patient`)) left join `his-tpa`.`perawatan` on(`his-tpa`.`perawatan`.`id` = `his-tpa`.`case`.`code_rawat`)) left join `his-tpa`.`status_hospital` on(`his-tpa`.`status_hospital`.`id` = `his-tpa`.`case`.`status`)) where `his-tpa`.`case`.`source` in (1,2,5) ;

-- ----------------------------
-- View structure for case_inpatient
-- ----------------------------
DROP VIEW IF EXISTS `case_inpatient`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `case_inpatient` AS select `case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`status` AS `status`,`case`.`category` AS `category`,`case`.`type` AS `type`,`case`.`ref` AS `ref`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`gender` AS `gender`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`principle` AS `principle`,`case`.`relation` AS `relation`,`case`.`mobile` AS `mobile`,`case`.`client` AS `client`,`case`.`branch` AS `branch`,`case`.`company` AS `company`,`case`.`policy_status` AS `policy_status`,`case`.`policy_no` AS `policy_no`,`case`.`policy_holder` AS `policy_holder`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,`case`.`policy_termination_date` AS `policy_termination_date`,`case`.`special_condition` AS `special_condition`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`case`.`plan_header` AS `plan_header`,`case`.`code_rawat` AS `code_rawat`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,`case`.`rider` AS `rider`,`case`.`rider_attach_date` AS `rider_attach_date`,`case`.`rider_expiry_date` AS `rider_expiry_date`,`case`.`provider` AS `provider`,`case`.`other_provider` AS `other_provider`,`case`.`currency_01` AS `currency_01`,`case`.`currency_02` AS `currency_02`,`case`.`currency_rate` AS `currency_rate`,`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case`.`amount_currency_01` AS `amount_currency_01`,`case`.`admission_date` AS `admission_date`,`case`.`admission_time` AS `admission_time`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`symptom` AS `symptom`,`case`.`symptom_since` AS `symptom_since`,`case`.`vital_sign` AS `vital_sign`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`treatment_plan` AS `treatment_plan`,`case`.`upload_haf` AS `upload_haf`,`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`case`.`haf_upload_date` AS `haf_upload_date`,`case`.`upload_doc` AS `upload_doc`,`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`case`.`doc_upload_date` AS `doc_upload_date`,`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case`.`haf_doc_completed` AS `haf_doc_completed`,`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case`.`issue_initial_log` AS `issue_initial_log`,`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case`.`initial_claim_no` AS `initial_claim_no`,`case`.`initial_log_remarks` AS `initial_log_remarks`,`case`.`initial_log_approval` AS `initial_log_approval`,`case`.`discharge_plan` AS `discharge_plan`,`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`discharge_doctor` AS `discharge_doctor`,`case`.`actual_treatment` AS `actual_treatment`,`case`.`diagnosis` AS `diagnosis`,`case`.`other_diagnosis` AS `other_diagnosis`,`case`.`exclusion` AS `exclusion`,`case`.`bill_received` AS `bill_received`,`case`.`bill_received_by` AS `bill_received_by`,`case`.`bill_received_date` AS `bill_received_date`,`case`.`upload_bill` AS `upload_bill`,`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`case`.`bill_upload_date` AS `bill_upload_date`,`case`.`upload_bill_finished` AS `upload_bill_finished`,`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case`.`bill_completed` AS `bill_completed`,`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`case`.`bill_completed_by` AS `bill_completed_by`,`case`.`bill_completed_date` AS `bill_completed_date`,`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`case`.`ws_type` AS `ws_type`,`case`.`ws_option` AS `ws_option`,`case`.`ws_finished` AS `ws_finished`,`case`.`ws_finished_by` AS `ws_finished_by`,`case`.`ws_finished_date` AS `ws_finished_date`,`case`.`ws_approval` AS `ws_approval`,`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`case`.`ws_approval_by` AS `ws_approval_by`,`case`.`ws_approval_date` AS `ws_approval_date`,`case`.`issuance_limit` AS `issuance_limit`,`case`.`issue_log` AS `issue_log`,`case`.`issue_log_option` AS `issue_log_option`,`case`.`log_issued_by` AS `log_issued_by`,`case`.`log_issue_date` AS `log_issue_date`,`case`.`log_issued_by_01` AS `log_issued_by_01`,`case`.`log_issue_date_01` AS `log_issue_date_01`,`case`.`claim_no` AS `claim_no`,`case`.`log_remarks` AS `log_remarks`,`case`.`log_approval` AS `log_approval`,`case`.`nonlog_reason` AS `nonlog_reason`,`case`.`nonlog_remarks` AS `nonlog_remarks`,`case`.`reject_reason` AS `reject_reason`,`case`.`reject_remarks` AS `reject_remarks`,`case`.`batch_received` AS `batch_received`,`case`.`bill_no` AS `bill_no`,`case`.`bill_issue_date` AS `bill_issue_date`,`case`.`bill_due_date` AS `bill_due_date`,`case`.`upload_original_bill` AS `upload_original_bill`,`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`case`.`original_bill_checked` AS `original_bill_checked`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case`.`close_case_option` AS `close_case_option`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`is_clean` AS `is_clean`,`case`.`userlevel` AS `userlevel` from `case` where `case`.`category` = 1 ;

-- ----------------------------
-- View structure for case_intsys
-- ----------------------------
DROP VIEW IF EXISTS `case_intsys`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_intsys` AS select `intsys`.`case`.`id` AS `id`,`intsys`.`case`.`tick` AS `tick`,`intsys`.`case`.`case_id` AS `case_id`,`intsys`.`case`.`status` AS `status`,`intsys`.`case`.`source` AS `source`,`intsys`.`case`.`batch_no` AS `batch_no`,`intsys`.`case`.`client` AS `client`,`intsys`.`case`.`category` AS `category`,`intsys`.`case`.`type` AS `type`,`intsys`.`case`.`payment_type` AS `payment_type`,`intsys`.`case`.`bill_to_client_date` AS `bill_to_client_date`,`intsys`.`case`.`patient_id` AS `patient_id`,`intsys`.`case`.`patient_name` AS `patient_name`,`intsys`.`case`.`principle_name` AS `principle_name`,`intsys`.`case`.`policy_holder` AS `policy_holder`,`intsys`.`case`.`provider_id` AS `provider_id`,`intsys`.`case`.`provider` AS `provider`,`intsys`.`case`.`provider_abbreviation` AS `provider_abbreviation`,`intsys`.`case`.`company` AS `company`,`intsys`.`case`.`bank` AS `bank`,`intsys`.`case`.`bank_name` AS `bank_name`,`intsys`.`case`.`account_no` AS `account_no`,`intsys`.`case`.`currency` AS `currency`,`intsys`.`case`.`actual` AS `actual`,`intsys`.`case`.`amount` AS `amount`,`intsys`.`case`.`discount` AS `discount`,`intsys`.`case`.`amount_to_pay` AS `amount_to_pay`,`intsys`.`case`.`paid_by` AS `paid_by`,`intsys`.`case`.`payment_date` AS `payment_date`,`intsys`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`intsys`.`case`.`upload_payment_date` AS `upload_payment_date`,`intsys`.`case`.`bill_no` AS `bill_no`,`intsys`.`case`.`bill_issue_date` AS `bill_issue_date`,`intsys`.`case`.`bill_due_date` AS `bill_due_date`,`intsys`.`case`.`admission_date` AS `admission_date`,`intsys`.`case`.`discharge_date` AS `discharge_date`,`intsys`.`case`.`on_behalf_of` AS `on_behalf_of`,`intsys`.`case`.`source_of_fund` AS `source_of_fund`,`intsys`.`case`.`source_of_fund_01` AS `source_of_fund_01`,`intsys`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`intsys`.`case`.`log_no` AS `log_no`,`intsys`.`case`.`service` AS `service`,`intsys`.`case`.`created_by` AS `created_by`,`intsys`.`case`.`create_date` AS `create_date`,`intsys`.`case`.`edited_by` AS `edited_by`,`intsys`.`case`.`edit_date` AS `edit_date` from `intsys`.`case` ;

-- ----------------------------
-- View structure for case_intsys_01
-- ----------------------------
DROP VIEW IF EXISTS `case_intsys_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_intsys_01` AS select 0 AS `tick`,`his-tpa`.`case`.`id` AS `case_id`,1 AS `source`,`his-tpa`.`case`.`client` AS `client`,`his-tpa`.`case`.`type` AS `type`,`his-tpa`.`case`.`category` AS `category`,`his-tpa`.`case`.`patient` AS `patient_id`,`patient`.`member_name` AS `patient_name`,`principle`.`member_name` AS `principle_name`,`patient`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`provider` AS `provider_id`,if(`his-tpa`.`case`.`provider` = 310,`his-tpa`.`case`.`other_provider`,`provider`.`full_name`) AS `provider`,if(`his-tpa`.`case`.`type` = 1,`patient`.`bank`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`bank`,'')) AS `bank_name`,if(`his-tpa`.`case`.`type` = 1,`patient`.`account_no`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`account_no`,'')) AS `account_no`,if(`his-tpa`.`case`.`type` = 1,`patient`.`on_behalf_of`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`on_behalf_of`,'')) AS `on_behalf_of`,`his-tpa`.`case`.`currency_01` AS `currency`,sum(`his-tpa`.`worksheet`.`actual`) AS `actual`,if(`his-tpa`.`case`.`issue_log_option` = 0,sum(`his-tpa`.`worksheet`.`cover`),if(`his-tpa`.`case`.`issue_log_option` = 1,sum(`his-tpa`.`worksheet`.`actual`),if(`his-tpa`.`case`.`issue_log_option` = 2,sum(`his-tpa`.`worksheet`.`actual`),0))) AS `amount`,if(`his-tpa`.`case`.`discount` is not null,`his-tpa`.`case`.`discount`,0) AS `discount`,if(`his-tpa`.`case`.`issue_log_option` = 0,sum(`his-tpa`.`worksheet`.`cover`),if(`his-tpa`.`case`.`issue_log_option` = 1,sum(`his-tpa`.`worksheet`.`actual`),if(`his-tpa`.`case`.`issue_log_option` = 2,sum(`his-tpa`.`worksheet`.`actual`),0))) - if(`his-tpa`.`case`.`discount` is not null,`his-tpa`.`case`.`discount`,0) AS `amount_to_pay`,`his-tpa`.`case`.`status` AS `status`,`his-tpa`.`case`.`issue_log_option` AS `issue_log_option`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`provider`.`abbreviation_name` AS `abbreviation_name`,`his-tpa`.`case`.`company` AS `company`,coalesce(`bank_01`.`name`,`his-tpa`.`bank`.`name`) AS `source_of_fund`,if(`his-tpa`.`company`.`account_no` is null,`client`.`account_no`,if(`his-tpa`.`company`.`account_no` = '',`client`.`account_no`,`his-tpa`.`company`.`account_no`)) AS `source_of_fund_01`,`his-tpa`.`program`.`claim_paid_by` AS `claim_paid_by`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date` from (((((((((`his-tpa`.`case` join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) join `his-tpa`.`patient` on(`patient`.`id` = `his-tpa`.`case`.`patient`)) join `his-tpa`.`principle` on(`principle`.`id` = `patient`.`member_principle`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`provider` on(`provider`.`id` = `his-tpa`.`case`.`provider`)) left join `his-tpa`.`bank` on(`client`.`bank` = `his-tpa`.`bank`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`client` = `his-tpa`.`company`.`client` and `his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`bank` `bank_01` on(`his-tpa`.`company`.`bank` = `bank_01`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`program`.`id` = `his-tpa`.`case`.`program`)) where `his-tpa`.`case`.`type` in (1,2,3) group by `his-tpa`.`worksheet`.`case` ;

-- ----------------------------
-- View structure for case_outpatient
-- ----------------------------
DROP VIEW IF EXISTS `case_outpatient`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `case_outpatient` AS select `case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`status` AS `status`,`case`.`category` AS `category`,`case`.`type` AS `type`,`case`.`ref` AS `ref`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`gender` AS `gender`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`principle` AS `principle`,`case`.`relation` AS `relation`,`case`.`mobile` AS `mobile`,`case`.`client` AS `client`,`case`.`branch` AS `branch`,`case`.`company` AS `company`,`case`.`policy_status` AS `policy_status`,`case`.`policy_no` AS `policy_no`,`case`.`policy_holder` AS `policy_holder`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,`case`.`policy_termination_date` AS `policy_termination_date`,`case`.`special_condition` AS `special_condition`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`case`.`plan_header` AS `plan_header`,`case`.`code_rawat` AS `code_rawat`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,`case`.`rider` AS `rider`,`case`.`rider_attach_date` AS `rider_attach_date`,`case`.`rider_expiry_date` AS `rider_expiry_date`,`case`.`provider` AS `provider`,`case`.`other_provider` AS `other_provider`,`case`.`currency_01` AS `currency_01`,`case`.`currency_02` AS `currency_02`,`case`.`currency_rate` AS `currency_rate`,`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case`.`amount_currency_01` AS `amount_currency_01`,`case`.`admission_date` AS `admission_date`,`case`.`admission_time` AS `admission_time`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`symptom` AS `symptom`,`case`.`symptom_since` AS `symptom_since`,`case`.`vital_sign` AS `vital_sign`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`treatment_plan` AS `treatment_plan`,`case`.`upload_haf` AS `upload_haf`,`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`case`.`haf_upload_date` AS `haf_upload_date`,`case`.`upload_doc` AS `upload_doc`,`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`case`.`doc_upload_date` AS `doc_upload_date`,`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case`.`haf_doc_completed` AS `haf_doc_completed`,`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case`.`issue_initial_log` AS `issue_initial_log`,`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case`.`initial_claim_no` AS `initial_claim_no`,`case`.`initial_log_remarks` AS `initial_log_remarks`,`case`.`initial_log_approval` AS `initial_log_approval`,`case`.`discharge_plan` AS `discharge_plan`,`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`discharge_doctor` AS `discharge_doctor`,`case`.`actual_treatment` AS `actual_treatment`,`case`.`diagnosis` AS `diagnosis`,`case`.`other_diagnosis` AS `other_diagnosis`,`case`.`exclusion` AS `exclusion`,`case`.`bill_received` AS `bill_received`,`case`.`bill_received_by` AS `bill_received_by`,`case`.`bill_received_date` AS `bill_received_date`,`case`.`upload_bill` AS `upload_bill`,`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`case`.`bill_upload_date` AS `bill_upload_date`,`case`.`upload_bill_finished` AS `upload_bill_finished`,`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case`.`bill_completed` AS `bill_completed`,`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`case`.`bill_completed_by` AS `bill_completed_by`,`case`.`bill_completed_date` AS `bill_completed_date`,`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`case`.`ws_type` AS `ws_type`,`case`.`ws_option` AS `ws_option`,`case`.`ws_finished` AS `ws_finished`,`case`.`ws_finished_by` AS `ws_finished_by`,`case`.`ws_finished_date` AS `ws_finished_date`,`case`.`ws_approval` AS `ws_approval`,`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`case`.`ws_approval_by` AS `ws_approval_by`,`case`.`ws_approval_date` AS `ws_approval_date`,`case`.`issuance_limit` AS `issuance_limit`,`case`.`issue_log` AS `issue_log`,`case`.`issue_log_option` AS `issue_log_option`,`case`.`log_issued_by` AS `log_issued_by`,`case`.`log_issue_date` AS `log_issue_date`,`case`.`log_issued_by_01` AS `log_issued_by_01`,`case`.`log_issue_date_01` AS `log_issue_date_01`,`case`.`claim_no` AS `claim_no`,`case`.`log_remarks` AS `log_remarks`,`case`.`log_approval` AS `log_approval`,`case`.`nonlog_reason` AS `nonlog_reason`,`case`.`nonlog_remarks` AS `nonlog_remarks`,`case`.`reject_reason` AS `reject_reason`,`case`.`reject_remarks` AS `reject_remarks`,`case`.`batch_received` AS `batch_received`,`case`.`bill_no` AS `bill_no`,`case`.`bill_issue_date` AS `bill_issue_date`,`case`.`bill_due_date` AS `bill_due_date`,`case`.`upload_original_bill` AS `upload_original_bill`,`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`case`.`original_bill_checked` AS `original_bill_checked`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case`.`close_case_option` AS `close_case_option`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`is_clean` AS `is_clean`,`case`.`userlevel` AS `userlevel` from `case` where `case`.`category` = 0 and `case`.`source` = 5 ;

-- ----------------------------
-- View structure for case_outpatient_01
-- ----------------------------
DROP VIEW IF EXISTS `case_outpatient_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_outpatient_01` AS select `case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`status` AS `status`,`case`.`category` AS `category`,`case`.`type` AS `type`,`case`.`ref` AS `ref`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`gender` AS `gender`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`principle` AS `principle`,`case`.`relation` AS `relation`,`case`.`mobile` AS `mobile`,`case`.`client` AS `client`,`case`.`branch` AS `branch`,`case`.`company` AS `company`,`case`.`policy_status` AS `policy_status`,`case`.`policy_no` AS `policy_no`,`case`.`policy_holder` AS `policy_holder`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,`case`.`policy_termination_date` AS `policy_termination_date`,`case`.`special_condition` AS `special_condition`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`case`.`plan_header` AS `plan_header`,`case`.`code_rawat` AS `code_rawat`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,`case`.`rider` AS `rider`,`case`.`rider_attach_date` AS `rider_attach_date`,`case`.`rider_expiry_date` AS `rider_expiry_date`,`case`.`provider` AS `provider`,`case`.`other_provider` AS `other_provider`,`case`.`currency_01` AS `currency_01`,`case`.`currency_02` AS `currency_02`,`case`.`currency_rate` AS `currency_rate`,`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case`.`amount_currency_01` AS `amount_currency_01`,`case`.`admission_date` AS `admission_date`,`case`.`admission_time` AS `admission_time`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`symptom` AS `symptom`,`case`.`symptom_since` AS `symptom_since`,`case`.`vital_sign` AS `vital_sign`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`treatment_plan` AS `treatment_plan`,`case`.`upload_haf` AS `upload_haf`,`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`case`.`haf_upload_date` AS `haf_upload_date`,`case`.`upload_doc` AS `upload_doc`,`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`case`.`doc_upload_date` AS `doc_upload_date`,`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case`.`haf_doc_completed` AS `haf_doc_completed`,`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case`.`issue_initial_log` AS `issue_initial_log`,`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case`.`initial_claim_no` AS `initial_claim_no`,`case`.`initial_log_remarks` AS `initial_log_remarks`,`case`.`initial_log_approval` AS `initial_log_approval`,`case`.`discharge_plan` AS `discharge_plan`,`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`discharge_doctor` AS `discharge_doctor`,`case`.`actual_treatment` AS `actual_treatment`,`case`.`diagnosis` AS `diagnosis`,`case`.`other_diagnosis` AS `other_diagnosis`,`case`.`exclusion` AS `exclusion`,`case`.`bill_received` AS `bill_received`,`case`.`bill_received_by` AS `bill_received_by`,`case`.`bill_received_date` AS `bill_received_date`,`case`.`upload_bill` AS `upload_bill`,`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`case`.`bill_upload_date` AS `bill_upload_date`,`case`.`upload_bill_finished` AS `upload_bill_finished`,`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case`.`bill_completed` AS `bill_completed`,`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`case`.`bill_completed_by` AS `bill_completed_by`,`case`.`bill_completed_date` AS `bill_completed_date`,`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`case`.`ws_type` AS `ws_type`,`case`.`ws_option` AS `ws_option`,`case`.`ws_finished` AS `ws_finished`,`case`.`ws_finished_by` AS `ws_finished_by`,`case`.`ws_finished_date` AS `ws_finished_date`,`case`.`ws_approval` AS `ws_approval`,`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`case`.`ws_approval_by` AS `ws_approval_by`,`case`.`ws_approval_date` AS `ws_approval_date`,`case`.`issuance_limit` AS `issuance_limit`,`case`.`issue_log` AS `issue_log`,`case`.`issue_log_option` AS `issue_log_option`,`case`.`log_issued_by` AS `log_issued_by`,`case`.`log_issue_date` AS `log_issue_date`,`case`.`log_issued_by_01` AS `log_issued_by_01`,`case`.`log_issue_date_01` AS `log_issue_date_01`,`case`.`claim_no` AS `claim_no`,`case`.`log_remarks` AS `log_remarks`,`case`.`log_approval` AS `log_approval`,`case`.`nonlog_reason` AS `nonlog_reason`,`case`.`nonlog_remarks` AS `nonlog_remarks`,`case`.`reject_reason` AS `reject_reason`,`case`.`reject_remarks` AS `reject_remarks`,`case`.`batch_received` AS `batch_received`,`case`.`bill_no` AS `bill_no`,`case`.`bill_issue_date` AS `bill_issue_date`,`case`.`bill_due_date` AS `bill_due_date`,`case`.`upload_original_bill` AS `upload_original_bill`,`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`case`.`original_bill_checked` AS `original_bill_checked`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case`.`close_case_option` AS `close_case_option`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`is_clean` AS `is_clean`,`case`.`userlevel` AS `userlevel`,`country`.`iso-4217` AS `currency`,sum(`worksheet`.`cover`) AS `cover`,sum(`worksheet`.`excess`) AS `excess`,sum(`worksheet`.`actual`) AS `actual`,`case`.`procced_to_worksheet` AS `procced_to_worksheet` from ((`case` left join `worksheet` on(`case`.`id` = `worksheet`.`case`)) left join `country` on(`case`.`currency_01` = `country`.`id`)) where `case`.`category` = 0 and `case`.`source` = 5 group by `case`.`id` ;

-- ----------------------------
-- View structure for case_outpatient_02
-- ----------------------------
DROP VIEW IF EXISTS `case_outpatient_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_outpatient_02` AS select `case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`status` AS `status`,`case`.`category` AS `category`,`case`.`type` AS `type`,`case`.`ref` AS `ref`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`gender` AS `gender`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`principle` AS `principle`,`case`.`relation` AS `relation`,`case`.`mobile` AS `mobile`,`case`.`client` AS `client`,`case`.`branch` AS `branch`,`case`.`company` AS `company`,`case`.`policy_status` AS `policy_status`,`case`.`policy_no` AS `policy_no`,`case`.`policy_holder` AS `policy_holder`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,`case`.`policy_termination_date` AS `policy_termination_date`,`case`.`special_condition` AS `special_condition`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`case`.`plan_header` AS `plan_header`,`case`.`code_rawat` AS `code_rawat`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,`case`.`rider` AS `rider`,`case`.`rider_attach_date` AS `rider_attach_date`,`case`.`rider_expiry_date` AS `rider_expiry_date`,`case`.`provider` AS `provider`,`case`.`other_provider` AS `other_provider`,`case`.`currency_01` AS `currency_01`,`case`.`currency_02` AS `currency_02`,`case`.`currency_rate` AS `currency_rate`,`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case`.`amount_currency_01` AS `amount_currency_01`,`case`.`admission_date` AS `admission_date`,`case`.`admission_time` AS `admission_time`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`symptom` AS `symptom`,`case`.`symptom_since` AS `symptom_since`,`case`.`vital_sign` AS `vital_sign`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`treatment_plan` AS `treatment_plan`,`case`.`upload_haf` AS `upload_haf`,`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`case`.`haf_upload_date` AS `haf_upload_date`,`case`.`upload_doc` AS `upload_doc`,`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`case`.`doc_upload_date` AS `doc_upload_date`,`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case`.`haf_doc_completed` AS `haf_doc_completed`,`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case`.`issue_initial_log` AS `issue_initial_log`,`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case`.`initial_claim_no` AS `initial_claim_no`,`case`.`initial_log_remarks` AS `initial_log_remarks`,`case`.`initial_log_approval` AS `initial_log_approval`,`case`.`discharge_plan` AS `discharge_plan`,`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`discharge_doctor` AS `discharge_doctor`,`case`.`actual_treatment` AS `actual_treatment`,`case`.`diagnosis` AS `diagnosis`,`case`.`other_diagnosis` AS `other_diagnosis`,`case`.`exclusion` AS `exclusion`,`case`.`bill_received` AS `bill_received`,`case`.`bill_received_by` AS `bill_received_by`,`case`.`bill_received_date` AS `bill_received_date`,`case`.`upload_bill` AS `upload_bill`,`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`case`.`bill_upload_date` AS `bill_upload_date`,`case`.`upload_bill_finished` AS `upload_bill_finished`,`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case`.`bill_completed` AS `bill_completed`,`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`case`.`bill_completed_by` AS `bill_completed_by`,`case`.`bill_completed_date` AS `bill_completed_date`,`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`case`.`ws_type` AS `ws_type`,`case`.`ws_option` AS `ws_option`,`case`.`ws_finished` AS `ws_finished`,`case`.`ws_finished_by` AS `ws_finished_by`,`case`.`ws_finished_date` AS `ws_finished_date`,`case`.`ws_approval` AS `ws_approval`,`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`case`.`ws_approval_by` AS `ws_approval_by`,`case`.`ws_approval_date` AS `ws_approval_date`,`case`.`issuance_limit` AS `issuance_limit`,`case`.`issue_log` AS `issue_log`,`case`.`issue_log_option` AS `issue_log_option`,`case`.`log_issued_by` AS `log_issued_by`,`case`.`log_issue_date` AS `log_issue_date`,`case`.`log_issued_by_01` AS `log_issued_by_01`,`case`.`log_issue_date_01` AS `log_issue_date_01`,`case`.`claim_no` AS `claim_no`,`case`.`log_remarks` AS `log_remarks`,`case`.`log_approval` AS `log_approval`,`case`.`nonlog_reason` AS `nonlog_reason`,`case`.`nonlog_remarks` AS `nonlog_remarks`,`case`.`reject_reason` AS `reject_reason`,`case`.`reject_remarks` AS `reject_remarks`,`case`.`batch_received` AS `batch_received`,`case`.`bill_no` AS `bill_no`,`case`.`bill_issue_date` AS `bill_issue_date`,`case`.`bill_due_date` AS `bill_due_date`,`case`.`upload_original_bill` AS `upload_original_bill`,`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`case`.`original_bill_checked` AS `original_bill_checked`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case`.`close_case_option` AS `close_case_option`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`is_clean` AS `is_clean`,`case`.`userlevel` AS `userlevel`,`country`.`iso-4217` AS `currency`,sum(`worksheet`.`cover`) AS `cover`,sum(`worksheet`.`excess`) AS `excess`,sum(`worksheet`.`actual`) AS `actual`,`case`.`procced_to_worksheet` AS `procced_to_worksheet` from ((`case` left join `worksheet` on(`case`.`id` = `worksheet`.`case`)) left join `country` on(`case`.`currency_01` = `country`.`id`)) where `case`.`category` = 0 group by `case`.`id` ;

-- ----------------------------
-- View structure for case_outpatient_03
-- ----------------------------
DROP VIEW IF EXISTS `case_outpatient_03`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_outpatient_03` AS select `case_outpatient`.`id` AS `id`,`case_outpatient`.`created_by` AS `created_by`,`case_outpatient`.`create_date` AS `create_date`,`case_outpatient`.`status` AS `status`,`case_outpatient`.`category` AS `category`,`case_outpatient`.`type` AS `type`,`case_outpatient`.`ref` AS `ref`,`case_outpatient`.`patient` AS `patient`,`case_outpatient`.`dob` AS `dob`,`case_outpatient`.`gender` AS `gender`,`case_outpatient`.`member_id` AS `member_id`,`case_outpatient`.`member_card` AS `member_card`,`case_outpatient`.`principle` AS `principle`,`case_outpatient`.`relation` AS `relation`,`case_outpatient`.`mobile` AS `mobile`,`case_outpatient`.`client` AS `client`,`case_outpatient`.`branch` AS `branch`,`case_outpatient`.`company` AS `company`,`case_outpatient`.`policy_status` AS `policy_status`,`case_outpatient`.`policy_no` AS `policy_no`,`case_outpatient`.`policy_holder` AS `policy_holder`,`case_outpatient`.`policy_effective_date` AS `policy_effective_date`,`case_outpatient`.`policy_expiry_date` AS `policy_expiry_date`,`case_outpatient`.`policy_issue_date` AS `policy_issue_date`,`case_outpatient`.`policy_declare_date` AS `policy_declare_date`,`case_outpatient`.`policy_lapse_date` AS `policy_lapse_date`,`case_outpatient`.`policy_revival_date` AS `policy_revival_date`,`case_outpatient`.`policy_termination_date` AS `policy_termination_date`,`case_outpatient`.`special_condition` AS `special_condition`,`case_outpatient`.`program` AS `program`,`case_outpatient`.`plan` AS `plan`,`case_outpatient`.`plan_header` AS `plan_header`,`case_outpatient`.`code_rawat` AS `code_rawat`,`case_outpatient`.`plan_attach_date` AS `plan_attach_date`,`case_outpatient`.`plan_expiry_date` AS `plan_expiry_date`,`case_outpatient`.`rider` AS `rider`,`case_outpatient`.`rider_attach_date` AS `rider_attach_date`,`case_outpatient`.`rider_expiry_date` AS `rider_expiry_date`,`case_outpatient`.`provider` AS `provider`,`case_outpatient`.`other_provider` AS `other_provider`,`case_outpatient`.`currency_01` AS `currency_01`,`case_outpatient`.`currency_02` AS `currency_02`,`case_outpatient`.`currency_rate` AS `currency_rate`,`case_outpatient`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case_outpatient`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case_outpatient`.`amount_currency_01` AS `amount_currency_01`,`case_outpatient`.`admission_date` AS `admission_date`,`case_outpatient`.`admission_time` AS `admission_time`,`case_outpatient`.`admission_doctor` AS `admission_doctor`,`case_outpatient`.`symptom` AS `symptom`,`case_outpatient`.`symptom_since` AS `symptom_since`,`case_outpatient`.`vital_sign` AS `vital_sign`,`case_outpatient`.`initial_diagnosis` AS `initial_diagnosis`,`case_outpatient`.`treatment_plan` AS `treatment_plan`,`case_outpatient`.`upload_haf` AS `upload_haf`,`case_outpatient`.`haf_uploaded_by` AS `haf_uploaded_by`,`case_outpatient`.`haf_upload_date` AS `haf_upload_date`,`case_outpatient`.`upload_doc` AS `upload_doc`,`case_outpatient`.`doc_uploaded_by` AS `doc_uploaded_by`,`case_outpatient`.`doc_upload_date` AS `doc_upload_date`,`case_outpatient`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case_outpatient`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case_outpatient`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case_outpatient`.`haf_doc_completed` AS `haf_doc_completed`,`case_outpatient`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case_outpatient`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case_outpatient`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case_outpatient`.`issue_initial_log` AS `issue_initial_log`,`case_outpatient`.`initial_log_issued_by` AS `initial_log_issued_by`,`case_outpatient`.`initial_log_issue_date` AS `initial_log_issue_date`,`case_outpatient`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case_outpatient`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case_outpatient`.`initial_claim_no` AS `initial_claim_no`,`case_outpatient`.`initial_log_remarks` AS `initial_log_remarks`,`case_outpatient`.`initial_log_approval` AS `initial_log_approval`,`case_outpatient`.`discharge_plan` AS `discharge_plan`,`case_outpatient`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case_outpatient`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case_outpatient`.`discharge_date` AS `discharge_date`,`case_outpatient`.`discharge_doctor` AS `discharge_doctor`,`case_outpatient`.`actual_treatment` AS `actual_treatment`,`case_outpatient`.`diagnosis` AS `diagnosis`,`case_outpatient`.`other_diagnosis` AS `other_diagnosis`,`case_outpatient`.`exclusion` AS `exclusion`,`case_outpatient`.`bill_received` AS `bill_received`,`case_outpatient`.`bill_received_by` AS `bill_received_by`,`case_outpatient`.`bill_received_date` AS `bill_received_date`,`case_outpatient`.`upload_bill` AS `upload_bill`,`case_outpatient`.`bill_uploaded_by` AS `bill_uploaded_by`,`case_outpatient`.`bill_upload_date` AS `bill_upload_date`,`case_outpatient`.`upload_bill_finished` AS `upload_bill_finished`,`case_outpatient`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case_outpatient`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case_outpatient`.`bill_completed` AS `bill_completed`,`case_outpatient`.`bill_completed_remarks` AS `bill_completed_remarks`,`case_outpatient`.`bill_completed_by` AS `bill_completed_by`,`case_outpatient`.`bill_completed_date` AS `bill_completed_date`,`case_outpatient`.`bill_completed_by_01` AS `bill_completed_by_01`,`case_outpatient`.`bill_completed_date_01` AS `bill_completed_date_01`,`case_outpatient`.`ws_type` AS `ws_type`,`case_outpatient`.`ws_option` AS `ws_option`,`case_outpatient`.`ws_finished` AS `ws_finished`,`case_outpatient`.`ws_finished_by` AS `ws_finished_by`,`case_outpatient`.`ws_finished_date` AS `ws_finished_date`,`case_outpatient`.`ws_approval` AS `ws_approval`,`case_outpatient`.`ws_approval_remarks` AS `ws_approval_remarks`,`case_outpatient`.`ws_approval_by` AS `ws_approval_by`,`case_outpatient`.`ws_approval_date` AS `ws_approval_date`,`case_outpatient`.`issuance_limit` AS `issuance_limit`,`case_outpatient`.`issue_log` AS `issue_log`,`case_outpatient`.`issue_log_option` AS `issue_log_option`,`case_outpatient`.`log_issued_by` AS `log_issued_by`,`case_outpatient`.`log_issue_date` AS `log_issue_date`,`case_outpatient`.`log_issued_by_01` AS `log_issued_by_01`,`case_outpatient`.`log_issue_date_01` AS `log_issue_date_01`,`case_outpatient`.`claim_no` AS `claim_no`,`case_outpatient`.`log_remarks` AS `log_remarks`,`case_outpatient`.`log_approval` AS `log_approval`,`case_outpatient`.`nonlog_reason` AS `nonlog_reason`,`case_outpatient`.`nonlog_remarks` AS `nonlog_remarks`,`case_outpatient`.`reject_reason` AS `reject_reason`,`case_outpatient`.`reject_remarks` AS `reject_remarks`,`case_outpatient`.`batch_received` AS `batch_received`,`case_outpatient`.`bill_no` AS `bill_no`,`case_outpatient`.`bill_issue_date` AS `bill_issue_date`,`case_outpatient`.`bill_due_date` AS `bill_due_date`,`case_outpatient`.`upload_original_bill` AS `upload_original_bill`,`case_outpatient`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case_outpatient`.`original_bill_upload_date` AS `original_bill_upload_date`,`case_outpatient`.`original_bill_checked` AS `original_bill_checked`,`case_outpatient`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case_outpatient`.`original_bill_checked_by` AS `original_bill_checked_by`,`case_outpatient`.`original_bill_checked_date` AS `original_bill_checked_date`,`case_outpatient`.`original_bill_checked_01` AS `original_bill_checked_01`,`case_outpatient`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case_outpatient`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case_outpatient`.`close_case_option` AS `close_case_option`,`case_outpatient`.`original_bill_verified` AS `original_bill_verified`,`case_outpatient`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case_outpatient`.`original_bill_verified_by` AS `original_bill_verified_by`,`case_outpatient`.`original_bill_verified_date` AS `original_bill_verified_date`,`case_outpatient`.`payment_date` AS `payment_date`,`case_outpatient`.`paid_by` AS `paid_by`,`case_outpatient`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case_outpatient`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case_outpatient`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case_outpatient`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case_outpatient`.`edited_by` AS `edited_by`,`case_outpatient`.`edit_date` AS `edit_date`,`case_outpatient`.`is_clean` AS `is_clean`,`case_outpatient`.`userlevel` AS `userlevel` from `case_outpatient` ;

-- ----------------------------
-- View structure for case_sms_aia
-- ----------------------------
DROP VIEW IF EXISTS `case_sms_aia`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_sms_aia` AS select `case`.`id` AS `id`,`case`.`policy_no` AS `policy_no`,if(`case`.`status` = 1,'A',if(`case`.`status` = 11,'D','UNDEFINED')) AS `TYPE`,date_format(`case`.`admission_date`,'%Y%m%d') AS `admission_date`,date_format(`case`.`discharge_date`,'%Y%m%d') AS `discharge_date`,`member`.`member_name` AS `member_name` from (`case` left join `member` on(`case`.`patient` = `member`.`id`)) where `case`.`client` = 1 and `case`.`status` in (1,11) and `case`.`plan` in (216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,748,749,750,751,752) and (date_format(`case`.`admission_date`,'%Y-%m-%d') = date_format(current_timestamp(),'%Y-%m-%d') or date_format(`case`.`discharge_date`,'%Y-%m-%d') = date_format(current_timestamp(),'%Y-%m-%d')) ;

-- ----------------------------
-- View structure for case_staging
-- ----------------------------
DROP VIEW IF EXISTS `case_staging`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `case_staging` AS select `case`.`id` AS `case`,99 AS `contact_type`,`case`.`status` AS `status`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date` from `case` ;

-- ----------------------------
-- View structure for case_status_01
-- ----------------------------
DROP VIEW IF EXISTS `case_status_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_status_01` AS select `case_status`.`id` AS `id`,`case_status`.`userlevels` AS `userlevels`,`case_status`.`status` AS `status`,`case_status`.`name` AS `name`,`case_status`.`e-reimbursement` AS `e-reimbursement` from `case_status` where `case_status`.`userlevels` = -1 and `case_status`.`status` in (86,87,88,89,97,98) ;

-- ----------------------------
-- View structure for case_status_02
-- ----------------------------
DROP VIEW IF EXISTS `case_status_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_status_02` AS select `case_status`.`id` AS `id`,`case_status`.`userlevels` AS `userlevels`,`case_status`.`status` AS `status`,`case_status`.`name` AS `name`,`case_status`.`e-reimbursement` AS `e-reimbursement` from `case_status` where `case_status`.`userlevels` = -1 ;

-- ----------------------------
-- View structure for case_status01
-- ----------------------------
DROP VIEW IF EXISTS `case_status01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `case_status01` AS select `case_status`.`id` AS `id`,`case_status`.`userlevels` AS `userlevels`,`case_status`.`status` AS `status`,`case_status`.`name` AS `name`,`case_status`.`e-reimbursement` AS `e-reimbursement` from `case_status` where `case_status`.`userlevels` = -1 ;

-- ----------------------------
-- View structure for cek_1970
-- ----------------------------
DROP VIEW IF EXISTS `cek_1970`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `cek_1970` AS select `case`.`admission_date` AS `admission_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`create_date` AS `create_date` from `case` where `case`.`source` = 6 and date_format(`case`.`admission_date`,'%Y') = '1970' ;

-- ----------------------------
-- View structure for cek_verified
-- ----------------------------
DROP VIEW IF EXISTS `cek_verified`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `cek_verified` AS select `case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`source` AS `source`,`case`.`status` AS `status`,`case_status`.`name` AS `status_name`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`client_approval_for_payment` AS `client_approval_for_payment`,`case`.`payment_approval_by` AS `payment_approval_by`,`case`.`payment_approval_date` AS `payment_approval_date`,`case`.`upload_payment_approval` AS `upload_payment_approval`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`upload_payment_date` AS `upload_payment_date`,`case`.`payment_date_01` AS `payment_date_01`,`case`.`paid_by_01` AS `paid_by_01`,`case`.`upload_proof_of_payment_01` AS `upload_proof_of_payment_01`,`case`.`upload_payment_date_01` AS `upload_payment_date_01`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`close_case_option` AS `close_case_option` from (`case` join `case_status` on(`case_status`.`status` = `case`.`status`)) where `case`.`id` in (113328,114651,117179,121678,126759,127728,134345,138182,138237,138293,138351,138486,138487,138518,138536,138688,138690,138691,152646,152996,153047,153048,153057,153068,153071,153626,153702,153706,153717,153725,153726,153730,153841) and `case_status`.`userlevels` = -1 ;

-- ----------------------------
-- View structure for Checking edc card before
-- ----------------------------
DROP VIEW IF EXISTS `Checking edc card before`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `Checking edc card before` edc card before` AS select `member`.`id` AS `id`,`member`.`member_name` AS `member_name`,`member`.`member_card` AS `member_card`,`member`.`member_card_edc` AS `member_card_edc`,`member`.`plan` AS `plan`,`member`.`plan_external` AS `plan_external` from `member` where `member`.`id` in (5413729,5401777,5401815,5401824,5402075,5402520,5413730) ;

-- ----------------------------
-- View structure for city_01
-- ----------------------------
DROP VIEW IF EXISTS `city_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`aaisys.master`@`%` SQL SECURITY DEFINER VIEW `city_01` AS select `city`.`id_region` AS `id_region`,`region`.`name` AS `region`,`city`.`id_province` AS `id_province`,`province`.`name` AS `province`,`city`.`id_city` AS `id_city`,`city`.`name` AS `city` from ((`city` left join `province` on(`province`.`id_province` = `city`.`id_province`)) left join `region` on(`region`.`id_region` = `city`.`id_region`)) ;

-- ----------------------------
-- View structure for claim_balancer_mapping
-- ----------------------------
DROP VIEW IF EXISTS `claim_balancer_mapping`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `claim_balancer_mapping` AS select 'Administrator' AS `created_by`,curdate() AS `create_date`,99 AS `status`,0 AS `category`,1 AS `type`,`claim_balancer`.`claim_ref` AS `ref`,`member`.`id` AS `patient`,`member`.`member_dob` AS `dob`,`member`.`member_gender` AS `gender`,`member`.`member_id` AS `member_id`,`member`.`member_card` AS `member_card`,`member`.`member_principle` AS `principle`,`member`.`member_relation` AS `relation`,`member`.`client` AS `client`,`member`.`branch` AS `branch`,`member`.`company` AS `company`,`member`.`policy_status` AS `policy_status`,`member`.`policy_no` AS `policy_no`,`member`.`policy_holder` AS `policy_holder`,`member`.`policy_effective_date` AS `policy_effective_date`,`member`.`policy_expiry_date` AS `policy_expiry_date`,`member`.`policy_issue_date` AS `policy_issue_date`,`member`.`policy_declare_date` AS `policy_declare_date`,`member`.`policy_lapse_date` AS `policy_lapse_date`,`member`.`policy_revival_date` AS `policy_revival_date`,`member`.`policy_termination_date` AS `policy_termination_date`,`member`.`special_condition` AS `special_condition`,`member`.`program` AS `program`,`member`.`plan` AS `plan`,NULL AS `plan_header`,`member`.`plan_attach_date` AS `plan_attach_date`,`member`.`plan_expiry_date` AS `plan_expiry_date`,NULL AS `rider`,NULL AS `rider_attach_date`,NULL AS `rider_expiry_date`,310 AS `provider`,`claim_balancer`.`hospital_name` AS `other_provider`,85 AS `currency_01`,85 AS `currency_02`,1 AS `currency_rate`,`claim_balancer`.`admission_date` AS `admission_date`,0 AS `admission_time`,NULL AS `admission_doctor`,NULL AS `symptom`,NULL AS `symptom_since`,NULL AS `vital_sign`,NULL AS `initial_diagnosis`,NULL AS `treatment_plan`,NULL AS `upload_haf`,NULL AS `haf_uploaded_by`,NULL AS `haf_upload_date`,NULL AS `upload_doc`,NULL AS `doc_uploaded_by`,NULL AS `doc_upload_date`,0 AS `upload_haf_doc_finished`,NULL AS `upload_haf_doc_finished_by`,NULL AS `upload_haf_doc_finished_date`,1 AS `haf_doc_completed`,NULL AS `haf_doc_completed_remarks`,NULL AS `haf_doc_completed_by`,NULL AS `haf_doc_completed_date`,1 AS `issue_initial_log`,NULL AS `initial_log_issued_by`,NULL AS `initial_log_issue_date`,NULL AS `initial_claim_no`,NULL AS `initial_log_remarks`,1 AS `initial_log_approval`,`claim_balancer`.`discharge_date` AS `discharge_date`,NULL AS `discharge_doctor`,NULL AS `actual_treatment`,'Z71' AS `diagnosis`,`claim_balancer`.`diagnosis` AS `other_diagnosis`,NULL AS `exclusion`,0 AS `bill_received`,NULL AS `bill_received_by`,NULL AS `bill_received_date`,NULL AS `upload_bill`,NULL AS `bill_uploaded_by`,NULL AS `bill_upload_date`,0 AS `upload_bill_finished`,NULL AS `upload_bill_finished_by`,NULL AS `upload_bill_finished_date`,1 AS `bill_completed`,NULL AS `bill_completed_remarks`,NULL AS `bill_completed_by`,NULL AS `bill_completed_date`,0 AS `ws_type`,NULL AS `ws_option`,1 AS `ws_finished`,NULL AS `ws_finished_by`,NULL AS `ws_finished_date`,3 AS `ws_approval`,NULL AS `ws_approval_remarks`,NULL AS `ws_approval_by`,NULL AS `ws_approval_date`,0 AS `issuance_limit`,2 AS `issue_log`,NULL AS `issue_log_option`,NULL AS `log_issued_by`,NULL AS `log_issue_date`,NULL AS `claim_no`,NULL AS `log_remarks`,1 AS `log_approval`,NULL AS `nonlog_reason`,NULL AS `nonlog_remarks`,NULL AS `bill_no`,NULL AS `bill_issue_date`,NULL AS `bill_due_date`,NULL AS `upload_original_bill`,NULL AS `original_bill_uploaded_by`,NULL AS `original_bill_upload_date`,4 AS `original_bill_checked`,NULL AS `original_bill_checked_remarks`,NULL AS `original_bill_checked_by`,NULL AS `original_bill_checked_date`,1 AS `close_case_option`,4 AS `original_bill_verified`,NULL AS `original_bill_verified_remarks`,NULL AS `original_bill_verified_by`,NULL AS `original_bill_verified_date`,NULL AS `payment_date`,NULL AS `paid_by`,NULL AS `upload_proof_of_payment`,1 AS `doc_send_back_to_client_required`,NULL AS `doc_send_back_to_client_date`,NULL AS `doc_received_by_client_date`,NULL AS `edited_by`,NULL AS `edit_date`,-1 AS `userlevel` from (`claim_balancer` left join `member` on(`member`.`client` = `claim_balancer`.`client` and `member`.`policy_no` = convert(if(`claim_balancer`.`client` = 16,lpad(`claim_balancer`.`policy_no`,10,0),if(`claim_balancer`.`client` = 29,lpad(`claim_balancer`.`policy_no`,8,0),`claim_balancer`.`policy_no`)) using utf8))) ;

-- ----------------------------
-- View structure for claim_imported_chui
-- ----------------------------
DROP VIEW IF EXISTS `claim_imported_chui`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `claim_imported_chui` AS select 'Administrator' AS `created_by`,curdate() AS `create_date`,99 AS `status`,0 AS `category`,1 AS `type`,`claim_ref_for_imported`.`ref` AS `ref`,`member`.`id` AS `patient`,`member`.`member_dob` AS `dob`,`member`.`member_gender` AS `gender`,`member`.`member_id` AS `member_id`,`member`.`member_card` AS `member_card`,`member`.`member_principle` AS `principle`,`member`.`member_relation` AS `relation`,`member`.`client` AS `client`,`member`.`branch` AS `branch`,`member`.`company` AS `company`,`member`.`policy_status` AS `policy_status`,`member`.`policy_no` AS `policy_no`,`member`.`policy_holder` AS `policy_holder`,`member`.`policy_effective_date` AS `policy_effective_date`,`member`.`policy_expiry_date` AS `policy_expiry_date`,`member`.`policy_issue_date` AS `policy_issue_date`,`member`.`policy_declare_date` AS `policy_declare_date`,`member`.`policy_lapse_date` AS `policy_lapse_date`,`member`.`policy_revival_date` AS `policy_revival_date`,`member`.`policy_termination_date` AS `policy_termination_date`,`member`.`special_condition` AS `special_condition`,`member`.`program` AS `program`,`member`.`plan` AS `plan`,NULL AS `plan_header`,`member`.`plan_attach_date` AS `plan_attach_date`,`member`.`plan_expiry_date` AS `plan_expiry_date`,NULL AS `rider`,NULL AS `rider_attach_date`,NULL AS `rider_expiry_date`,310 AS `provider`,NULL AS `other_provider`,85 AS `currency_01`,85 AS `currency_02`,1 AS `currency_rate`,`claim_ref_for_imported`.`admission_date` AS `admission_date`,0 AS `admission_time`,NULL AS `admission_doctor`,NULL AS `symptom`,NULL AS `symptom_since`,NULL AS `vital_sign`,NULL AS `initial_diagnosis`,NULL AS `treatment_plan`,NULL AS `upload_haf`,NULL AS `haf_uploaded_by`,NULL AS `haf_upload_date`,NULL AS `upload_doc`,NULL AS `doc_uploaded_by`,NULL AS `doc_upload_date`,0 AS `upload_haf_doc_finished`,NULL AS `upload_haf_doc_finished_by`,NULL AS `upload_haf_doc_finished_date`,1 AS `haf_doc_completed`,NULL AS `haf_doc_completed_remarks`,NULL AS `haf_doc_completed_by`,NULL AS `haf_doc_completed_date`,1 AS `issue_initial_log`,NULL AS `initial_log_issued_by`,NULL AS `initial_log_issue_date`,NULL AS `initial_claim_no`,NULL AS `initial_log_remarks`,1 AS `initial_log_approval`,`claim_ref_for_imported`.`discharge_date` AS `discharge_date`,NULL AS `discharge_doctor`,NULL AS `actual_treatment`,'Z71' AS `diagnosis`,`claim_ref_for_imported`.`other_diagnosis` AS `other_diagnosis`,NULL AS `exclusion`,0 AS `bill_received`,NULL AS `bill_received_by`,NULL AS `bill_received_date`,NULL AS `upload_bill`,NULL AS `bill_uploaded_by`,NULL AS `bill_upload_date`,0 AS `upload_bill_finished`,NULL AS `upload_bill_finished_by`,NULL AS `upload_bill_finished_date`,1 AS `bill_completed`,NULL AS `bill_completed_remarks`,NULL AS `bill_completed_by`,NULL AS `bill_completed_date`,0 AS `ws_type`,NULL AS `ws_option`,1 AS `ws_finished`,NULL AS `ws_finished_by`,NULL AS `ws_finished_date`,3 AS `ws_approval`,NULL AS `ws_approval_remarks`,NULL AS `ws_approval_by`,NULL AS `ws_approval_date`,0 AS `issuance_limit`,2 AS `issue_log`,NULL AS `issue_log_option`,NULL AS `log_issued_by`,NULL AS `log_issue_date`,NULL AS `claim_no`,NULL AS `log_remarks`,1 AS `log_approval`,NULL AS `nonlog_reason`,NULL AS `nonlog_remarks`,NULL AS `bill_no`,NULL AS `bill_issue_date`,NULL AS `bill_due_date`,NULL AS `upload_original_bill`,NULL AS `original_bill_uploaded_by`,NULL AS `original_bill_upload_date`,4 AS `original_bill_checked`,NULL AS `original_bill_checked_remarks`,NULL AS `original_bill_checked_by`,NULL AS `original_bill_checked_date`,1 AS `close_case_option`,4 AS `original_bill_verified`,NULL AS `original_bill_verified_remarks`,NULL AS `original_bill_verified_by`,NULL AS `original_bill_verified_date`,NULL AS `payment_date`,NULL AS `paid_by`,NULL AS `upload_proof_of_payment`,1 AS `doc_send_back_to_client_required`,NULL AS `doc_send_back_to_client_date`,NULL AS `doc_received_by_client_date`,NULL AS `edited_by`,NULL AS `edit_date`,-1 AS `userlevel` from (`claim_ref_for_imported` left join `member` on(`member`.`id` = `claim_ref_for_imported`.`patient`)) ;

-- ----------------------------
-- View structure for client
-- ----------------------------
DROP VIEW IF EXISTS `client`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client` AS select `intsys`.`client`.`id` AS `id`,`intsys`.`client`.`status` AS `status`,`intsys`.`client`.`full_name` AS `full_name`,`intsys`.`client`.`abbreviation_name` AS `abbreviation_name`,`intsys`.`client`.`service` AS `category`,`intsys`.`client`.`effective_date` AS `effective_date`,`intsys`.`client`.`expiry_date` AS `expiry_date`,`intsys`.`client`.`address` AS `address`,`intsys`.`client`.`country` AS `country`,`intsys`.`client`.`province` AS `province`,`intsys`.`client`.`city` AS `city`,`intsys`.`client`.`postal` AS `postal`,`intsys`.`client`.`phone` AS `phone`,`intsys`.`client`.`fax` AS `fax`,`intsys`.`client`.`email` AS `email`,`intsys`.`client`.`website` AS `website`,`intsys`.`client`.`bank` AS `bank`,`intsys`.`client`.`location` AS `location`,`intsys`.`client`.`account_no` AS `account_no`,`intsys`.`client`.`on_behalf_of` AS `on_behalf_of`,`intsys`.`client`.`benefit_table` AS `benefit_table`,`intsys`.`client`.`waiting_period` AS `waiting_period`,`intsys`.`client`.`conditions_polis` AS `conditions_polis`,`intsys`.`client`.`created_by` AS `created_by`,`intsys`.`client`.`create_date` AS `create_date`,`intsys`.`client`.`edited_by` AS `edited_by`,`intsys`.`client`.`edit_date` AS `edit_date`,`intsys`.`client`.`swipecard` AS `swipecard`,`intsys`.`client`.`condition_polis` AS `condition_polis` from `intsys`.`client` where `intsys`.`client`.`client_flag` = 1 ;

-- ----------------------------
-- View structure for client_01
-- ----------------------------
DROP VIEW IF EXISTS `client_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_01` AS select `intsys`.`client`.`id` AS `id`,`intsys`.`client`.`status` AS `status`,`intsys`.`client`.`full_name` AS `full_name`,`intsys`.`client`.`abbreviation_name` AS `abbreviation_name`,`intsys`.`client`.`service` AS `category`,`intsys`.`client`.`effective_date` AS `effective_date`,`intsys`.`client`.`expiry_date` AS `expiry_date`,`intsys`.`client`.`address` AS `address`,`intsys`.`client`.`country` AS `country`,`intsys`.`client`.`province` AS `province`,`intsys`.`client`.`city` AS `city`,`intsys`.`client`.`postal` AS `postal`,`intsys`.`client`.`phone` AS `phone`,`intsys`.`client`.`fax` AS `fax`,`intsys`.`client`.`email` AS `email`,`intsys`.`client`.`website` AS `website`,`intsys`.`client`.`bank` AS `bank`,`intsys`.`client`.`location` AS `location`,`intsys`.`client`.`account_no` AS `account_no`,`intsys`.`client`.`on_behalf_of` AS `on_behalf_of`,`intsys`.`client`.`benefit_table` AS `benefit_table`,`intsys`.`client`.`waiting_period` AS `waiting_period`,`intsys`.`client`.`conditions_polis` AS `conditions_polis`,`intsys`.`client`.`created_by` AS `created_by`,`intsys`.`client`.`create_date` AS `create_date`,`intsys`.`client`.`edited_by` AS `edited_by`,`intsys`.`client`.`edit_date` AS `edit_date`,`intsys`.`client`.`swipecard` AS `swipecard`,`intsys`.`client`.`condition_polis` AS `condition_polis` from `intsys`.`client` where `intsys`.`client`.`client_flag` = 1 ;

-- ----------------------------
-- View structure for client_02
-- ----------------------------
DROP VIEW IF EXISTS `client_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_02` AS select `intsys`.`client`.`type` AS `type`,`intsys`.`client`.`category` AS `category`,`intsys`.`client`.`service` AS `service`,`intsys`.`client`.`status` AS `status`,`intsys`.`client`.`id` AS `id`,`intsys`.`client`.`id_ima` AS `id_ima`,`intsys`.`client`.`id_roadside` AS `id_roadside`,`intsys`.`client`.`full_name` AS `full_name`,`intsys`.`client`.`abbreviation_name` AS `abbreviation_name`,`intsys`.`client`.`attention` AS `attention`,`intsys`.`client`.`effective_date` AS `effective_date`,`intsys`.`client`.`expiry_date` AS `expiry_date`,`intsys`.`client`.`address` AS `address`,`intsys`.`client`.`country` AS `country`,`intsys`.`client`.`province` AS `province`,`intsys`.`client`.`province_01` AS `province_01`,`intsys`.`client`.`city` AS `city`,`intsys`.`client`.`city_01` AS `city_01`,`intsys`.`client`.`postal` AS `postal`,`intsys`.`client`.`contact_summary` AS `contact_summary`,`intsys`.`client`.`phone` AS `phone`,`intsys`.`client`.`other_phone` AS `other_phone`,`intsys`.`client`.`fax` AS `fax`,`intsys`.`client`.`email` AS `email`,`intsys`.`client`.`website` AS `website`,`intsys`.`client`.`bank` AS `bank`,`intsys`.`client`.`location` AS `location`,`intsys`.`client`.`account_no` AS `account_no`,`intsys`.`client`.`currency` AS `currency`,`intsys`.`client`.`on_behalf_of` AS `on_behalf_of`,`intsys`.`client`.`benefit_table` AS `benefit_table`,`intsys`.`client`.`waiting_period` AS `waiting_period`,`intsys`.`client`.`conditions_polis` AS `conditions_polis`,`intsys`.`client`.`created_by` AS `created_by`,`intsys`.`client`.`create_date` AS `create_date`,`intsys`.`client`.`edited_by` AS `edited_by`,`intsys`.`client`.`edit_date` AS `edit_date`,`intsys`.`client`.`service_remarks` AS `service_remarks`,`intsys`.`client`.`client_flag` AS `client_flag`,`intsys`.`client`.`program` AS `program`,`intsys`.`client`.`client_group` AS `client_group`,`intsys`.`client`.`client_sub_group` AS `client_sub_group`,`intsys`.`client`.`area_01` AS `area_01`,`intsys`.`client`.`area_02` AS `area_02`,`intsys`.`client`.`area_03` AS `area_03`,`intsys`.`client`.`swipecard` AS `swipecard`,`intsys`.`client`.`sending_invoice_expiry` AS `sending_invoice_expiry`,`intsys`.`client`.`payment_penalty` AS `payment_penalty`,`intsys`.`client`.`condition_polis` AS `condition_polis`,`intsys`.`client`.`dline` AS `dline` from `intsys`.`client` where `intsys`.`client`.`client_flag` = 1 ;

-- ----------------------------
-- View structure for client_activity
-- ----------------------------
DROP VIEW IF EXISTS `client_activity`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_activity` AS select `intsys`.`client_activity`.`client` AS `client`,`intsys`.`client_activity`.`id` AS `id`,`intsys`.`client_activity`.`date` AS `date`,`intsys`.`client_activity`.`time` AS `time`,`intsys`.`client_activity`.`venue` AS `venue`,`intsys`.`client_activity`.`subject` AS `subject`,`intsys`.`client_activity`.`prepared_by` AS `prepared_by`,`intsys`.`client_activity`.`participants` AS `participants`,`intsys`.`client_activity`.`attachment` AS `attachment` from `intsys`.`client_activity` ;

-- ----------------------------
-- View structure for client_activiy_detail
-- ----------------------------
DROP VIEW IF EXISTS `client_activiy_detail`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_activiy_detail` AS select `intsys`.`client_activity_detail`.`client` AS `client`,`intsys`.`client_activity_detail`.`activity` AS `activity`,`intsys`.`client_activity_detail`.`id` AS `id`,`intsys`.`client_activity_detail`.`subject` AS `subject`,`intsys`.`client_activity_detail`.`description` AS `description`,`intsys`.`client_activity_detail`.`person_in_charge` AS `person_in_charge`,`intsys`.`client_activity_detail`.`due_date` AS `due_date`,`intsys`.`client_activity_detail`.`progress` AS `progress`,`intsys`.`client_activity_detail`.`progress_status` AS `progress_status`,`intsys`.`client_activity_detail`.`created_by` AS `created_by`,`intsys`.`client_activity_detail`.`create_date` AS `create_date` from `intsys`.`client_activity_detail` ;

-- ----------------------------
-- View structure for client_benefit
-- ----------------------------
DROP VIEW IF EXISTS `client_benefit`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_benefit` AS select `intsys`.`client_benefit`.`client` AS `client`,`intsys`.`client_benefit`.`id` AS `id`,`intsys`.`client_benefit`.`name` AS `name`,`intsys`.`client_benefit`.`upload_by` AS `upload_by`,`intsys`.`client_benefit`.`upload_date` AS `upload_date` from `intsys`.`client_benefit` ;

-- ----------------------------
-- View structure for client_history
-- ----------------------------
DROP VIEW IF EXISTS `client_history`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_history` AS select `intsys`.`client_history`.`client` AS `client`,`intsys`.`client_history`.`id` AS `id`,`intsys`.`client_history`.`date` AS `date`,`intsys`.`client_history`.`type` AS `type`,`intsys`.`client_history`.`subject` AS `subject`,`intsys`.`client_history`.`description` AS `description`,`intsys`.`client_history`.`upload_file` AS `upload_file`,`intsys`.`client_history`.`created_by` AS `created_by`,`intsys`.`client_history`.`create_date` AS `create_date` from `intsys`.`client_history` ;

-- ----------------------------
-- View structure for client_hospital_portal
-- ----------------------------
DROP VIEW IF EXISTS `client_hospital_portal`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_hospital_portal` AS select `client`.`id` AS `id`,`client`.`status` AS `status`,`client`.`full_name` AS `full_name`,`client`.`abbreviation_name` AS `abbreviation_name`,`client`.`category` AS `category`,`client`.`effective_date` AS `effective_date`,`client`.`expiry_date` AS `expiry_date`,`client`.`address` AS `address`,`client`.`country` AS `country`,`client`.`province` AS `province`,`client`.`city` AS `city`,`client`.`postal` AS `postal`,`client`.`phone` AS `phone`,`client`.`fax` AS `fax`,`client`.`email` AS `email`,`client`.`website` AS `website`,`client`.`bank` AS `bank`,`client`.`location` AS `location`,`client`.`account_no` AS `account_no`,`client`.`on_behalf_of` AS `on_behalf_of`,`client`.`benefit_table` AS `benefit_table`,`client`.`waiting_period` AS `waiting_period`,`client`.`conditions_polis` AS `conditions_polis`,`client`.`created_by` AS `created_by`,`client`.`create_date` AS `create_date`,`client`.`edited_by` AS `edited_by`,`client`.`edit_date` AS `edit_date` from `his-tpa`.`client` where `client`.`id` in (6,8,14,28,30,35,36,37,38,263,282,283,284,285,288,289,293,369,378,380,389,401,402) ;

-- ----------------------------
-- View structure for client_other_doc
-- ----------------------------
DROP VIEW IF EXISTS `client_other_doc`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_other_doc` AS select `intsys`.`client_other_doc`.`client` AS `client`,`intsys`.`client_other_doc`.`id` AS `id`,`intsys`.`client_other_doc`.`name` AS `name`,`intsys`.`client_other_doc`.`uploaded_by` AS `uploaded_by`,`intsys`.`client_other_doc`.`uploaded_date` AS `uploaded_date` from `intsys`.`client_other_doc` ;

-- ----------------------------
-- View structure for client_policy_wording
-- ----------------------------
DROP VIEW IF EXISTS `client_policy_wording`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_policy_wording` AS select `intsys`.`client_policy_wording`.`client` AS `client`,`intsys`.`client_policy_wording`.`id` AS `id`,`intsys`.`client_policy_wording`.`name` AS `name`,`intsys`.`client_policy_wording`.`uploaded_date` AS `uploaded_date`,`intsys`.`client_policy_wording`.`uploaded_by` AS `uploaded_by` from `intsys`.`client_policy_wording` ;

-- ----------------------------
-- View structure for client_reject_code
-- ----------------------------
DROP VIEW IF EXISTS `client_reject_code`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `client_reject_code` AS select `intsys`.`client_reject_code`.`client` AS `client`,`intsys`.`client_reject_code`.`id` AS `id`,`intsys`.`client_reject_code`.`code` AS `code`,`intsys`.`client_reject_code`.`name` AS `name` from `intsys`.`client_reject_code` ;

-- ----------------------------
-- View structure for code_bluebird
-- ----------------------------
DROP VIEW IF EXISTS `code_bluebird`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `code_bluebird` AS select length(`plan_detail`.`code_hospital_portal`) AS `count`,`plan_detail`.`client` AS `client`,`plan_detail`.`plan` AS `plan`,`plan_detail`.`header` AS `header`,`plan_detail`.`id` AS `plan_detail`,cast(substring_index(substring_index(`plan_detail`.`code_hospital_portal`,',',`numbers_split`.`n`),',',-1) as signed) AS `code_hospital_portal` from (`numbers_split` join `plan_detail` on(char_length(`plan_detail`.`code_hospital_portal`) - char_length(replace(`plan_detail`.`code_hospital_portal`,',','')) >= `numbers_split`.`n` - 1)) where `plan_detail`.`client` in (36,6,38) order by `plan_detail`.`id`,`numbers_split`.`n` ;

-- ----------------------------
-- View structure for commlife_mapping
-- ----------------------------
DROP VIEW IF EXISTS `commlife_mapping`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `commlife_mapping` AS select `member`.`client` AS `client`,`member`.`branch` AS `branch`,`member`.`company` AS `company`,`member`.`id` AS `id`,`member`.`member_name` AS `member_name`,`member`.`member_id` AS `member_id`,`member`.`member_card` AS `member_card`,`member`.`member_dob` AS `member_dob`,`member`.`member_gender` AS `member_gender`,`member`.`member_marital` AS `member_marital`,`member`.`member_address` AS `member_address`,`member`.`member_country` AS `member_country`,`member`.`member_province` AS `member_province`,`member`.`member_city` AS `member_city`,`member`.`member_postal` AS `member_postal`,`member`.`member_phone` AS `member_phone`,`member`.`member_mobile` AS `member_mobile`,`member`.`member_email` AS `member_email`,`member`.`member_password` AS `member_password`,`member`.`member_relation` AS `member_relation`,`member`.`member_principle` AS `member_principle`,`member`.`policy_no` AS `policy_no`,`member`.`policy_holder` AS `policy_holder`,`member`.`policy_issue_date` AS `policy_issue_date`,`member`.`policy_declare_date` AS `policy_declare_date`,`member`.`policy_effective_date` AS `policy_effective_date`,`member`.`policy_expiry_date` AS `policy_expiry_date`,`member`.`policy_lapse_date` AS `policy_lapse_date`,`member`.`policy_revival_date` AS `policy_revival_date`,`member`.`policy_termination_date` AS `policy_termination_date`,`member`.`policy_status` AS `policy_status`,`member`.`program` AS `program`,`member`.`plan` AS `plan`,`member`.`plan_external` AS `plan_external`,`member`.`plan_attach_date` AS `plan_attach_date`,`member`.`plan_expiry_date` AS `plan_expiry_date`,`member`.`rider` AS `rider`,`member`.`rider_attach_date` AS `rider_attach_date`,`member`.`rider_expiry_date` AS `rider_expiry_date`,`member`.`special_condition` AS `special_condition`,`member`.`exclusion` AS `exclusion`,`member`.`bank` AS `bank`,`member`.`location` AS `location`,`member`.`account_no` AS `account_no`,`member`.`on_behalf_of` AS `on_behalf_of`,`member`.`medisclick_activation` AS `medisclick_activation`,`member`.`created_by` AS `created_by`,`member`.`create_date` AS `create_date`,`member`.`edited_by` AS `edited_by`,`member`.`edit_date` AS `edit_date`,`member`.`member_username` AS `member_username`,`member`.`member_name_encrypt` AS `member_name_encrypt`,`member`.`member_dob_encrypt` AS `member_dob_encrypt`,`member`.`member_phone_encrypt` AS `member_phone_encrypt`,`member`.`flag_login_medisclick` AS `flag_login_medisclick` from `member` where `member`.`client` = 31 and `member`.`member_name` = `member`.`policy_holder` ;

-- ----------------------------
-- View structure for country_01
-- ----------------------------
DROP VIEW IF EXISTS `country_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `country_01` AS select `country`.`id` AS `id`,`country`.`name` AS `name`,`country`.`currency` AS `currency`,`country`.`iso-4217` AS `iso-4217`,`country`.`continent` AS `continent` from `country` ;

-- ----------------------------
-- View structure for cover_per_program
-- ----------------------------
DROP VIEW IF EXISTS `cover_per_program`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `cover_per_program` AS select `case`.`program` AS `program`,coalesce(sum(`worksheet`.`cover`),0) AS `cover` from (`case` left join `worksheet` on(`case`.`id` = `worksheet`.`case`)) where `case`.`status` < 31 group by `case`.`program` order by NULL ;

-- ----------------------------
-- View structure for critical_illness_sunlife
-- ----------------------------
DROP VIEW IF EXISTS `critical_illness_sunlife`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `critical_illness_sunlife` AS select `case`.`id` AS `id`,`case_status`.`name` AS `status`,`case`.`create_date` AS `create_date`,concat(`case`.`admission_date`,' ',`case`.`admission_time`) AS `admission_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`patient` AS `patient`,`member`.`member_name` AS `member_name`,`case`.`policy_no` AS `policy_no`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,if(`case`.`policy_status` = 1,'Active','Non-Active') AS `policy_status`,`program`.`name` AS `program`,`plan`.`name` AS `plan`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,date_format(`case`.`payment_date`,'%Y-%m-%d') AS `payment_date`,date_format(`case`.`client_approval_for_payment`,'%Y-%m-%d') AS `client_approval_for_payment` from ((((`case` left join `case_status` on(`case`.`status` = `case_status`.`status`)) left join `member` on(`case`.`patient` = `member`.`id`)) left join `program` on(`case`.`program` = `program`.`id`)) left join `plan` on(`case`.`plan` = `plan`.`id`)) where `case_status`.`userlevels` = -1 and `case`.`client` = 19 and `case`.`program` = 68 and `case`.`status` not between 31 and 99 ;

-- ----------------------------
-- View structure for daily_aiaf
-- ----------------------------
DROP VIEW IF EXISTS `daily_aiaf`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `daily_aiaf` AS select `her-tpa`.`daily_aiaf`.`claim_no` AS `claim_no`,`her-tpa`.`daily_aiaf`.`sequence_no` AS `sequence_no`,`her-tpa`.`daily_aiaf`.`pre_/_post-hosp_claim_no` AS `pre_/_post-hosp_claim_no`,`her-tpa`.`daily_aiaf`.`id` AS `id`,`her-tpa`.`daily_aiaf`.`policy_no` AS `policy_no`,`her-tpa`.`daily_aiaf`.`client_no` AS `client_no`,`her-tpa`.`daily_aiaf`.`policy_insured` AS `policy_insured`,`her-tpa`.`daily_aiaf`.`product_code` AS `product_code`,`her-tpa`.`daily_aiaf`.`branch_code` AS `branch_code`,`her-tpa`.`daily_aiaf`.`branch_desc` AS `branch_desc`,`her-tpa`.`daily_aiaf`.`date_of_submit` AS `date_of_submit`,`her-tpa`.`daily_aiaf`.`claim_type` AS `claim_type`,`her-tpa`.`daily_aiaf`.`date_of_admission` AS `date_of_admission`,`her-tpa`.`daily_aiaf`.`date_of_released` AS `date_of_released`,`her-tpa`.`daily_aiaf`.`name_of_hospital` AS `name_of_hospital`,`her-tpa`.`daily_aiaf`.`cause_of_claim` AS `cause_of_claim`,`her-tpa`.`daily_aiaf`.`claim_incurred` AS `claim_incurred`,`her-tpa`.`daily_aiaf`.`currency` AS `currency`,`her-tpa`.`daily_aiaf`.`claim_status` AS `claim_status`,`her-tpa`.`daily_aiaf`.`claim_accepted` AS `claim_accepted`,`her-tpa`.`daily_aiaf`.`amount_paid` AS `amount_paid`,`her-tpa`.`daily_aiaf`.`amount_reject` AS `amount_reject`,`her-tpa`.`daily_aiaf`.`paid_to` AS `paid_to`,`her-tpa`.`daily_aiaf`.`account_no` AS `account_no`,`her-tpa`.`daily_aiaf`.`name_of_bank` AS `name_of_bank`,`her-tpa`.`daily_aiaf`.`bank_branch` AS `bank_branch`,`her-tpa`.`daily_aiaf`.`city` AS `city`,`her-tpa`.`daily_aiaf`.`date_of_reject` AS `date_of_reject`,`her-tpa`.`daily_aiaf`.`date_of_complete` AS `date_of_complete`,`her-tpa`.`daily_aiaf`.`claim_note` AS `claim_note`,`her-tpa`.`daily_aiaf`.`remarks` AS `remarks`,`her-tpa`.`daily_aiaf`.`rcd_policy` AS `rcd_policy`,`her-tpa`.`daily_aiaf`.`date_of_reinstatement` AS `date_of_reinstatement`,`her-tpa`.`daily_aiaf`.`old_plan` AS `old_plan`,`her-tpa`.`daily_aiaf`.`old_plan_rcd` AS `old_plan_rcd`,`her-tpa`.`daily_aiaf`.`active_plan` AS `active_plan`,`her-tpa`.`daily_aiaf`.`active_plan_rcd` AS `active_plan_rcd`,`her-tpa`.`daily_aiaf`.`active_plan_status` AS `active_plan_status`,`her-tpa`.`daily_aiaf`.`days_approved` AS `days_approved`,`her-tpa`.`daily_aiaf`.`filter_01` AS `filter_01`,`her-tpa`.`daily_aiaf`.`case` AS `case` from `her-tpa`.`daily_aiaf` ;

-- ----------------------------
-- View structure for daily_detail_acei
-- ----------------------------
DROP VIEW IF EXISTS `daily_detail_acei`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `daily_detail_acei` AS select if(`case`.`type` = 1,cast(`case`.`original_bill_upload_date` as date),if(`case`.`type` = 2,cast(`case`.`bill_upload_date` as date),if(`case`.`type` = 3,cast(`case`.`bill_upload_date` as date),if(`case`.`type` = 4,cast(`case`.`original_bill_upload_date` as date),NULL)))) AS `filter_01`,`case`.`id` AS `case`,`worksheet`.`detail` AS `detail`,right(left(`plan`.`name`,6),1) AS `plan`,`case`.`policy_no` AS `policy_no`,`plan_detail`.`name` AS `benefit`,sum(`worksheet`.`actual`) AS `actual`,sum(`worksheet`.`cover`) AS `cover`,sum(`worksheet`.`excess`) AS `excess`,if(`worksheet`.`remarks` = '','Null',`worksheet`.`remarks`) AS `remarks` from (((`case` join `plan` on(`case`.`plan` = `plan`.`id`)) join `worksheet` on(`case`.`id` = `worksheet`.`case`)) join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) where `case`.`client` = 16 and if(`case`.`type` = 1,`case`.`original_bill_upload_date`,if(`case`.`type` = 2,`case`.`bill_upload_date`,if(`case`.`type` = 3,`case`.`bill_upload_date`,if(`case`.`type` = 4,`case`.`original_bill_upload_date`,NULL)))) is not null group by `case`.`id`,`worksheet`.`detail` ;

-- ----------------------------
-- View structure for daily_header_acei
-- ----------------------------
DROP VIEW IF EXISTS `daily_header_acei`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `daily_header_acei` AS select if(`his-tpa`.`case`.`type` = 1,cast(`his-tpa`.`case`.`original_bill_upload_date` as date),if(`his-tpa`.`case`.`type` = 2,cast(`his-tpa`.`case`.`bill_upload_date` as date),if(`his-tpa`.`case`.`type` = 3,cast(`his-tpa`.`case`.`bill_upload_date` as date),if(`his-tpa`.`case`.`type` = 4,cast(`his-tpa`.`case`.`original_bill_upload_date` as date),NULL)))) AS `filter_01`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`member`.`member_name` AS `patient`,if(`his-tpa`.`case`.`type` = 2,'IHSR-C','IHSR-R') AS `type`,`his-tpa`.`case`.`id` AS `case`,`provider`.`full_name` AS `provider`,date_format(`his-tpa`.`case`.`admission_date`,'%d/%m/%Y') AS `admission_date`,date_format(`his-tpa`.`case`.`discharge_date`,'%d/%m/%Y') AS `discharge_date`,to_days(`his-tpa`.`case`.`discharge_date`) - to_days(`his-tpa`.`case`.`admission_date`) AS `days_of_treatment`,right(left(`his-tpa`.`plan`.`name`,6),1) AS `plan`,`worksheet_header`.`total_actual` AS `total_actual`,`worksheet_header`.`total_cover` AS `total_cover`,`worksheet_header`.`total_excess` AS `total_excess`,concat(`his-tpa`.`case`.`diagnosis`,', ',`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,'N.A. (Not Applicable)' AS `tpa_type`,`his-tpa`.`branch`.`name` AS `branch` from ((((((`his-tpa`.`case` join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) join `his-tpa`.`worksheet_header` on(`his-tpa`.`case`.`id` = `worksheet_header`.`case`)) join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) where `his-tpa`.`case`.`client` = 16 and if(`his-tpa`.`case`.`type` = 1,`his-tpa`.`case`.`original_bill_upload_date`,if(`his-tpa`.`case`.`type` = 2,`his-tpa`.`case`.`bill_upload_date`,if(`his-tpa`.`case`.`type` = 3,`his-tpa`.`case`.`bill_upload_date`,if(`his-tpa`.`case`.`type` = 4,`his-tpa`.`case`.`original_bill_upload_date`,NULL)))) is not null ;

-- ----------------------------
-- View structure for delivery_batch_01
-- ----------------------------
DROP VIEW IF EXISTS `delivery_batch_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `delivery_batch_01` AS select `delivery_batch`.`client` AS `client`,`delivery_batch`.`id` AS `id`,`delivery_batch`.`case` AS `case`,`delivery_batch`.`received_by_client` AS `received_by_client`,`delivery_batch`.`created_by` AS `created_by`,`delivery_batch`.`create_date` AS `create_date`,`delivery_batch`.`edited_by` AS `edited_by`,`delivery_batch`.`edit_date` AS `edit_date` from `delivery_batch` ;

-- ----------------------------
-- View structure for diagnosis_02
-- ----------------------------
DROP VIEW IF EXISTS `diagnosis_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `diagnosis_02` AS select `diagnosis`.`id` AS `id`,`diagnosis`.`code` AS `code`,`diagnosis`.`edc_code` AS `edc_code`,`diagnosis`.`name` AS `name` from `diagnosis` where `diagnosis`.`code` <> '123' and `diagnosis`.`code` <> '9999' and `diagnosis`.`code` <> '999999' and `diagnosis`.`code` <> '123456' and `diagnosis`.`icd` = 10 and `diagnosis`.`edc_code` is not null ;

-- ----------------------------
-- View structure for email
-- ----------------------------
DROP VIEW IF EXISTS `email`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `email` AS select `his-tpa`.`users_hospital`.`username` AS `username`,`provider`.`full_name` AS `full_name`,`provider`.`email` AS `email`,`provider`.`id` AS `id` from (`his-tpa`.`users_hospital` join `his-tpa`.`provider` on(`provider`.`id` = `his-tpa`.`users_hospital`.`provider`)) ;

-- ----------------------------
-- View structure for equity_detail
-- ----------------------------
DROP VIEW IF EXISTS `equity_detail`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `equity_detail` AS select cast(`worksheet`.`case` as char(15) charset utf8mb4) AS `claim_id`,`member`.`member_id` AS `member_id`,`plan_detail`.`code` AS `benefit_code`,`plan_detail`.`name` AS `benefit_description`,`plan_detail`.`max_day_rate` AS `benefit_limit`,`worksheet`.`actual` AS `amt_incurred`,`worksheet`.`cover` AS `amt_approved`,`worksheet`.`excess` AS `amt_not_approved`,cast(left(`plan_detail`.`code`,2) as char(2) charset utf8mb4) AS `coverage_type`,`member`.`plan_external` AS `plan_id` from ((`worksheet` left join `member` on(`worksheet`.`case` = `member`.`client`)) left join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) where `member`.`client` = 26 ;

-- ----------------------------
-- View structure for equity_header
-- ----------------------------
DROP VIEW IF EXISTS `equity_header`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `equity_header` AS select `case`.`member_id` AS `member_id`,if(`case`.`type` = 2,'M','R') AS `claim_type`,`case`.`id` AS `claim_id`,`case`.`policy_no` AS `policy_number`,`member`.`member_name` AS `member_name`,coalesce(convert(if(`worksheet_header`.`plan_detail` in (18371,18401,18431,18367,18397,18427,18364,18394,18424,18434,18374,18404,18369,18399,18429,18432,18372,18402,18370,18400,18430,18366,18396,18426,18365,18395,18425,18368,18398,18428,18435,18375,18405,18433,18373,18403,18457,18459,18461),'01',if(`worksheet_header`.`plan_detail` in (18443,18383,18413,18440,18380,18410,18437,18377,18407,18436,18376,18406,18379,18409,18439,18442,18382,18412,18441,18381,18411,18438,18378,18408,18444,18384,18414,18458,18460,18462),'02',if(`worksheet_header`.`plan_detail` in (18445,18385,18415),'03',if(`worksheet_header`.`plan_detail` in (18452,18392,18422,18453,18393,18423),'04',if(`worksheet_header`.`plan_detail` in (18454,18455,18456),'05',if(`worksheet_header`.`plan_detail` in (18447,18387,18417,18448,18388,18418,18446,18386,18416),'06','00')))))) using utf8),`case`.`plan_header`) AS `coverage_type`,`case`.`provider` AS `provider_code`,`case`.`other_provider` AS `other_provider`,cast(`case`.`admission_date` as date) AS `admission_date`,cast(`case`.`discharge_date` as date) AS `discharge_date`,to_days(cast(`case`.`admission_date` as date)) - to_days(cast(`case`.`discharge_date` as date)) AS `duration_days`,if(`case`.`status` = 19,'11',if(`case`.`status` = 21,'12',if(`case`.`status` = 26,'13',if(`case`.`status` = 31,'14',if(`case`.`status` = 30,'15','00'))))) AS `claims_process_status`,`case`.`log_issue_date` AS `app_date`,`case`.`log_issued_by` AS `app_by`,`diagnosis`.`code` AS `diagnosis_code`,`case`.`other_diagnosis` AS `diagnosis_desc`,`member`.`plan_external` AS `plan_id`,`worksheet_header`.`total_actual` AS `amt_incurred`,`worksheet_header`.`total_cover` AS `amt_approved`,`worksheet_header`.`total_excess` AS `amt_not_approved`,`case`.`ref` AS `register_id`,`country`.`iso-4217` AS `currency_origin`,`case`.`amount_currency_01` AS `amt_of_currency_origin`,`case`.`currency_rate_01_to_idr` AS `exchange_rate_currecy_origin_to_idr`,`case`.`currency_rate_idr_to_02` AS `exchange_rate_idr_to_usd` from ((((`case` left join `member` on(`case`.`patient` = `member`.`id`)) left join `worksheet_header` on(`case`.`id` = `worksheet_header`.`case`)) left join `diagnosis` on(`case`.`diagnosis` = `diagnosis`.`id`)) left join `country` on(`case`.`currency_01` = `country`.`id`)) where `case`.`client` = 26 group by `case`.`id` ;

-- ----------------------------
-- View structure for exclusion
-- ----------------------------
DROP VIEW IF EXISTS `exclusion`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `exclusion` AS select `case`.`id` AS `id`,`case`.`exclusion` AS `exclusion` from `case` ;

-- ----------------------------
-- View structure for faq_01
-- ----------------------------
DROP VIEW IF EXISTS `faq_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `faq_01` AS select `faq`.`id` AS `id`,`faq`.`client` AS `client`,`faq`.`question` AS `question`,`faq`.`answer` AS `answer` from `faq` ;

-- ----------------------------
-- View structure for finance
-- ----------------------------
DROP VIEW IF EXISTS `finance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `finance` AS select `case`.`source` AS `source`,`case`.`id` AS `case_no`,`case`.`type` AS `type`,`case`.`status` AS `status`,`member`.`member_name` AS `patient_name`,`case`.`admission_date` AS `admission_date`,`case`.`discharge_date` AS `discharge_date`,30 - (to_days(curdate()) - to_days(`case`.`discharge_date`)) AS `batas_penerimaan`,`case`.`payment_date` AS `payment_date`,`case`.`upload_proof_of_payment` AS `transfer_proof`,`case`.`bill_no` AS `billing_no`,`case`.`provider` AS `provider_id`,`worksheet`.`actual` AS `actual`,`worksheet`.`cover` AS `cover`,`worksheet`.`excess` AS `excess`,`status_hospital`.`status_finance` AS `status_finance`,if(`case`.`status` in (11,12),`case`.`original_bill_checked_remarks`,NULL) AS `ob_cheking_remarks` from (((`case` join `member` on(`case`.`patient` = `member`.`id`)) join `worksheet` on(`worksheet`.`case` = `case`.`id`)) join `status_hospital` on(`status_hospital`.`id` = `case`.`status`)) where `case`.`type` in (2,3) and `case`.`status` not in (98,95,31,32,33,34,86,87,88,89,97,99) and `case`.`source` in (0,5,6) group by `case`.`id` order by `case`.`admission_date` desc ;

-- ----------------------------
-- View structure for finance_case_status_hosp
-- ----------------------------
DROP VIEW IF EXISTS `finance_case_status_hosp`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `finance_case_status_hosp` AS select `status_hospital`.`id` AS `id`,`status_hospital`.`status_finance` AS `name` from `status_hospital` group by `status_hospital`.`status_finance` order by `status_hospital`.`id` ;

-- ----------------------------
-- View structure for float_fund_per_program
-- ----------------------------
DROP VIEW IF EXISTS `float_fund_per_program`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `float_fund_per_program` AS select `float_fund`.`program` AS `program`,sum(`float_fund`.`amount`) AS `float_fund` from `float_fund` group by `float_fund`.`program` order by NULL ;

-- ----------------------------
-- View structure for generated_card_edc_01
-- ----------------------------
DROP VIEW IF EXISTS `generated_card_edc_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `generated_card_edc_01` AS select concat('90188800',`member`.`id`) AS `card_genereted`,`member`.`member_card_edc` AS `member_card_edc`,`member`.`id` AS `id`,if(left(right(`member`.`member_card_edc`,8),7) = `member`.`id`,1,0) AS `cek`,`member`.`member_card` AS `member_card` from `member` where `member`.`id` in (5377050,5377051,5377052,5377053,5377054) order by `member`.`member_card_edc` desc ;

-- ----------------------------
-- View structure for grouping_remarks_worksheet
-- ----------------------------
DROP VIEW IF EXISTS `grouping_remarks_worksheet`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `grouping_remarks_worksheet` AS select `worksheet`.`case` AS `case`,`worksheet`.`detail` AS `detail`,group_concat(`worksheet`.`remarks` separator ' ;') AS `remarks` from `worksheet` group by `worksheet`.`case`,`worksheet`.`detail` ;

-- ----------------------------
-- View structure for guarantee_cashless_inpatient
-- ----------------------------
DROP VIEW IF EXISTS `guarantee_cashless_inpatient`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `guarantee_cashless_inpatient` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`create_date_01` AS `DocReceieveDate`,`his-tpa`.`case`.`status` AS `status_01`,`his-tpa`.`case_status`.`name` AS `status`,case `his-tpa`.`case`.`source` when 1 then 'Medisclick' when 2 then 'Medisclick' when 3 then 'eCentrix' when 4 then 'eReimbursement' when 5 then 'Hospital Portal' else 'Healthcare' end AS `Source`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `category`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`case`.`dob` AS `dob`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`department`.`name` AS `DEPARTMENT`,case `his-tpa`.`case`.`policy_status` when 1 then 'Enable' when 0 then 'Disable' else 'N/A' end AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`program`.`name` AS `program`,`his-tpa`.`plan`.`name` AS `plan`,`his-tpa`.`member`.`plan_external` AS `plan_external`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`rider`.`name` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,case `provider`.`full_name` when 'NON PARTICIPATING HOSPITAL' then concat(`his-tpa`.`case`.`other_provider`,' (Non Panel)') else `provider`.`full_name` end AS `provider`,`provider`.`city` AS `city`,`his-tpa`.`country`.`name` AS `counttr`,case `his-tpa`.`country`.`name` when 'Indonesia' then 'Domestic' else 'Overseas' end AS `ProviderDomicile`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,case `his-tpa`.`case`.`upload_haf_doc_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,case `his-tpa`.`case`.`haf_doc_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,case `his-tpa`.`case`.`issue_initial_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,case `his-tpa`.`case`.`initial_log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,concat_ws(',',`his-tpa`.`diagnosis`.`code`,`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`exclusion` AS `exclusion`,case `his-tpa`.`case`.`bill_received` when 0 then 'Not Received' when 1 then 'Received' else 'N/A' end AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,case `his-tpa`.`case`.`upload_bill_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_bill_finished`,case `his-tpa`.`case`.`bill_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `BillCompleteBy_M`,`his-tpa`.`case`.`bill_completed_date_01` AS `BillCompleteDate_M`,`his-tpa`.`case`.`ws_type` AS `ws_type`,case `his-tpa`.`case`.`ws_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,case `his-tpa`.`case`.`ws_approval` when 0 then 'Pending' when 1 then 'Not Approve' when 2 then 'Approve' else 'N/A' end AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,case `his-tpa`.`case`.`issue_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_log`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `LogIssued_M`,`his-tpa`.`case`.`log_issue_date_01` AS `LogIssueDate_M`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,case `his-tpa`.`case`.`log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,case `his-tpa`.`case`.`original_bill_checked` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,case `his-tpa`.`case`.`close_case_option` when 1 then 'By Document Send Back' when 2 then 'By Payment' else 'N/A' end AS `close_case_option`,case `his-tpa`.`case`.`original_bill_verified` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,case `his-tpa`.`case`.`doc_send_back_to_client_required` when 1 then 'Required' when 0 then 'Not Required' else 'N/A' end AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `actual`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `cover`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `excess`,`his-tpa`.`case`.`bill_issue_date` AS `BillReceieveDate`,if(`his-tpa`.`case`.`status` = 1 or `his-tpa`.`case`.`status` = 2,9999999 * -1,timestampdiff(HOUR,`his-tpa`.`case`.`create_date`,`his-tpa`.`case`.`haf_doc_completed_date`)) AS `Document_InitialLOG_Hours`,if(`his-tpa`.`case`.`status` = 3,9999999 * -1,timestampdiff(MINUTE,`his-tpa`.`case`.`haf_doc_completed_date`,`his-tpa`.`case`.`initial_log_issue_date`)) AS `Initial_LOG_Minutes`,'' AS `Provider_Discharge_Hours`,if(`his-tpa`.`case`.`status` = 4 or `his-tpa`.`case`.`status` = 5,9999999 * -1,timestampdiff(HOUR,`his-tpa`.`case`.`discharge_date`,`his-tpa`.`case`.`bill_completed_date`)) AS `Document_FinalLOG_Hours`,if(`his-tpa`.`case`.`status` = 6 or `his-tpa`.`case`.`status` = 7 or `his-tpa`.`case`.`status` = 8 or `his-tpa`.`case`.`status` = 9 or `his-tpa`.`case`.`status` = 10,9999999 * -1,timestampdiff(HOUR,`his-tpa`.`case`.`bill_completed_date`,`his-tpa`.`case`.`log_issue_date`)) AS `Final_LOG_Hours`,if(`his-tpa`.`case`.`status` = 11,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`log_issue_date`,`his-tpa`.`case`.`bill_issue_date`)) AS `Document_OB_Hosp_Days`,if(`his-tpa`.`case`.`status` = 11,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,`his-tpa`.`case`.`original_bill_upload_date`)) AS `Document_OB_Days`,if(`his-tpa`.`case`.`status` = 12 or `his-tpa`.`case`.`status` = 13 or `his-tpa`.`case`.`status` = 14,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,`his-tpa`.`case`.`original_bill_checked_date`)) AS `Document_OBCheck_Days`,if(`his-tpa`.`case`.`status` = 15,9999999 * -1,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`original_bill_verified_date`),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`original_bill_verified_date`))) AS `Document_OBVerified_Days`,if(`his-tpa`.`case`.`status` = 16,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,`his-tpa`.`case`.`payment_date`)) AS `Document_Payment_Days`,if(`his-tpa`.`case`.`status` = 17,9999999 * -1,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`))) AS `Document_Sendback_Days`,if(`his-tpa`.`case`.`status` = 18,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date`)) AS `Document_ClientReceive_Days` from ((((((((((((((`his-tpa`.`case` join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`department` on(`his-tpa`.`member`.`department` = `his-tpa`.`department`.`id`)) left join `his-tpa`.`position` on(`his-tpa`.`member`.`position` = `his-tpa`.`position`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`status` not in (95,96,97,98,99,31,32,33,34,86,87,88,89) and `his-tpa`.`case`.`category` = 1 and `his-tpa`.`case`.`type` = 2 and `his-tpa`.`case_status`.`name`  not like 'Provider%' group by `his-tpa`.`case`.`id` order by `his-tpa`.`case`.`status` ;

-- ----------------------------
-- View structure for guarantee_cashless_nonlog
-- ----------------------------
DROP VIEW IF EXISTS `guarantee_cashless_nonlog`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `guarantee_cashless_nonlog` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`create_date_01` AS `DocReceieveDate`,`his-tpa`.`case_status`.`name` AS `status`,case `his-tpa`.`case`.`source` when 1 then 'Medisclick' when 2 then 'Medisclick' when 3 then 'eCentrix' when 4 then 'eReimbursement' when 5 then 'Hospital Portal' else 'Healthcare' end AS `Source`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `category`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`case`.`dob` AS `dob`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`department`.`name` AS `DEPARTMENT`,case `his-tpa`.`case`.`policy_status` when 1 then 'Enable' when 0 then 'Disable' else 'N/A' end AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`program`.`name` AS `program`,`his-tpa`.`plan`.`name` AS `plan`,`his-tpa`.`member`.`plan_external` AS `plan_external`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`rider`.`name` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,case `provider`.`full_name` when 'NON PARTICIPATING HOSPITAL' then concat(`his-tpa`.`case`.`other_provider`,' (Non Panel)') else `provider`.`full_name` end AS `provider`,`provider`.`city` AS `city`,`his-tpa`.`country`.`name` AS `counttr`,case `his-tpa`.`country`.`name` when 'Indonesia' then 'Domestic' else 'Overseas' end AS `ProviderDomicile`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,case `his-tpa`.`case`.`upload_haf_doc_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,case `his-tpa`.`case`.`haf_doc_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,case `his-tpa`.`case`.`issue_initial_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,case `his-tpa`.`case`.`initial_log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,concat_ws(',',`his-tpa`.`diagnosis`.`code`,`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`exclusion` AS `exclusion`,case `his-tpa`.`case`.`bill_received` when 0 then 'Not Received' when 1 then 'Received' else 'N/A' end AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,case `his-tpa`.`case`.`upload_bill_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_bill_finished`,case `his-tpa`.`case`.`bill_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `BillCompleteBy_M`,`his-tpa`.`case`.`bill_completed_date_01` AS `BillCompleteDate_M`,`his-tpa`.`case`.`ws_type` AS `ws_type`,case `his-tpa`.`case`.`ws_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,case `his-tpa`.`case`.`ws_approval` when 0 then 'Pending' when 1 then 'Not Approve' when 2 then 'Approve' else 'N/A' end AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,case `his-tpa`.`case`.`issue_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_log`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `LogIssued_M`,`his-tpa`.`case`.`log_issue_date_01` AS `LogIssueDate_M`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,case `his-tpa`.`case`.`log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,case `his-tpa`.`case`.`original_bill_checked` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,case `his-tpa`.`case`.`close_case_option` when 1 then 'By Document Send Back' when 2 then 'By Payment' else 'N/A' end AS `close_case_option`,case `his-tpa`.`case`.`original_bill_verified` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,case `his-tpa`.`case`.`doc_send_back_to_client_required` when 1 then 'Required' when 0 then 'Not Required' else 'N/A' end AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `actual`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `cover`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `excess`,`his-tpa`.`case`.`bill_issue_date` AS `BillReceieveDate`,'' AS `Document_InitialLOG_Hours`,'' AS `Initial_LOG_Minutes`,'' AS `Provider_Discharge_Hours`,'' AS `Document_FinalLOG_Hours`,'' AS `Final_LOG_Hours`,if(`his-tpa`.`case`.`status` = 19,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`discharge_date`,`his-tpa`.`case`.`bill_issue_date`)) AS `Document_OB_Hosp_Days`,if(`his-tpa`.`case`.`status` = 19,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,`his-tpa`.`case`.`original_bill_upload_date`)) AS `Document_OB_Days`,if(`his-tpa`.`case`.`status` = 20 or `his-tpa`.`case`.`status` = 21 or `his-tpa`.`case`.`status` = 22 or `his-tpa`.`case`.`status` = 23 or `his-tpa`.`case`.`status` = 24 or `his-tpa`.`case`.`status` = 25,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,`his-tpa`.`case`.`original_bill_checked_date`)) AS `Document_OBCheck_Days`,if(`his-tpa`.`case`.`status` = 26,9999999 * -1,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`original_bill_verified_date`),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`original_bill_verified_date`))) AS `Document_OBVerified_Days`,if(`his-tpa`.`case`.`status` = 27,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,`his-tpa`.`case`.`payment_date`)) AS `Document_Payment_Days`,if(`his-tpa`.`case`.`status` = 28,9999999 * -1,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`))) AS `Document_Sendback_Days`,if(`his-tpa`.`case`.`status` = 29,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date`)) AS `Document_ClientReceive_Days` from ((((((((((((((`his-tpa`.`case` join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`department` on(`his-tpa`.`member`.`department` = `his-tpa`.`department`.`id`)) left join `his-tpa`.`position` on(`his-tpa`.`member`.`position` = `his-tpa`.`position`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`status` not in (95,96,97,98,99,31,32,33,34,86,87,88,89) and `his-tpa`.`case`.`type` = 3 and `his-tpa`.`case_status`.`name`  not like 'Provider%' group by `his-tpa`.`case`.`id` order by `his-tpa`.`case`.`status` ;

-- ----------------------------
-- View structure for guarantee_cashless_outpatient
-- ----------------------------
DROP VIEW IF EXISTS `guarantee_cashless_outpatient`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `guarantee_cashless_outpatient` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`create_date_01` AS `DocReceieveDate`,`his-tpa`.`case_status`.`name` AS `status`,case `his-tpa`.`case`.`source` when 1 then 'Medisclick' when 2 then 'Medisclick' when 3 then 'eCentrix' when 4 then 'eReimbursement' when 5 then 'Hospital Portal' else 'Healthcare' end AS `Source`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `category`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`case`.`dob` AS `dob`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`department`.`name` AS `DEPARTMENT`,case `his-tpa`.`case`.`policy_status` when 1 then 'Enable' when 0 then 'Disable' else 'N/A' end AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`program`.`name` AS `program`,`his-tpa`.`plan`.`name` AS `plan`,`his-tpa`.`member`.`plan_external` AS `plan_external`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`rider`.`name` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,case `provider`.`full_name` when 'NON PARTICIPATING HOSPITAL' then concat(`his-tpa`.`case`.`other_provider`,' (Non Panel)') else `provider`.`full_name` end AS `provider`,`provider`.`city` AS `city`,`his-tpa`.`country`.`name` AS `counttr`,case `his-tpa`.`country`.`name` when 'Indonesia' then 'Domestic' else 'Overseas' end AS `ProviderDomicile`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,case `his-tpa`.`case`.`upload_haf_doc_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,case `his-tpa`.`case`.`haf_doc_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,case `his-tpa`.`case`.`issue_initial_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,case `his-tpa`.`case`.`initial_log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,concat_ws(',',`his-tpa`.`diagnosis`.`code`,`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`exclusion` AS `exclusion`,case `his-tpa`.`case`.`bill_received` when 0 then 'Not Received' when 1 then 'Received' else 'N/A' end AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,case `his-tpa`.`case`.`upload_bill_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_bill_finished`,case `his-tpa`.`case`.`bill_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `BillCompleteBy_M`,`his-tpa`.`case`.`bill_completed_date_01` AS `BillCompleteDate_M`,`his-tpa`.`case`.`ws_type` AS `ws_type`,case `his-tpa`.`case`.`ws_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,case `his-tpa`.`case`.`ws_approval` when 0 then 'Pending' when 1 then 'Not Approve' when 2 then 'Approve' else 'N/A' end AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,case `his-tpa`.`case`.`issue_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_log`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `LogIssued_M`,`his-tpa`.`case`.`log_issue_date_01` AS `LogIssueDate_M`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,case `his-tpa`.`case`.`log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,case `his-tpa`.`case`.`original_bill_checked` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,case `his-tpa`.`case`.`close_case_option` when 1 then 'By Document Send Back' when 2 then 'By Payment' else 'N/A' end AS `close_case_option`,case `his-tpa`.`case`.`original_bill_verified` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,case `his-tpa`.`case`.`doc_send_back_to_client_required` when 1 then 'Required' when 0 then 'Not Required' else 'N/A' end AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `actual`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `cover`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `excess`,`his-tpa`.`case`.`bill_issue_date` AS `BillReceieveDate`,'' AS `Document_InitialLOG_Hours`,'' AS `Initial_LOG_Minutes`,if(`his-tpa`.`case`.`status` = 1 or `his-tpa`.`case`.`status` = 2 or `his-tpa`.`case`.`status` = 3,9999999 * -1,timestampdiff(HOUR,`his-tpa`.`case`.`create_date`,`his-tpa`.`case`.`discharge_date`)) AS `Provider_Discharge_Hours`,if(`his-tpa`.`case`.`status` = 4 or `his-tpa`.`case`.`status` = 5,9999999 * -1,timestampdiff(HOUR,`his-tpa`.`case`.`discharge_date`,`his-tpa`.`case`.`bill_completed_date`)) AS `Document_FinalLOG_Hours`,if(`his-tpa`.`case`.`status` = 6 or `his-tpa`.`case`.`status` = 7 or `his-tpa`.`case`.`status` = 8 or `his-tpa`.`case`.`status` = 9 or `his-tpa`.`case`.`status` = 10,9999999 * -1,timestampdiff(HOUR,`his-tpa`.`case`.`bill_completed_date`,`his-tpa`.`case`.`log_issue_date`)) AS `Final_LOG_Hours`,if(`his-tpa`.`case`.`status` = 11,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`log_issue_date`,`his-tpa`.`case`.`bill_issue_date`)) AS `Document_OB_Hosp_Days`,if(`his-tpa`.`case`.`status` = 11,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,`his-tpa`.`case`.`original_bill_upload_date`)) AS `Document_OB_Days`,if(`his-tpa`.`case`.`status` = 12 or `his-tpa`.`case`.`status` = 13 or `his-tpa`.`case`.`status` = 14,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,`his-tpa`.`case`.`original_bill_checked_date`)) AS `Document_OBCheck_Days`,if(`his-tpa`.`case`.`status` = 15,9999999 * -1,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`original_bill_verified_date`),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`original_bill_verified_date`))) AS `Document_OBVerified_Days`,if(`his-tpa`.`case`.`status` = 16,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,`his-tpa`.`case`.`payment_date`)) AS `Document_Payment_Days`,if(`his-tpa`.`case`.`status` = 17,9999999 * -1,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`))) AS `Document_Sendback_Days`,if(`his-tpa`.`case`.`status` = 18,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date`)) AS `Document_ClientReceive_Days` from ((((((((((((((`his-tpa`.`case` join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`department` on(`his-tpa`.`member`.`department` = `his-tpa`.`department`.`id`)) left join `his-tpa`.`position` on(`his-tpa`.`member`.`position` = `his-tpa`.`position`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`status` not in (95,96,97,98,99,31,32,33,34,86,87,88,89) and `his-tpa`.`case`.`category` = 0 and `his-tpa`.`case`.`type` = 2 and `his-tpa`.`case_status`.`name`  not like 'Provider%' group by `his-tpa`.`case`.`id` order by `his-tpa`.`case`.`status` ;

-- ----------------------------
-- View structure for guarantee_reimbursement
-- ----------------------------
DROP VIEW IF EXISTS `guarantee_reimbursement`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `guarantee_reimbursement` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`create_date_01` AS `DocReceieveDate`,`his-tpa`.`case_status`.`name` AS `status`,case `his-tpa`.`case`.`source` when 1 then 'Medisclick' when 2 then 'Medisclick' when 3 then 'eCentrix' when 4 then 'eReimbursement' when 5 then 'Hospital Portal' else 'Healthcare' end AS `Source`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `category`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`case`.`dob` AS `dob`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`department`.`name` AS `DEPARTMENT`,case `his-tpa`.`case`.`policy_status` when 1 then 'Enable' when 0 then 'Disable' else 'N/A' end AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`program`.`name` AS `program`,`his-tpa`.`plan`.`name` AS `plan`,`his-tpa`.`member`.`plan_external` AS `plan_external`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`rider`.`name` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,case `provider`.`full_name` when 'NON PARTICIPATING HOSPITAL' then concat(`his-tpa`.`case`.`other_provider`,' (Non Panel)') else `provider`.`full_name` end AS `provider`,`provider`.`city` AS `city`,`his-tpa`.`country`.`name` AS `counttr`,case `his-tpa`.`country`.`name` when 'Indonesia' then 'Domestic' else 'Overseas' end AS `ProviderDomicile`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,case `his-tpa`.`case`.`upload_haf_doc_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,case `his-tpa`.`case`.`haf_doc_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,case `his-tpa`.`case`.`issue_initial_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,case `his-tpa`.`case`.`initial_log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,concat_ws(',',`his-tpa`.`diagnosis`.`code`,`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`exclusion` AS `exclusion`,case `his-tpa`.`case`.`bill_received` when 0 then 'Not Received' when 1 then 'Received' else 'N/A' end AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,case `his-tpa`.`case`.`upload_bill_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_bill_finished`,case `his-tpa`.`case`.`bill_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `BillCompleteBy_M`,`his-tpa`.`case`.`bill_completed_date_01` AS `BillCompleteDate_M`,`his-tpa`.`case`.`ws_type` AS `ws_type`,case `his-tpa`.`case`.`ws_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,case `his-tpa`.`case`.`ws_approval` when 0 then 'Pending' when 1 then 'Not Approve' when 2 then 'Approve' else 'N/A' end AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,case `his-tpa`.`case`.`issue_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_log`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `LogIssued_M`,`his-tpa`.`case`.`log_issue_date_01` AS `LogIssueDate_M`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,case `his-tpa`.`case`.`log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,case `his-tpa`.`case`.`original_bill_checked` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,case `his-tpa`.`case`.`close_case_option` when 1 then 'By Document Send Back' when 2 then 'By Payment' else 'N/A' end AS `close_case_option`,case `his-tpa`.`case`.`original_bill_verified` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,case `his-tpa`.`case`.`doc_send_back_to_client_required` when 1 then 'Required' when 0 then 'Not Required' else 'N/A' end AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `actual`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `cover`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `excess`,`his-tpa`.`case`.`bill_issue_date` AS `BillReceieveDate`,'' AS `Document_InitialLOG_Hours`,'' AS `Initial_LOG_Minutes`,'' AS `Provider_Discharge_Hours`,'' AS `Document_FinalLOG_Hours`,'' AS `Final_LOG_Hours`,if(`his-tpa`.`case`.`status` = 19,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,`his-tpa`.`case`.`create_date`)) AS `Document_OB_Cli_Days`,if(`his-tpa`.`case`.`status` = 19,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`create_date`,`his-tpa`.`case`.`original_bill_upload_date`)) AS `Document_OB_Days`,if(`his-tpa`.`case`.`status` = 20 or `his-tpa`.`case`.`status` = 21 or `his-tpa`.`case`.`status` = 22 or `his-tpa`.`case`.`status` = 23 or `his-tpa`.`case`.`status` = 24 or `his-tpa`.`case`.`status` = 25,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,`his-tpa`.`case`.`original_bill_checked_date`)) AS `Document_OBCheck_Days`,if(`his-tpa`.`case`.`status` = 26,9999999 * -1,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`original_bill_verified_date`),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`original_bill_verified_date`))) AS `Document_OBVerified_Days`,if(`his-tpa`.`case`.`status` = 27,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,`his-tpa`.`case`.`payment_date`)) AS `Document_Payment_Days`,if(`his-tpa`.`case`.`status` = 28,9999999 * -1,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`))) AS `Document_Sendback_Days`,if(`his-tpa`.`case`.`status` = 29,9999999 * -1,timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date`)) AS `Document_ClientReceive_Days` from ((((((((((((((`his-tpa`.`case` join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`department` on(`his-tpa`.`member`.`department` = `his-tpa`.`department`.`id`)) left join `his-tpa`.`position` on(`his-tpa`.`member`.`position` = `his-tpa`.`position`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`status` not in (95,96,97,98,99,31,32,33,34,86,87,88,89) and `his-tpa`.`case`.`type` = 1 and `his-tpa`.`case_status`.`name`  not like 'Provider%' group by `his-tpa`.`case`.`id` order by `his-tpa`.`case`.`status` ;

-- ----------------------------
-- View structure for history_contact_us
-- ----------------------------
DROP VIEW IF EXISTS `history_contact_us`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `history_contact_us` AS select `contact_us`.`id` AS `id`,`contact_us`.`provider` AS `provider`,`contact_us`.`email` AS `email`,`contact_us`.`subject` AS `subject`,`contact_us`.`pesan` AS `pesan`,`contact_us`.`email_to` AS `email_to`,`contact_us`.`create_date` AS `create_date`,`contact_us`.`created_by` AS `created_by` from `contact_us` order by `contact_us`.`create_date` desc ;

-- ----------------------------
-- View structure for hospital_profile
-- ----------------------------
DROP VIEW IF EXISTS `hospital_profile`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `hospital_profile` AS select `intsys`.`provider`.`id` AS `provider_id`,`intsys`.`provider`.`full_name` AS `provider_name`,`intsys`.`provider`.`address` AS `address`,`intsys`.`provider`.`postal` AS `postal_code`,`intsys`.`provider`.`phone` AS `phone`,`intsys`.`provider`.`service` AS `service`,`his-tpa`.`country`.`name` AS `country_name`,`intsys`.`provider`.`province` AS `province`,`intsys`.`provider`.`city` AS `city`,`intsys`.`provider`.`fax` AS `fax` from (`intsys`.`provider` left join `his-tpa`.`country` on(`his-tpa`.`country`.`id` = `intsys`.`provider`.`country`)) where `intsys`.`provider`.`status` = 1 ;

-- ----------------------------
-- View structure for ic_reminder_ob_01
-- ----------------------------
DROP VIEW IF EXISTS `ic_reminder_ob_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `ic_reminder_ob_01` AS select `case`.`client` AS `client`,`case`.`provider` AS `provider`,`case`.`id` AS `id`,`case`.`category` AS `category`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`admission_date` AS `admission_date`,`case`.`discharge_date` AS `discharge_date`,sum(`worksheet`.`actual`) AS `actual`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`bill_no` AS `bill_no`,to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) AS `aging`,if(`case`.`upload_original_bill` is null or `case`.`upload_original_bill` = '','OB Not Received','OB Not Completed') AS `type`,if(to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) <= 7,1,if(to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) <= 14,2,3)) AS `reminder_type`,sum(`worksheet`.`excess`) AS `excess`,sum(`worksheet`.`cover`) AS `cover`,`case`.`type` AS `case_type`,`case`.`status` AS `status`,`case`.`upload_original_bill` AS `upload_original_bill` from (`case` left join `worksheet` on(`case`.`id` = `worksheet`.`case`)) where `case`.`type` in (2,3) and cast(`case`.`discharge_date` as date) <= curdate() and `case`.`original_bill_checked` in (1,2) group by `case`.`id` ;

-- ----------------------------
-- View structure for ic_reminder_ob_02
-- ----------------------------
DROP VIEW IF EXISTS `ic_reminder_ob_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `ic_reminder_ob_02` AS select `case`.`provider` AS `provider`,`case`.`id` AS `id`,`case`.`category` AS `category`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`admission_date` AS `admission_date`,`case`.`discharge_date` AS `discharge_date`,sum(`worksheet`.`actual`) AS `actual`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`bill_no` AS `bill_no`,to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) AS `aging`,if(`case`.`upload_original_bill` is null or `case`.`upload_original_bill` = '','OB Not Received','OB Not Completed') AS `type`,if(to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) <= 7,1,if(to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) <= 14,2,3)) AS `reminder_type`,sum(`worksheet`.`excess`) AS `excess`,sum(`worksheet`.`cover`) AS `cover`,`case`.`type` AS `case_type`,`case`.`status` AS `status`,`case`.`upload_original_bill` AS `upload_original_bill` from (`case` left join `worksheet` on(`case`.`id` = `worksheet`.`case`)) where `case`.`type` in (2,3) and cast(`case`.`discharge_date` as date) <= curdate() and `case`.`original_bill_checked` in (1,2) and `case`.`status` not in (98,96,31,32) group by `case`.`id` ;

-- ----------------------------
-- View structure for ic_reminder_ob_03
-- ----------------------------
DROP VIEW IF EXISTS `ic_reminder_ob_03`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `ic_reminder_ob_03` AS select `case`.`provider` AS `provider`,`case`.`id` AS `id`,min(to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date))) AS `aging` from `case` where `case`.`type` in (2,3) and `case`.`original_bill_checked` in (3,4) and `case`.`status` not in (98,96,31,32) group by `case`.`provider` ;

-- ----------------------------
-- View structure for ic_reminder_ob_04
-- ----------------------------
DROP VIEW IF EXISTS `ic_reminder_ob_04`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `ic_reminder_ob_04` AS select `case`.`id` AS `id`,`case`.`provider` AS `provider`,to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) AS `aging` from (`case` left join `ic_reminder_ob_03` on(`case`.`provider` = `ic_reminder_ob_03`.`provider` and to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) = `ic_reminder_ob_03`.`aging`)) where `case`.`provider` = `ic_reminder_ob_03`.`provider` and to_days(curdate()) - to_days(cast(`case`.`discharge_date` as date)) = `ic_reminder_ob_03`.`aging` and `case`.`type` in (2,3) and `case`.`original_bill_checked` in (3,4) group by `case`.`provider` order by 2 ;

-- ----------------------------
-- View structure for intsys_case_payment
-- ----------------------------
DROP VIEW IF EXISTS `intsys_case_payment`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `intsys_case_payment` AS select `intsys_case_payment_01`.`tick` AS `tick`,`intsys_case_payment_01`.`case_id` AS `case_id`,`intsys_case_payment_01`.`source` AS `source`,`intsys_case_payment_01`.`client` AS `client`,`intsys_case_payment_01`.`type` AS `type`,`intsys_case_payment_01`.`category` AS `category`,`intsys_case_payment_01`.`patient_id` AS `patient_id`,`intsys_case_payment_01`.`patient_name` AS `patient_name`,`intsys_case_payment_01`.`principle_name` AS `principle_name`,`intsys_case_payment_01`.`policy_holder` AS `policy_holder`,`intsys_case_payment_01`.`provider_id` AS `provider_id`,`intsys_case_payment_01`.`provider` AS `provider`,`intsys_case_payment_01`.`bank_name` AS `bank_name`,`intsys_case_payment_01`.`account_no` AS `account_no`,`intsys_case_payment_01`.`on_behalf_of` AS `on_behalf_of`,`intsys_case_payment_01`.`currency` AS `currency`,`intsys_case_payment_01`.`actual` AS `actual`,`intsys_case_payment_01`.`amount` AS `amount`,`intsys_case_payment_01`.`discount` AS `discount`,`intsys_case_payment_01`.`amount_to_pay` AS `amount_to_pay`,`intsys_case_payment_01`.`bill_no` AS `bill_no`,`intsys_case_payment_01`.`bill_issue_date` AS `bill_issue_date`,`intsys_case_payment_01`.`bill_due_date` AS `bill_due_date`,`intsys_case_payment_01`.`admission_date` AS `admission_date`,`intsys_case_payment_01`.`discharge_date` AS `discharge_date`,`intsys_case_payment_01`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`intsys_case_payment_01`.`abbreviation_name` AS `abbreviation_name`,`intsys_case_payment_01`.`company` AS `company`,`intsys_case_payment_01`.`source_of_fund` AS `source_of_fund`,`intsys_case_payment_01`.`source_of_fund_01` AS `source_of_fund_01`,`intsys_case_payment_01`.`created_by` AS `created_by`,`intsys_case_payment_01`.`create_date` AS `create_date` from `his-tpa`.`intsys_case_payment_01` union all select `intsys_case_payment_02`.`tick` AS `tick`,`intsys_case_payment_02`.`case_id` AS `case_id`,`intsys_case_payment_02`.`source` AS `source`,`intsys_case_payment_02`.`client` AS `client`,`intsys_case_payment_02`.`type` AS `type`,`intsys_case_payment_02`.`category` AS `category`,`intsys_case_payment_02`.`patient_id` AS `patient_id`,`intsys_case_payment_02`.`patient_name` AS `patient_name`,`intsys_case_payment_02`.`principle_name` AS `principle_name`,`intsys_case_payment_02`.`policy_holder` AS `policy_holder`,`intsys_case_payment_02`.`provider_id` AS `provider_id`,`intsys_case_payment_02`.`provider` AS `provider`,`intsys_case_payment_02`.`bank_name` AS `bank_name`,`intsys_case_payment_02`.`account_no` AS `account_no`,`intsys_case_payment_02`.`on_behalf_of` AS `on_behalf_of`,`intsys_case_payment_02`.`currency` AS `currency`,`intsys_case_payment_02`.`actual` AS `actual`,`intsys_case_payment_02`.`amount` AS `amount`,`intsys_case_payment_02`.`discount` AS `discount`,`intsys_case_payment_02`.`amount_to_pay` AS `amount_to_pay`,`intsys_case_payment_02`.`bill_no` AS `bill_no`,`intsys_case_payment_02`.`bill_issue_date` AS `bill_issue_date`,`intsys_case_payment_02`.`bill_due_date` AS `bill_due_date`,`intsys_case_payment_02`.`admission_date` AS `admission_date`,`intsys_case_payment_02`.`discharge_date` AS `discharge_date`,`intsys_case_payment_02`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`intsys_case_payment_02`.`abbreviation_name` AS `abbreviation_name`,`intsys_case_payment_02`.`company` AS `company`,`intsys_case_payment_02`.`source_of_fund` AS `source_of_fund`,`intsys_case_payment_02`.`source_of_fund_01` AS `source_of_fund_01`,`intsys_case_payment_02`.`created_by` AS `created_by`,`intsys_case_payment_02`.`create_date` AS `create_date` from `his-tpa`.`intsys_case_payment_02` ;

-- ----------------------------
-- View structure for intsys_case_payment_01
-- ----------------------------
DROP VIEW IF EXISTS `intsys_case_payment_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `intsys_case_payment_01` AS select 0 AS `tick`,`his-tpa`.`case`.`id` AS `case_id`,1 AS `source`,coalesce(`his-tpa`.`case`.`client`,0) AS `client`,`his-tpa`.`case`.`type` AS `type`,coalesce(`his-tpa`.`case`.`category`,0) AS `category`,coalesce(`his-tpa`.`case`.`patient`,0) AS `patient_id`,coalesce(`patient`.`member_name`,'') AS `patient_name`,coalesce(`principle`.`member_name`,'') AS `principle_name`,coalesce(`patient`.`policy_holder`,'') AS `policy_holder`,`his-tpa`.`case`.`provider` AS `provider_id`,if(`his-tpa`.`case`.`provider` = 310,`his-tpa`.`case`.`other_provider`,`provider`.`full_name`) AS `provider`,if(`his-tpa`.`case`.`type` = 1,`patient`.`bank`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`bank`,'')) AS `bank_name`,if(`his-tpa`.`case`.`type` = 1,`patient`.`account_no`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`account_no`,'')) AS `account_no`,if(`his-tpa`.`case`.`type` = 1,`patient`.`on_behalf_of`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`on_behalf_of`,'')) AS `on_behalf_of`,`his-tpa`.`case`.`currency_01` AS `currency`,sum(`his-tpa`.`worksheet`.`actual`) AS `actual`,if(`his-tpa`.`case`.`issue_log_option` = 0,sum(`his-tpa`.`worksheet`.`cover`),if(`his-tpa`.`case`.`issue_log_option` = 1,sum(`his-tpa`.`worksheet`.`actual`),if(`his-tpa`.`case`.`issue_log_option` = 2,sum(`his-tpa`.`worksheet`.`actual`),0))) AS `amount`,if(`his-tpa`.`case`.`discount` is not null,`his-tpa`.`case`.`discount`,0) AS `discount`,if(`his-tpa`.`case`.`issue_log_option` = 0,sum(`his-tpa`.`worksheet`.`cover`),if(`his-tpa`.`case`.`issue_log_option` = 1,sum(`his-tpa`.`worksheet`.`actual`),if(`his-tpa`.`case`.`issue_log_option` = 2,sum(`his-tpa`.`worksheet`.`actual`),0))) - if(`his-tpa`.`case`.`discount` is not null,`his-tpa`.`case`.`discount`,0) AS `amount_to_pay`,coalesce(`his-tpa`.`case`.`bill_no`,'') AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,coalesce(`provider`.`abbreviation_name`,'') AS `abbreviation_name`,coalesce(`his-tpa`.`case`.`company`,0) AS `company`,coalesce(`bank_01`.`name`,`his-tpa`.`bank`.`name`) AS `source_of_fund`,if(`his-tpa`.`company`.`account_no` is null,`client`.`account_no`,if(`his-tpa`.`company`.`account_no` = '',`client`.`account_no`,`his-tpa`.`company`.`account_no`)) AS `source_of_fund_01`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date` from (((((((((`his-tpa`.`case` join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) join `his-tpa`.`patient` on(`patient`.`id` = `his-tpa`.`case`.`patient`)) join `his-tpa`.`principle` on(`principle`.`id` = `patient`.`member_principle`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`provider` on(`provider`.`id` = `his-tpa`.`case`.`provider`)) left join `his-tpa`.`bank` on(`client`.`bank` = `his-tpa`.`bank`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`client` = `his-tpa`.`company`.`client` and `his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`bank` `bank_01` on(`his-tpa`.`company`.`bank` = `bank_01`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`program`.`id` = `his-tpa`.`case`.`program`)) where `his-tpa`.`case`.`program` in (17,53,54,56,64,1,9,70,62,48,44,71,67,29,57) and `his-tpa`.`case`.`type` = 2 group by `his-tpa`.`worksheet`.`case` ;

-- ----------------------------
-- View structure for intsys_case_payment_02
-- ----------------------------
DROP VIEW IF EXISTS `intsys_case_payment_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `intsys_case_payment_02` AS select 0 AS `tick`,`his-tpa`.`case`.`id` AS `case_id`,1 AS `source`,coalesce(`his-tpa`.`case`.`client`,0) AS `client`,`his-tpa`.`case`.`type` AS `type`,coalesce(`his-tpa`.`case`.`category`,0) AS `category`,coalesce(`his-tpa`.`case`.`patient`,0) AS `patient_id`,coalesce(`patient`.`member_name`,'') AS `patient_name`,coalesce(`principle`.`member_name`,'') AS `principle_name`,coalesce(`patient`.`policy_holder`,'') AS `policy_holder`,`his-tpa`.`case`.`provider` AS `provider_id`,if(`his-tpa`.`case`.`provider` = 310,`his-tpa`.`case`.`other_provider`,`provider`.`full_name`) AS `provider`,if(`his-tpa`.`case`.`type` = 1,`patient`.`bank`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`bank`,'')) AS `bank_name`,if(`his-tpa`.`case`.`type` = 1,`patient`.`account_no`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`account_no`,'')) AS `account_no`,if(`his-tpa`.`case`.`type` = 1,`patient`.`on_behalf_of`,if(`his-tpa`.`case`.`type` in (2,3),`provider`.`on_behalf_of`,'')) AS `on_behalf_of`,`his-tpa`.`case`.`currency_01` AS `currency`,sum(`his-tpa`.`worksheet`.`actual`) AS `actual`,if(`his-tpa`.`case`.`issue_log_option` = 0,sum(`his-tpa`.`worksheet`.`cover`),if(`his-tpa`.`case`.`issue_log_option` = 1,sum(`his-tpa`.`worksheet`.`actual`),if(`his-tpa`.`case`.`issue_log_option` = 2,sum(`his-tpa`.`worksheet`.`actual`),0))) AS `amount`,if(`his-tpa`.`case`.`discount` is not null,`his-tpa`.`case`.`discount`,0) AS `discount`,if(`his-tpa`.`case`.`issue_log_option` = 0,sum(`his-tpa`.`worksheet`.`cover`),if(`his-tpa`.`case`.`issue_log_option` = 1,sum(`his-tpa`.`worksheet`.`actual`),if(`his-tpa`.`case`.`issue_log_option` = 2,sum(`his-tpa`.`worksheet`.`actual`),0))) - if(`his-tpa`.`case`.`discount` is not null,`his-tpa`.`case`.`discount`,0) AS `amount_to_pay`,coalesce(`his-tpa`.`case`.`bill_no`,'') AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,coalesce(`provider`.`abbreviation_name`,'') AS `abbreviation_name`,coalesce(`his-tpa`.`case`.`company`,0) AS `company`,coalesce(`bank_01`.`name`,`his-tpa`.`bank`.`name`) AS `source_of_fund`,if(`his-tpa`.`company`.`account_no` is null,`client`.`account_no`,if(`his-tpa`.`company`.`account_no` = '',`client`.`account_no`,`his-tpa`.`company`.`account_no`)) AS `source_of_fund_01`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date` from (((((((((`his-tpa`.`case` join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) join `his-tpa`.`patient` on(`patient`.`id` = `his-tpa`.`case`.`patient`)) join `his-tpa`.`principle` on(`principle`.`id` = `patient`.`member_principle`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`provider` on(`provider`.`id` = `his-tpa`.`case`.`provider`)) left join `his-tpa`.`bank` on(`client`.`bank` = `his-tpa`.`bank`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`client` = `his-tpa`.`company`.`client` and `his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`bank` `bank_01` on(`his-tpa`.`company`.`bank` = `bank_01`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`program`.`id` = `his-tpa`.`case`.`program`)) where `his-tpa`.`case`.`program` in (64,56,1,9,62,67,48) and `his-tpa`.`case`.`type` in (1,3) group by `his-tpa`.`worksheet`.`case` ;

-- ----------------------------
-- View structure for jagadiri_activity_log
-- ----------------------------
DROP VIEW IF EXISTS `jagadiri_activity_log`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `jagadiri_activity_log` AS select `case`.`id` AS `case`,NULL AS `id`,current_timestamp() AS `datetime`,'99' AS `contact_type`,'JAGADIRI' AS `contact_info`,'JAGADIRI' AS `contact_person`,`jagadiri_auto_staging`.`description1` AS `descripton1`,`jagadiri_auto_staging`.`description2` AS `descripton2`,`jagadiri_auto_staging`.`description3` AS `descripton3`,`jagadiri_auto_staging`.`description4` AS `descripton4`,`jagadiri_auto_staging`.`description5` AS `descripton5`,`jagadiri_auto_staging`.`description6` AS `descripton6`,`jagadiri_auto_staging`.`description7` AS `descripton7`,`jagadiri_auto_staging`.`description8` AS `descripton8`,`jagadiri_auto_staging`.`description9` AS `descripton9`,'99' AS `status`,'JAGADIRI' AS `created_by`,current_timestamp() AS `create_date`,NULL AS `edited_by`,NULL AS `edited_date` from (`jagadiri_auto_staging` left join `case` on(`case`.`ref` = convert(`jagadiri_auto_staging`.`ref` using utf8))) group by `jagadiri_auto_staging`.`ref` ;

-- ----------------------------
-- View structure for jagadiri_case_mapping
-- ----------------------------
DROP VIEW IF EXISTS `jagadiri_case_mapping`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `jagadiri_case_mapping` AS select '' AS `id`,'JAGADIRI' AS `created_by`,`jagadiri_auto_staging`.`create_date` AS `create_date`,'99' AS `status`,`jagadiri_auto_staging`.`category` AS `category`,'1' AS `type`,`jagadiri_auto_staging`.`ref` AS `ref`,`jagadiri_auto_staging`.`patient` AS `patient`,`jagadiri_auto_staging`.`dob` AS `dob`,`jagadiri_auto_staging`.`gender` AS `gender`,`jagadiri_auto_staging`.`member_id` AS `member_id`,`member`.`member_card` AS `member_card`,`member`.`member_principle` AS `principle`,`member`.`member_relation` AS `relation`,`member`.`member_mobile` AS `mobile`,`member`.`client` AS `client`,`member`.`branch` AS `branch`,`member`.`company` AS `company`,`member`.`policy_status` AS `policy_status`,`member`.`policy_no` AS `policy_no`,`member`.`policy_holder` AS `policy_holder`,`member`.`policy_effective_date` AS `policy_effective_date`,`member`.`policy_issue_date` AS `policy_issue_date`,`member`.`policy_expiry_date` AS `policy_expiry_date`,`member`.`policy_declare_date` AS `policy_declare_date`,`member`.`policy_lapse_date` AS `policy_lapse_date`,`member`.`policy_revival_date` AS `policy_revival_date`,`member`.`policy_termination_date` AS `policy_termination_date`,`member`.`special_condition` AS `special_condition`,`member`.`program` AS `program`,`member`.`plan` AS `plan`,`member`.`plan_attach_date` AS `plan_attach_date`,`member`.`plan_expiry_date` AS `plan_expiry_date`,`member`.`rider` AS `rider`,`member`.`rider_attach_date` AS `rider_attach_date`,`member`.`rider_expiry_date` AS `rider_expiry_date`,310 AS `provider`,`jagadiri_auto_staging`.`provider` AS `other_provider`,85 AS `currency_02`,85 AS `currency_01`,1 AS `currency_rate`,`jagadiri_auto_staging`.`admission_date` AS `admission_date`,0 AS `admission_time`,NULL AS `admission_doctor`,NULL AS `symptom`,NULL AS `symptom_since`,NULL AS `vital_sign`,`jagadiri_auto_staging`.`diagnosis` AS `initial_diagnosis`,NULL AS `treatment_plan`,NULL AS `upload_haf`,NULL AS `haf_uploaded_by`,NULL AS `haf_upload_date`,NULL AS `upload_doc`,NULL AS `doc_uploaded_by`,NULL AS `doc_upload_date`,0 AS `upload_haf_doc_finished`,NULL AS `upload_haf_doc_finished_by`,NULL AS `upload_haf_doc_finished_date`,1 AS `haf_doc_completed`,NULL AS `haf_doc_completed_remarks`,NULL AS `haf_doc_completed_by`,NULL AS `haf_doc_completed_date`,1 AS `issue_initial_log`,NULL AS `initial_log_issued_by`,NULL AS `initial_log_issue_date`,NULL AS `initial_claim_no`,NULL AS `initial_log_remarks`,1 AS `initial_log_approval`,`jagadiri_auto_staging`.`discharge_date` AS `discharge_date`,NULL AS `actual_treatment`,`jagadiri_auto_staging`.`discharge_doctor` AS `discharge_doctor`,`jagadiri_auto_staging`.`diagnosis` AS `diagnosis`,`jagadiri_auto_staging`.`other_diagnosis` AS `other_diagnosis`,NULL AS `exclusion`,0 AS `bill_received`,NULL AS `bill_received_by`,NULL AS `bill_received_date`,NULL AS `upload_bill`,NULL AS `bill_uploaded_by`,NULL AS `bill_upload_date`,NULL AS `upload_bill_finished_by`,0 AS `upload_bill_finished`,NULL AS `upload_bill_finished_date`,1 AS `bill_completed`,NULL AS `bill_completed_remarks`,NULL AS `bill_completed_by`,NULL AS `bill_completed_date`,0 AS `ws_type`,NULL AS `ws_option`,1 AS `ws_finished`,NULL AS `ws_finished_by`,NULL AS `ws_finished_date`,3 AS `ws_approval`,NULL AS `ws_approval_remarks`,NULL AS `ws_approval_by`,NULL AS `ws_approval_date`,0 AS `issuance_limit`,2 AS `issue_log`,NULL AS `log_issued_by`,NULL AS `issue_log_option`,NULL AS `log_issue_date`,NULL AS `claim_no`,NULL AS `log_remarks`,1 AS `log_approval`,NULL AS `nonlog_reason`,NULL AS `nonlog_remarks`,NULL AS `reject_reason`,NULL AS `reject_remarks`,NULL AS `batch_received`,NULL AS `bill_no`,NULL AS `bill_issue_date`,NULL AS `bill_due_date`,NULL AS `upload_original_bill`,NULL AS `original_bill_uploaded_by`,NULL AS `original_bill_upload_date`,4 AS `original_bill_checked`,NULL AS `original_bill_checked_by`,NULL AS `original_bill_checked_remarks`,NULL AS `original_bill_checked_date`,1 AS `close_case_option`,4 AS `original_bill_verified`,NULL AS `original_bill_verified_remarks`,NULL AS `original_bill_verified_by`,NULL AS `original_bill_verified_date`,`jagadiri_auto_staging`.`payment_date` AS `payment_date`,NULL AS `paid_by`,NULL AS `upload_proof_of_payment`,1 AS `doc_send_back_to_client_required`,NULL AS `doc_send_back_to_client_date`,NULL AS `doc_received_by_client_date`,NULL AS `edited_by`,NULL AS `edit_date`,NULL AS `is_clean`,-1 AS `userlevel` from (`jagadiri_auto_staging` left join `member` on(`member`.`id` = `jagadiri_auto_staging`.`patient`)) group by `jagadiri_auto_staging`.`ref` ;

-- ----------------------------
-- View structure for jagadiri_case_surgery
-- ----------------------------
DROP VIEW IF EXISTS `jagadiri_case_surgery`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `jagadiri_case_surgery` AS select `a`.`case_id` AS `case_id`,`a`.`status_case` AS `status_case`,sum(`a`.`surgery`) AS `surgery` from (select `his-tpa`.`case_client`.`case_id` AS `case_id`,`his-tpa`.`case_client`.`status_case` AS `status_case`,`his-tpa`.`plan_detail`.`name` AS `name`,if(`his-tpa`.`plan_detail`.`name` like '%pembedahan%',1,0) AS `surgery` from (((`his-tpa`.`case_client` left join `his-tpa`.`case` on(`his-tpa`.`case`.`id` = `his-tpa`.`case_client`.`case_id`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) left join `his-tpa`.`plan_detail` on(`his-tpa`.`plan_detail`.`id` = `his-tpa`.`worksheet`.`detail`)) where `his-tpa`.`case_client`.`status_sending` = 0) `a` group by `a`.`case_id`,`a`.`status_case` order by `a`.`status_case` ;

-- ----------------------------
-- View structure for jagadiri_worksheet_mapping
-- ----------------------------
DROP VIEW IF EXISTS `jagadiri_worksheet_mapping`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `jagadiri_worksheet_mapping` AS select `case`.`id` AS `case`,`case`.`patient` AS `patient`,`case`.`principle` AS `principle`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`plan_detail`.`header` AS `header`,`jagadiri_auto_staging`.`detail` AS `detail`,'' AS `id`,`jagadiri_auto_staging`.`long_hospitalization` AS `day`,`jagadiri_auto_staging`.`actual` / `jagadiri_auto_staging`.`long_hospitalization` AS `day_rate`,`jagadiri_auto_staging`.`actual` AS `actual`,NULL AS `tolerance`,0 AS `non_prorate`,0 AS `prorate`,0 AS `prorate_percent`,0 AS `prorate_result`,0 AS `exclusion`,0 AS `remaining_deductible`,1 AS `copayment`,0 AS `remaining_day`,0 AS `remaining_inner_limit`,0 AS `using_float_fund`,0 AS `remaining_float_fund`,0 AS `remaining_annual_limit`,0 AS `cash_benefit_availability`,`jagadiri_auto_staging`.`cover` AS `cover`,if(`jagadiri_auto_staging`.`actual` < `jagadiri_auto_staging`.`cover`,0,`jagadiri_auto_staging`.`excess`) AS `excess`,0 AS `deductible`,0 AS `cash_benefit`,if(`jagadiri_auto_staging`.`actual` < `jagadiri_auto_staging`.`cover`,`jagadiri_auto_staging`.`excess`,`jagadiri_auto_staging`.`excess_remark`) AS `remarks`,NULL AS `remarks_01`,NULL AS `relocated_to`,NULL AS `tick`,'JAGADIRI' AS `created_by`,current_timestamp() AS `create_date`,NULL AS `edited_by`,NULL AS `edit_date` from ((`jagadiri_auto_staging` left join `case` on(convert(`jagadiri_auto_staging`.`ref` using utf8) = `case`.`ref`)) left join `plan_detail` on(`jagadiri_auto_staging`.`detail` = `plan_detail`.`id`)) ;

-- ----------------------------
-- View structure for klg_update_plan
-- ----------------------------
DROP VIEW IF EXISTS `klg_update_plan`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `klg_update_plan` AS select `member`.`id` AS `m_id`,`member`.`program` AS `m_program`,`member`.`plan` AS `m_plan`,`case`.`id` AS `c_id`,`case`.`patient` AS `c_patient`,`case`.`program` AS `c_program`,`case`.`plan` AS `c_plan` from (`member` left join `case` on(`member`.`id` = `case`.`patient`)) where `member`.`client` = 263 and (`member`.`program` <> `case`.`program` or `member`.`plan` <> `case`.`plan`) and `member`.`member_name`  not like '%Dummy%' and `case`.`issue_log_option` <> 1 ;

-- ----------------------------
-- View structure for klg_update_plan_1
-- ----------------------------
DROP VIEW IF EXISTS `klg_update_plan_1`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `klg_update_plan_1` AS select `worksheet_01`.`case` AS `case`,`worksheet_01`.`plan` AS `plan`,`worksheet_01`.`header` AS `header`,`worksheet_01`.`detail` AS `detail`,`plan_detail`.`name` AS `plan_detail` from ((`worksheet_01` join `klg_update_plan` on(`worksheet_01`.`case` = `klg_update_plan`.`c_id`)) left join `plan_detail` on(`worksheet_01`.`detail` = `plan_detail`.`id`)) ;

-- ----------------------------
-- View structure for klg_update_plan_2
-- ----------------------------
DROP VIEW IF EXISTS `klg_update_plan_2`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `klg_update_plan_2` AS select `klg_update_plan_1`.`case` AS `case`,`klg_update_plan_1`.`plan` AS `o_plan`,`klg_update_plan_1`.`header` AS `o_header`,`klg_update_plan_1`.`detail` AS `o_detail`,`klg_update_plan_1`.`plan_detail` AS `o_detail_name`,`plan_detail`.`plan` AS `n_plan`,`plan_detail`.`header` AS `n_header`,`plan_detail`.`id` AS `n_detail`,`plan_detail`.`name` AS `n_detail_name` from ((`klg_update_plan_1` join `klg_update_plan` on(`klg_update_plan_1`.`case` = `klg_update_plan`.`c_id`)) join `plan_detail` on(`klg_update_plan_1`.`plan_detail` = `plan_detail`.`name` and `klg_update_plan`.`m_plan` = `plan_detail`.`plan`)) ;

-- ----------------------------
-- View structure for limit_balancer_bcw
-- ----------------------------
DROP VIEW IF EXISTS `limit_balancer_bcw`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `limit_balancer_bcw` AS select `case`.`case_group` AS `case_group`,`case`.`id` AS `id`,`case`.`created_by` AS `created_by`,`case`.`create_date` AS `create_date`,`case`.`created_by_01` AS `created_by_01`,`case`.`create_date_01` AS `create_date_01`,`case`.`source` AS `source`,`case`.`status` AS `status`,`case`.`status_01` AS `status_01`,`case`.`category` AS `category`,`case`.`type` AS `type`,`case`.`ref` AS `ref`,`case`.`final_decision` AS `final_decision`,`case`.`case_remarks` AS `case_remarks`,`case`.`averaged_cost` AS `averaged_cost`,`case`.`case_remarks_by` AS `case_remarks_by`,`case`.`case_remarks_date` AS `case_remarks_date`,`case`.`patient` AS `patient`,`case`.`dob` AS `dob`,`case`.`gender` AS `gender`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`member_card_edc` AS `member_card_edc`,`case`.`principle` AS `principle`,`case`.`relation` AS `relation`,`case`.`mobile` AS `mobile`,`case`.`client` AS `client`,`case`.`branch` AS `branch`,`case`.`company` AS `company`,`case`.`policy_status` AS `policy_status`,`case`.`policy_no` AS `policy_no`,`case`.`policy_holder` AS `policy_holder`,`case`.`policy_effective_date` AS `policy_effective_date`,`case`.`policy_expiry_date` AS `policy_expiry_date`,`case`.`policy_issue_date` AS `policy_issue_date`,`case`.`policy_declare_date` AS `policy_declare_date`,`case`.`policy_lapse_date` AS `policy_lapse_date`,`case`.`policy_revival_date` AS `policy_revival_date`,`case`.`policy_termination_date` AS `policy_termination_date`,`case`.`policy_suspend_date` AS `policy_suspend_date`,`case`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`case`.`waiting_period` AS `waiting_period`,`case`.`exclusion` AS `exclusion`,`case`.`special_condition` AS `special_condition`,`case`.`member_remarks` AS `member_remarks`,`case`.`member_remarks_by` AS `member_remarks_by`,`case`.`member_remarks_date` AS `member_remarks_date`,`case`.`program` AS `program`,`case`.`plan` AS `plan`,`case`.`plan_header` AS `plan_header`,`case`.`code_rawat` AS `code_rawat`,`case`.`plan_attach_date` AS `plan_attach_date`,`case`.`plan_expiry_date` AS `plan_expiry_date`,`case`.`rider` AS `rider`,`case`.`rider_attach_date` AS `rider_attach_date`,`case`.`rider_expiry_date` AS `rider_expiry_date`,`case`.`provider` AS `provider`,`case`.`provider_email` AS `provider_email`,`case`.`other_provider` AS `other_provider`,`case`.`other_provider_city` AS `other_provider_city`,`case`.`other_provider_country` AS `other_provider_country`,`case`.`provider_cancel` AS `provider_cancel`,`case`.`id_edc` AS `id_edc`,`case`.`currency_01` AS `currency_01`,`case`.`currency_02` AS `currency_02`,`case`.`currency_rate` AS `currency_rate`,`case`.`currency_rate_01_to_idr` AS `currency_rate_01_to_idr`,`case`.`currency_rate_idr_to_02` AS `currency_rate_idr_to_02`,`case`.`amount_currency_01` AS `amount_currency_01`,`case`.`admission_date` AS `admission_date`,`case`.`admission_time` AS `admission_time`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`symptom` AS `symptom`,`case`.`symptom_since` AS `symptom_since`,`case`.`vital_sign` AS `vital_sign`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`initial_diagnosis_01` AS `initial_diagnosis_01`,`case`.`treatment_plan` AS `treatment_plan`,`case`.`upload_haf` AS `upload_haf`,`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`case`.`haf_upload_date` AS `haf_upload_date`,`case`.`upload_doc` AS `upload_doc`,`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`case`.`doc_upload_date` AS `doc_upload_date`,`case`.`upload_haf_doc_finished` AS `upload_haf_doc_finished`,`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,`case`.`haf_doc_completed` AS `haf_doc_completed`,`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`case`.`issue_initial_log` AS `issue_initial_log`,`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`case`.`initial_log_issued_by_01` AS `initial_log_issued_by_01`,`case`.`initial_log_issue_date_01` AS `initial_log_issue_date_01`,`case`.`initial_claim_no` AS `initial_claim_no`,`case`.`initial_log_remarks` AS `initial_log_remarks`,`case`.`initial_log_approval` AS `initial_log_approval`,`case`.`discharge_plan` AS `discharge_plan`,`case`.`discharge_plan_received_by` AS `discharge_plan_received_by`,`case`.`discharge_plan_receive_date` AS `discharge_plan_receive_date`,`case`.`discharge_date` AS `discharge_date`,`case`.`discharge_doctor` AS `discharge_doctor`,`case`.`actual_treatment` AS `actual_treatment`,`case`.`diagnosis` AS `diagnosis`,`case`.`other_diagnosis` AS `other_diagnosis`,`case`.`surgery` AS `surgery`,`case`.`other_surgery` AS `other_surgery`,`case`.`bill_received` AS `bill_received`,`case`.`bill_received_by` AS `bill_received_by`,`case`.`bill_received_date` AS `bill_received_date`,`case`.`upload_bill` AS `upload_bill`,`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`case`.`bill_upload_date` AS `bill_upload_date`,`case`.`upload_bill_finished` AS `upload_bill_finished`,`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,`case`.`bill_completed` AS `bill_completed`,`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`case`.`bill_completed_by` AS `bill_completed_by`,`case`.`bill_completed_date` AS `bill_completed_date`,`case`.`bill_completed_by_01` AS `bill_completed_by_01`,`case`.`bill_completed_date_01` AS `bill_completed_date_01`,`case`.`ws_type` AS `ws_type`,`case`.`ws_option` AS `ws_option`,`case`.`ws_finished` AS `ws_finished`,`case`.`ws_finished_by` AS `ws_finished_by`,`case`.`ws_finished_date` AS `ws_finished_date`,`case`.`ws_approval` AS `ws_approval`,`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`case`.`ws_approval_by` AS `ws_approval_by`,`case`.`ws_approval_date` AS `ws_approval_date`,`case`.`ws_error_category` AS `ws_error_category`,`case`.`ws_error_type` AS `ws_error_type`,`case`.`ws_error_remarks` AS `ws_error_remarks`,`case`.`issuance_limit` AS `issuance_limit`,`case`.`issue_log` AS `issue_log`,`case`.`issue_log_option` AS `issue_log_option`,`case`.`log_issued_by` AS `log_issued_by`,`case`.`log_issue_date` AS `log_issue_date`,`case`.`log_issued_by_01` AS `log_issued_by_01`,`case`.`log_issue_date_01` AS `log_issue_date_01`,`case`.`claim_no` AS `claim_no`,`case`.`log_remarks` AS `log_remarks`,`case`.`log_bank` AS `log_bank`,`case`.`log_bank_branch` AS `log_bank_branch`,`case`.`log_bank_city` AS `log_bank_city`,`case`.`log_bank_account_no` AS `log_bank_account_no`,`case`.`log_bank_on_behalf_of` AS `log_bank_on_behalf_of`,`case`.`log_approval` AS `log_approval`,`case`.`nonlog_reason` AS `nonlog_reason`,`case`.`nonlog_remarks` AS `nonlog_remarks`,`case`.`nonlog_remarks_code` AS `nonlog_remarks_code`,`case`.`reject_reason` AS `reject_reason`,`case`.`reject_remarks` AS `reject_remarks`,`case`.`batch_received` AS `batch_received`,`case`.`bill_no` AS `bill_no`,`case`.`bill_issue_date` AS `bill_issue_date`,`case`.`bill_due_date` AS `bill_due_date`,`case`.`upload_original_bill` AS `upload_original_bill`,`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`case`.`original_bill_upload_date` AS `original_bill_upload_date`,`case`.`original_bill_upload_date_first` AS `original_bill_upload_date_first`,`case`.`original_bill_checked` AS `original_bill_checked`,`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`case`.`original_bill_checked_date` AS `original_bill_checked_date`,`case`.`original_bill_checked_01` AS `original_bill_checked_01`,`case`.`original_bill_checked_by_01` AS `original_bill_checked_by_01`,`case`.`original_bill_checked_date_01` AS `original_bill_checked_date_01`,`case`.`original_bill_checked_error_category` AS `original_bill_checked_error_category`,`case`.`original_bill_checked_error_type` AS `original_bill_checked_error_type`,`case`.`original_bill_checked_error_remarks` AS `original_bill_checked_error_remarks`,`case`.`close_case_option` AS `close_case_option`,`case`.`discount` AS `discount`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`case`.`original_bill_verified_error_category` AS `original_bill_verified_error_category`,`case`.`original_bill_verified_error_type` AS `original_bill_verified_error_type`,`case`.`original_bill_verified_error_remarks` AS `original_bill_verified_error_remarks`,`case`.`client_approval_for_payment` AS `client_approval_for_payment`,`case`.`payment_approval_by` AS `payment_approval_by`,`case`.`payment_approval_date` AS `payment_approval_date`,`case`.`upload_payment_approval` AS `upload_payment_approval`,`case`.`payment_date` AS `payment_date`,`case`.`paid_by` AS `paid_by`,`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,`case`.`upload_payment_date` AS `upload_payment_date`,`case`.`payment_date_01` AS `payment_date_01`,`case`.`paid_by_01` AS `paid_by_01`,`case`.`upload_proof_of_payment_01` AS `upload_proof_of_payment_01`,`case`.`upload_payment_date_01` AS `upload_payment_date_01`,`case`.`doc_send_back_to_client_required` AS `doc_send_back_to_client_required`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`send_received_by` AS `send_received_by`,`case`.`send_received_date` AS `send_received_date`,`case`.`edited_by` AS `edited_by`,`case`.`edit_date` AS `edit_date`,`case`.`case_closed_date` AS `case_closed_date`,`case`.`case_closed_date_01` AS `case_closed_date_01`,`case`.`case_reopen_date` AS `case_reopen_date`,`case`.`case_reopen_date_01` AS `case_reopen_date_01`,`case`.`procced_to_worksheet` AS `procced_to_worksheet`,`case`.`case_header` AS `case_header`,`case`.`is_clean` AS `is_clean`,`case`.`code_edc` AS `code_edc`,`case`.`TraceNumber` AS `TraceNumber`,`case`.`los` AS `los`,`case`.`copy_case` AS `copy_case`,`case`.`copy_case_no` AS `copy_case_no`,`case`.`copy_case_no_01` AS `copy_case_no_01`,`case`.`copy_by` AS `copy_by`,`case`.`copy_date` AS `copy_date`,`case`.`sms_send` AS `sms_send`,`case`.`sms_send_01` AS `sms_send_01`,`case`.`change_status` AS `change_status`,`case`.`change_status_01` AS `change_status_01`,`case`.`change_status_01_by` AS `change_status_01_by`,`case`.`change_status_01_date` AS `change_status_01_date`,`case`.`change_status_02` AS `change_status_02`,`case`.`change_status_02_by` AS `change_status_02_by`,`case`.`change_status_02_date` AS `change_status_02_date`,`case`.`userlevel` AS `userlevel`,`case`.`case_id_client` AS `case_id_client`,`case`.`cover_null` AS `cover_null` from `case` where `case`.`client` = 369 and `case`.`status` = 96 ;

-- ----------------------------
-- View structure for medisclick_activation
-- ----------------------------
DROP VIEW IF EXISTS `medisclick_activation`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `medisclick_activation` AS select `client`.`full_name` AS `client`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`member`.`member_id` AS `member_id`,`his-tpa`.`member`.`member_card` AS `member_card`,`his-tpa`.`member`.`member_dob` AS `member_dob`,if(`his-tpa`.`member`.`member_relation` = 1,'principle',if(`his-tpa`.`member`.`member_relation` = 2,'Spouse',if(`his-tpa`.`member`.`member_relation` = 3,'Child',if(`his-tpa`.`member`.`member_relation` = 4,'Dependant','')))) AS `relation`,`his-tpa`.`member`.`policy_no` AS `policy_no`,`his-tpa`.`member`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`member`.`policy_expiry_date` AS `policy_expiry_date`,if(`his-tpa`.`member`.`policy_status` = 0,'Disable',if(`his-tpa`.`member`.`policy_status` = 1,'Enable','')) AS `policy_status`,`his-tpa`.`member`.`member_email` AS `member_email`,if(`his-tpa`.`member`.`medisclick_activation` = 1,'Active',if(`his-tpa`.`member`.`medisclick_activation` = 0,'No Active','')) AS `medisclick_activation`,`his-tpa`.`member`.`id` AS `id` from (`his-tpa`.`member` join `his-tpa`.`client` on(`client`.`id` = `his-tpa`.`member`.`client`)) where `his-tpa`.`member`.`medisclick_activation` = 1 and `his-tpa`.`member`.`member_name`  not like '%dummy%' ;

-- ----------------------------
-- View structure for member_01
-- ----------------------------
DROP VIEW IF EXISTS `member_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `member_01` AS select `member`.`client` AS `client`,`member`.`branch` AS `branch`,`member`.`company` AS `company`,`member`.`id` AS `id`,`member`.`member_name` AS `member_name`,`member`.`member_id` AS `member_id`,`member`.`member_card` AS `member_card`,`member`.`member_dob` AS `member_dob`,`member`.`member_gender` AS `member_gender`,`member`.`member_marital` AS `member_marital`,`member`.`member_address` AS `member_address`,`member`.`member_country` AS `member_country`,`member`.`member_province` AS `member_province`,`member`.`member_city` AS `member_city`,`member`.`member_postal` AS `member_postal`,`member`.`member_phone` AS `member_phone`,`member`.`member_mobile` AS `member_mobile`,`member`.`member_email` AS `member_email`,`member`.`member_password` AS `member_password`,`member`.`member_relation` AS `member_relation`,`member`.`member_principle` AS `member_principle`,`member`.`policy_no` AS `policy_no`,`member`.`policy_holder` AS `policy_holder`,`member`.`policy_issue_date` AS `policy_issue_date`,`member`.`policy_declare_date` AS `policy_declare_date`,`member`.`policy_effective_date` AS `policy_effective_date`,`member`.`policy_expiry_date` AS `policy_expiry_date`,`member`.`policy_lapse_date` AS `policy_lapse_date`,`member`.`policy_revival_date` AS `policy_revival_date`,`member`.`policy_termination_date` AS `policy_termination_date`,`member`.`policy_status` AS `policy_status`,`member`.`program` AS `program`,`member`.`plan` AS `plan`,`member`.`plan_external` AS `plan_external`,`member`.`plan_attach_date` AS `plan_attach_date`,`member`.`plan_expiry_date` AS `plan_expiry_date`,`member`.`rider` AS `rider`,`member`.`rider_attach_date` AS `rider_attach_date`,`member`.`rider_expiry_date` AS `rider_expiry_date`,`member`.`special_condition` AS `special_condition`,`member`.`exclusion` AS `exclusion`,`member`.`bank` AS `bank`,`member`.`location` AS `location`,`member`.`account_no` AS `account_no`,`member`.`on_behalf_of` AS `on_behalf_of`,`member`.`medisclick_activation` AS `medisclick_activation`,`member`.`created_by` AS `created_by`,`member`.`create_date` AS `create_date`,`member`.`edited_by` AS `edited_by`,`member`.`edit_date` AS `edit_date`,`member`.`member_username` AS `member_username`,`member`.`member_name_encrypt` AS `member_name_encrypt`,`member`.`member_dob_encrypt` AS `member_dob_encrypt`,`member`.`member_phone_encrypt` AS `member_phone_encrypt`,`member`.`flag_login_medisclick` AS `flag_login_medisclick`,`member`.`policy_suspend_date` AS `policy_suspend_date`,`member`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`member`.`position` AS `position`,`member`.`department` AS `department`,`member`.`member_card_edc` AS `member_card_edc` from (`member` left join `member` `member_mirror` on(`member`.`member_principle` = `member_mirror`.`id`)) where `member`.`member_name`  not like '%dummy%' ;

-- ----------------------------
-- View structure for member_aia
-- ----------------------------
DROP VIEW IF EXISTS `member_aia`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `member_aia` AS select concat(`member`.`member_name`,`member`.`policy_no`) AS `member`,`member`.`id` AS `id` from `member` where `member`.`client` = 1 and `member`.`policy_declare_date` = '2019-08-06' ;

-- ----------------------------
-- View structure for member_aia_01
-- ----------------------------
DROP VIEW IF EXISTS `member_aia_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `member_aia_01` AS select `data_backup_member`.`id` AS `id`,concat(`data_backup_member`.`member_name`,`data_backup_member`.`policy_no`) AS `member` from `data_backup_member` ;

-- ----------------------------
-- View structure for member_mhc_cetak
-- ----------------------------
DROP VIEW IF EXISTS `member_mhc_cetak`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `member_mhc_cetak` AS select `his-tpa`.`company`.`name` AS `company`,`his-tpa`.`member`.`member_name` AS `member`,`his-tpa`.`member`.`policy_no` AS `policy_no`,`his-tpa`.`member`.`member_id` AS `member_id`,`his-tpa`.`plan`.`name` AS `plan`,'Multi Health Care Exclusive' AS `Group_name`,'Nil' AS `Excess`,`his-tpa`.`member`.`plan_attach_date` AS `policy_effective_date`,`his-tpa`.`member`.`policy_expiry_date` AS `policy_expiry_date` from (((((`his-tpa`.`member` left join `his-tpa`.`client` on(`his-tpa`.`member`.`client` = `client`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`company`.`id` = `his-tpa`.`member`.`company`)) left join `his-tpa`.`program` on(`his-tpa`.`member`.`program` = `his-tpa`.`program`.`id`)) left join `his-tpa`.`plan` on(`his-tpa`.`member`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`principle` on(`his-tpa`.`member`.`member_principle` = `principle`.`id`)) where `his-tpa`.`member`.`client` = 26 and `his-tpa`.`member`.`id` in (5381834,5381835,5381836,5381837,5403132,5403133,5403463) order by 1 ;

-- ----------------------------
-- View structure for patient
-- ----------------------------
DROP VIEW IF EXISTS `patient`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `patient` AS select `his-tpa`.`member`.`id` AS `id`,`his-tpa`.`member`.`member_id` AS `member_id`,`his-tpa`.`member`.`member_card` AS `member_card`,`his-tpa`.`member`.`member_name` AS `member_name`,date_format(`his-tpa`.`member`.`member_dob`,'%d/%m/%Y') AS `member_dob`,`his-tpa`.`member`.`member_gender` AS `member_gender`,`his-tpa`.`member`.`member_principle` AS `member_principle`,`his-tpa`.`member`.`member_relation` AS `member_relation`,`his-tpa`.`member`.`member_mobile` AS `member_mobile`,`his-tpa`.`member`.`client` AS `client_id`,`client`.`abbreviation_name` AS `client_name`,concat(`client`.`abbreviation_name`,' - ',`his-tpa`.`plan`.`name`) AS `client_plan`,`his-tpa`.`member`.`branch` AS `branch`,`his-tpa`.`member`.`company` AS `company`,if(`his-tpa`.`member`.`client` = 3,concat(`his-tpa`.`member`.`policy_no`,'-',`his-tpa`.`member`.`member_id`),if(`his-tpa`.`member`.`client` = 17,concat(`his-tpa`.`member`.`policy_no`,'-',`his-tpa`.`member`.`member_id`),`his-tpa`.`member`.`policy_no`)) AS `policy_no`,`his-tpa`.`member`.`policy_holder` AS `policy_holder`,`his-tpa`.`member`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`member`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`member`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`member`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`member`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`member`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`member`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`member`.`policy_status` AS `policy_status`,`his-tpa`.`member`.`program` AS `program`,`his-tpa`.`member`.`plan` AS `plan`,`his-tpa`.`member`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`member`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`member`.`rider` AS `rider`,`his-tpa`.`member`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`member`.`rider_expiry_date` AS `rider_expiry_date`,`his-tpa`.`member`.`special_condition` AS `special_condition`,if(`his-tpa`.`member`.`special_condition` like '%VIP%' or `his-tpa`.`member`.`special_condition` like '%VVIP%',1,0) AS `astra_vip`,`his-tpa`.`member`.`exclusion` AS `exclusion`,`his-tpa`.`program`.`currency` AS `currency`,`his-tpa`.`program`.`doc_send_back_required` AS `doc_send_back_required`,`his-tpa`.`member`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`his-tpa`.`member`.`policy_suspend_date` AS `policy_suspend_date`,`his-tpa`.`member`.`member_card_edc` AS `member_card_edc`,`his-tpa`.`member`.`bank` AS `bank`,`his-tpa`.`member`.`account_no` AS `account_no`,`his-tpa`.`member`.`on_behalf_of` AS `on_behalf_of`,`his-tpa`.`member`.`member_remarks` AS `member_remarks`,`his-tpa`.`member`.`remarks_by` AS `remarks_by`,`his-tpa`.`member`.`remarks_date` AS `remarks_date`,concat(coalesce(`his-tpa`.`member`.`policy_no`,' '),', ',coalesce(`his-tpa`.`member`.`member_id`,' '),', ',coalesce(`his-tpa`.`member`.`member_card`,' '),', ',coalesce(`his-tpa`.`member`.`member_card_edc`,' ')) AS `member_card_custom` from (((`his-tpa`.`member` join `his-tpa`.`client` on(`his-tpa`.`member`.`client` = `client`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`member`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`member`.`plan` = `his-tpa`.`plan`.`id`)) ;

-- ----------------------------
-- View structure for patient_detail
-- ----------------------------
DROP VIEW IF EXISTS `patient_detail`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%%` SQL SECURITY DEFINER VIEW `patient_detail` AS select `member`.`id` AS `patient`,`plan_detail`.`id` AS `detail`,`plan_detail`.`code` AS `code`,`plan_detail`.`name` AS `name`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,`plan_detail`.`max_day_rate` AS `max_day_rate`,`plan_detail`.`annual_limit` AS `annual_limit`,`plan_detail`.`cash_benefit_availability` AS `cash_benefit_availability` from (`member` join `plan_detail` on(`member`.`program` = `plan_detail`.`program` and `member`.`plan` = `plan_detail`.`plan`)) where `member`.`policy_status` = 1 ;

-- ----------------------------
-- View structure for patient_detail_balance
-- ----------------------------
DROP VIEW IF EXISTS `patient_detail_balance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `patient_detail_balance` AS select `case`.`patient` AS `patient`,`worksheet`.`detail` AS `detail`,`plan_detail`.`name` AS `name`,sum(`worksheet`.`day`) AS `day`,sum(`worksheet`.`cover`) AS `cover` from (((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) join `member` on(`case`.`patient` = `member`.`id`)) where `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 97 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`tick` = 1 and `worksheet`.`relocated_to` is null and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) >= if(cast(concat(month(curdate()),lpad(dayofmonth(curdate()),2,0)) as unsigned) <= cast(concat(month(`member`.`policy_effective_date`),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned),cast(concat(year(curdate()) - 1,lpad(month(`member`.`policy_effective_date`),2,0),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned),cast(concat(year(curdate()),lpad(month(`member`.`policy_effective_date`),2,0),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned)) and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) <= cast(concat(year(`case`.`policy_expiry_date`),lpad(month(`case`.`policy_expiry_date`),2,0),lpad(dayofmonth(`case`.`policy_expiry_date`),2,0)) as unsigned) group by `case`.`patient`,`plan_detail`.`name` order by NULL ;

-- ----------------------------
-- View structure for patient_detail_balance_02
-- ----------------------------
DROP VIEW IF EXISTS `patient_detail_balance_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `patient_detail_balance_02` AS select `case`.`patient` AS `patient`,`worksheet`.`detail` AS `detail`,`plan_detail`.`name` AS `name`,sum(`worksheet`.`day`) AS `day`,sum(`worksheet`.`cover`) AS `cover` from (((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) join `member` on(`case`.`patient` = `member`.`id`)) where `case`.`client` = 11 and `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`cover` <> 0 and `worksheet`.`relocated_to` is null and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) >= cast(concat(year(cast('2015-08-31' as date)),lpad(month(cast('2015-08-31' as date)),2,0),lpad(dayofmonth(cast('2015-08-31' as date)),2,0)) as unsigned) and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) <= cast(concat(year(cast('2016-11-09' as date)),lpad(month(cast('2016-11-09' as date)),2,0),lpad(dayofmonth(cast('2016-11-09' as date)),2,0)) as unsigned) group by `case`.`patient`,`plan_detail`.`name` order by NULL ;

-- ----------------------------
-- View structure for patient_header
-- ----------------------------
DROP VIEW IF EXISTS `patient_header`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%%` SQL SECURITY DEFINER VIEW `patient_header` AS select `member`.`id` AS `patient`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `annual_limit`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,`plan_header`.`copayment` AS `copayment` from (`member` join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) where `member`.`policy_status` = 1 ;

-- ----------------------------
-- View structure for patient_header_balance
-- ----------------------------
DROP VIEW IF EXISTS `patient_header_balance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `patient_header_balance` AS select `case`.`patient` AS `patient`,`worksheet`.`header` AS `header`,`plan_header`.`name` AS `name`,sum(`worksheet`.`cover`) + sum(`worksheet`.`cash_benefit`) AS `cover`,sum(`worksheet`.`deductible`) AS `deductible` from (((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_header` on(`worksheet`.`header` = `plan_header`.`id`)) join `member` on(`case`.`patient` = `member`.`id`)) where `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 97 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`tick` = 1 and `worksheet`.`relocated_to` is null and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) >= if(cast(concat(month(curdate()),lpad(dayofmonth(curdate()),2,0)) as unsigned) <= cast(concat(month(`member`.`policy_effective_date`),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned),cast(concat(year(curdate()) - 1,lpad(month(`member`.`policy_effective_date`),2,0),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned),cast(concat(year(curdate()),lpad(month(`member`.`policy_effective_date`),2,0),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned)) and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) <= cast(concat(year(`case`.`policy_expiry_date`),lpad(month(`case`.`policy_expiry_date`),2,0),lpad(dayofmonth(`case`.`policy_expiry_date`),2,0)) as unsigned) group by `case`.`patient`,`plan_header`.`name` order by NULL ;

-- ----------------------------
-- View structure for patient_header_balance_02
-- ----------------------------
DROP VIEW IF EXISTS `patient_header_balance_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `patient_header_balance_02` AS select `case`.`patient` AS `patient`,`worksheet`.`header` AS `header`,`plan_header`.`name` AS `name`,sum(`worksheet`.`cover`) AS `cover`,sum(`worksheet`.`deductible`) AS `deductible` from (((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_header` on(`worksheet`.`header` = `plan_header`.`id`)) join `member` on(`case`.`patient` = `member`.`id`)) where `case`.`client` = 11 and `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`cover` <> 0 and `worksheet`.`relocated_to` is null and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) >= cast(concat(year(cast('2016-01-01' as date)),lpad(month(cast('2016-01-01' as date)),2,0),lpad(dayofmonth(cast('2016-01-01' as date)),2,0)) as unsigned) and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) <= cast(concat(year(cast('2017-12-31' as date)),lpad(month(cast('2017-12-31' as date)),2,0),lpad(dayofmonth(cast('2017-12-31' as date)),2,0)) as unsigned) group by `case`.`patient`,`plan_header`.`name` order by NULL ;

-- ----------------------------
-- View structure for patient_hospital_portal
-- ----------------------------
DROP VIEW IF EXISTS `patient_hospital_portal`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `patient_hospital_portal` AS select `patient`.`id` AS `id`,`patient`.`member_id` AS `member_id`,`patient`.`member_card` AS `member_card`,`patient`.`member_name` AS `member_name`,`patient`.`member_dob` AS `member_dob`,`patient`.`member_gender` AS `member_gender`,`patient`.`member_principle` AS `member_principle`,`patient`.`member_relation` AS `member_relation`,`patient`.`member_mobile` AS `member_mobile`,`patient`.`client_id` AS `client_id`,`patient`.`client_name` AS `client_name`,`patient`.`client_plan` AS `client_plan`,`patient`.`branch` AS `branch`,`patient`.`company` AS `company`,`patient`.`policy_no` AS `policy_no`,`patient`.`policy_holder` AS `policy_holder`,`patient`.`policy_effective_date` AS `policy_effective_date`,`patient`.`policy_expiry_date` AS `policy_expiry_date`,`patient`.`policy_issue_date` AS `policy_issue_date`,`patient`.`policy_declare_date` AS `policy_declare_date`,`patient`.`policy_lapse_date` AS `policy_lapse_date`,`patient`.`policy_revival_date` AS `policy_revival_date`,`patient`.`policy_termination_date` AS `policy_termination_date`,`patient`.`policy_status` AS `policy_status`,`patient`.`program` AS `program`,`patient`.`plan` AS `plan`,`patient`.`plan_attach_date` AS `plan_attach_date`,`patient`.`plan_expiry_date` AS `plan_expiry_date`,`patient`.`rider` AS `rider`,`patient`.`rider_attach_date` AS `rider_attach_date`,`patient`.`rider_expiry_date` AS `rider_expiry_date`,`patient`.`special_condition` AS `special_condition`,`patient`.`exclusion` AS `exclusion`,`patient`.`currency` AS `currency`,`patient`.`doc_send_back_required` AS `doc_send_back_required`,`patient`.`policy_unsuspend_date` AS `policy_unsuspend_date`,`patient`.`policy_suspend_date` AS `policy_suspend_date`,`client`.`full_name` AS `client_full_name`,`his-tpa`.`conditions_polis`.`ketentuan` AS `ketentuan` from ((`his-tpa`.`client` left join `his-tpa`.`patient` on(`client`.`id` = `patient`.`client_id`)) left join `his-tpa`.`conditions_polis` on(`client`.`id` = `his-tpa`.`conditions_polis`.`client`)) where if(`patient`.`client_id` = 37,`patient`.`client_plan` like '%Rawat Jalan%',`patient`.`client_id` in (6,8,14,28,30,35,36,38,282,283,284,285,288,289,293,369,378,380,389,401,402)) ;

-- ----------------------------
-- View structure for payment_claim_detail_fullcover
-- ----------------------------
DROP VIEW IF EXISTS `payment_claim_detail_fullcover`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `payment_claim_detail_fullcover` AS select date_format(coalesce(`his-tpa`.`case`.`create_date_01`,`his-tpa`.`case`.`create_date`),'%Y-%m-%d') AS `RECEIVED_DATE`,`client`.`id` AS `CLIENT_ID`,`client`.`full_name` AS `CLIENT_NAME`,`his-tpa`.`case`.`policy_no` AS `POLICY_NO`,`his-tpa`.`program`.`name` AS `PROGRAM`,`his-tpa`.`plan`.`name` AS `PLAN_ID`,`his-tpa`.`case`.`id` AS `CLAIM_REF`,`his-tpa`.`member`.`member_name` AS `PATIENT`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `GENDER`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `CATEGORY`,`his-tpa`.`plan_detail`.`name` AS `NAME_OF_BENEFIT`,`his-tpa`.`diagnosis`.`code` AS `DIAGNOSIS_CODE`,`his-tpa`.`diagnosis`.`name` AS `DIAGNOSIS_DESC`,`provider`.`full_name` AS `HOSPITAL`,`his-tpa`.`case`.`other_provider` AS `OTHER_HOSPITAL`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `TYPE`,`his-tpa`.`case`.`admission_date` AS `ADMISSION_DATE`,cast(`his-tpa`.`case`.`discharge_date` as date) AS `DISCHARGE_DATE`,`his-tpa`.`country`.`name` AS `CURRENCY_01`,`his-tpa`.`country`.`name` AS `CURRENCY_02`,`his-tpa`.`worksheet_01`.`actual` AS `TOTAL_AMOUNT_INCURRED`,`his-tpa`.`worksheet_01`.`cover` AS `TOTAL_AMOUNT_APPROVED`,`his-tpa`.`worksheet_01`.`excess` AS `TOTAL_AMOUNT_NOT_APPROVED`,date_format(cast(`his-tpa`.`case`.`payment_date` as date),'%Y-%m-%d') AS `PAYMENT_DATE`,'Paid' AS `Status`,`his-tpa`.`case_status`.`name` AS `CASE_STATUS`,`his-tpa`.`worksheet_01`.`remarks` AS `REMARKS` from ((((((((((((((`his-tpa`.`case` left join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) join `his-tpa`.`worksheet_01` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet_01`.`case`)) join `his-tpa`.`plan_header` on(`his-tpa`.`worksheet_01`.`header` = `his-tpa`.`plan_header`.`id`)) join `his-tpa`.`plan_detail` on(`his-tpa`.`worksheet_01`.`detail` = `his-tpa`.`plan_detail`.`id`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`issue_log` = 2 and `his-tpa`.`case`.`issue_log_option` in (1,2) group by `his-tpa`.`worksheet_01`.`id` ;

-- ----------------------------
-- View structure for payment_claim_header_fullcover
-- ----------------------------
DROP VIEW IF EXISTS `payment_claim_header_fullcover`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `payment_claim_header_fullcover` AS select date_format(coalesce(`his-tpa`.`case`.`create_date_01`,`his-tpa`.`case`.`create_date`),'%Y-%m-%d') AS `RECEIVED_DATE`,`client`.`id` AS `CLIENT_ID`,`client`.`full_name` AS `CLIENT_NAME`,`his-tpa`.`case`.`policy_no` AS `POLICY_NO`,`his-tpa`.`case`.`policy_effective_date` AS `POLICY_EFFECTIVE_DATE`,`his-tpa`.`case`.`policy_expiry_date` AS `POLICY_EXPIRY_DATE`,case `his-tpa`.`case`.`policy_status` when 0 then 'Disable' when 1 then 'Enable' else 'N/A' end AS `POLICY_STATUS`,`his-tpa`.`case`.`member_id` AS `MEMBER_ID`,`his-tpa`.`case`.`member_card` AS `MEMBER_CARD`,`his-tpa`.`program`.`name` AS `PROGRAM`,`his-tpa`.`plan`.`name` AS `PLAN`,`his-tpa`.`case`.`rider` AS `RIDER`,`his-tpa`.`company`.`name` AS `COMPANY`,`his-tpa`.`case`.`policy_holder` AS `PRINCIPLE`,`his-tpa`.`member`.`member_name` AS `PATIENT`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `RELATION`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `GENDER`,`his-tpa`.`case`.`id` AS `CASE_ID`,`his-tpa`.`case`.`admission_date` AS `ADMISSION_DATE`,cast(`his-tpa`.`case`.`discharge_date` as date) AS `DISCHARGE_DATE`,`his-tpa`.`diagnosis`.`code` AS `DIAGNOSIS_CODE`,`his-tpa`.`diagnosis`.`name` AS `DIAGNOSIS_DESC`,`provider`.`full_name` AS `HOSPITAL`,`his-tpa`.`case`.`other_provider` AS `OTHER_HOSPITAL`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `CATEGORY`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `TYPE`,`his-tpa`.`country`.`name` AS `CURRENCY_01`,`his-tpa`.`country`.`name` AS `CURRENCY_02`,(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) AS `ACTUAL`,(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) AS `COVER`,(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) AS `EXCESS`,cast(`his-tpa`.`case`.`original_bill_upload_date` as date) AS `DOC_RECEIVE_DATE`,cast(`his-tpa`.`case`.`log_issue_date` as date) AS `PROCESS_DATE`,cast(`his-tpa`.`case`.`original_bill_checked_date` + interval 1 day as date) AS `SUBMIT_APPROVAL_DATE`,cast(`his-tpa`.`case`.`original_bill_verified_date` as date) AS `APPROVAL_DATE_FROM_CLIENT`,date_format(cast(`his-tpa`.`case`.`payment_date` as date),'%Y-%m-%d') AS `PAYMENT_DATE`,`his-tpa`.`country`.`name` AS `BRANCH`,`his-tpa`.`case`.`created_by` AS `CREATED_BY`,`his-tpa`.`case_status`.`name` AS `CASE_STATUS`,`his-tpa`.`case`.`ref` AS `REF` from ((((((((((((((`his-tpa`.`case` left join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) left join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) left join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) left join `his-tpa`.`plan_header` on(`his-tpa`.`worksheet`.`header` = `his-tpa`.`plan_header`.`id`)) left join `his-tpa`.`plan_detail` on(`his-tpa`.`worksheet`.`detail` = `his-tpa`.`plan_detail`.`id`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`issue_log` = 2 and `his-tpa`.`case`.`issue_log_option` in (1,2) group by `his-tpa`.`case`.`id` ;

-- ----------------------------
-- View structure for pending_cashless_inpatient
-- ----------------------------
DROP VIEW IF EXISTS `pending_cashless_inpatient`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pending_cashless_inpatient` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`create_date_01` AS `DocReceieveDate`,`his-tpa`.`case_status`.`name` AS `status`,case `his-tpa`.`case`.`source` when 1 then 'Medisclick' when 2 then 'Medisclick' when 3 then 'eCentrix' when 4 then 'eReimbursement' when 5 then 'Hospital Portal' else 'Healthcare' end AS `Source`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `category`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`case`.`dob` AS `dob`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`department`.`name` AS `DEPARTMENT`,case `his-tpa`.`case`.`policy_status` when 1 then 'Enable' when 0 then 'Disable' else 'N/A' end AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`program`.`name` AS `program`,`his-tpa`.`plan`.`name` AS `plan`,`his-tpa`.`member`.`plan_external` AS `plan_external`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`rider`.`name` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,case `provider`.`full_name` when 'NON PARTICIPATING HOSPITAL' then concat(`his-tpa`.`case`.`other_provider`,' (Non Panel)') else `provider`.`full_name` end AS `provider`,`provider`.`city` AS `city`,`his-tpa`.`country`.`name` AS `counttr`,case `his-tpa`.`country`.`name` when 'Indonesia' then 'Domestic' else 'Overseas' end AS `ProviderDomicile`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,case `his-tpa`.`case`.`upload_haf_doc_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,case `his-tpa`.`case`.`haf_doc_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,case `his-tpa`.`case`.`issue_initial_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,case `his-tpa`.`case`.`initial_log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,concat_ws(',',`his-tpa`.`diagnosis`.`code`,`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`exclusion` AS `exclusion`,case `his-tpa`.`case`.`bill_received` when 0 then 'Not Received' when 1 then 'Received' else 'N/A' end AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,case `his-tpa`.`case`.`upload_bill_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_bill_finished`,case `his-tpa`.`case`.`bill_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `BillCompleteBy_M`,`his-tpa`.`case`.`bill_completed_date_01` AS `BillCompleteDate_M`,`his-tpa`.`case`.`ws_type` AS `ws_type`,case `his-tpa`.`case`.`ws_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,case `his-tpa`.`case`.`ws_approval` when 0 then 'Pending' when 1 then 'Not Approve' when 2 then 'Approve' else 'N/A' end AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,case `his-tpa`.`case`.`issue_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_log`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `LogIssued_M`,`his-tpa`.`case`.`log_issue_date_01` AS `LogIssueDate_M`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,case `his-tpa`.`case`.`log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,case `his-tpa`.`case`.`original_bill_checked` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,case `his-tpa`.`case`.`close_case_option` when 1 then 'By Document Send Back' when 2 then 'By Payment' else 'N/A' end AS `close_case_option`,case `his-tpa`.`case`.`original_bill_verified` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,case `his-tpa`.`case`.`doc_send_back_to_client_required` when 1 then 'Required' when 0 then 'Not Required' else 'N/A' end AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `actual`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `cover`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `excess`,`his-tpa`.`case`.`bill_issue_date` AS `BillReceieveDate`,if(`his-tpa`.`case`.`status` = 1 or `his-tpa`.`case`.`status` = 2,timestampdiff(HOUR,`his-tpa`.`case`.`create_date`,current_timestamp()),timestampdiff(HOUR,`his-tpa`.`case`.`create_date`,`his-tpa`.`case`.`haf_doc_completed_date`)) AS `Document_InitialLOG_Hours`,if(`his-tpa`.`case`.`status` = 3,timestampdiff(MINUTE,`his-tpa`.`case`.`haf_doc_completed_date`,current_timestamp()),timestampdiff(MINUTE,`his-tpa`.`case`.`haf_doc_completed_date`,`his-tpa`.`case`.`initial_log_issue_date`)) AS `Initial_LOG_Minutes`,'' AS `Provider_Discharge_Hours`,if(`his-tpa`.`case`.`status` = 4 or `his-tpa`.`case`.`status` = 5,timestampdiff(HOUR,`his-tpa`.`case`.`discharge_date`,current_timestamp()),timestampdiff(HOUR,`his-tpa`.`case`.`discharge_date`,`his-tpa`.`case`.`bill_completed_date`)) AS `Document_FinalLOG_Hours`,if(`his-tpa`.`case`.`status` = 6 or `his-tpa`.`case`.`status` = 7 or `his-tpa`.`case`.`status` = 8 or `his-tpa`.`case`.`status` = 9 or `his-tpa`.`case`.`status` = 10,timestampdiff(HOUR,`his-tpa`.`case`.`bill_completed_date`,current_timestamp()),timestampdiff(HOUR,`his-tpa`.`case`.`bill_completed_date`,`his-tpa`.`case`.`log_issue_date`)) AS `Final_LOG_Hours`,if(`his-tpa`.`case`.`status` = 11,timestampdiff(DAY,`his-tpa`.`case`.`log_issue_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`log_issue_date`,`his-tpa`.`case`.`bill_issue_date`)) AS `Document_OB_Hosp_Days`,if(`his-tpa`.`case`.`status` = 11,timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,`his-tpa`.`case`.`original_bill_upload_date`)) AS `Document_OB_Days`,if(`his-tpa`.`case`.`status` = 12 or `his-tpa`.`case`.`status` = 13 or `his-tpa`.`case`.`status` = 14,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,`his-tpa`.`case`.`original_bill_checked_date`)) AS `Document_OBCheck_Days`,if(`his-tpa`.`case`.`status` = 15,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,current_timestamp())),if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`original_bill_verified_date`),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`original_bill_verified_date`))) AS `Document_OBVerified_Days`,if(`his-tpa`.`case`.`status` = 16,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,`his-tpa`.`case`.`payment_date`)) AS `Document_Payment_Days`,if(`his-tpa`.`case`.`status` = 17,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,current_timestamp())),if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`))) AS `Document_Sendback_Days`,if(`his-tpa`.`case`.`status` = 18,timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date`)) AS `Document_ClientReceive_Days` from ((((((((((((((`his-tpa`.`case` join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`department` on(`his-tpa`.`member`.`department` = `his-tpa`.`department`.`id`)) left join `his-tpa`.`position` on(`his-tpa`.`member`.`position` = `his-tpa`.`position`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`status` not in (95,96,97,98,99,30,31,32,33,34,86,87,88,89) and `his-tpa`.`case`.`category` = 1 and `his-tpa`.`case`.`type` = 2 and `his-tpa`.`case_status`.`name`  not like 'Provider%' group by `his-tpa`.`case`.`id` order by `his-tpa`.`case`.`status` ;

-- ----------------------------
-- View structure for pending_cashless_nonlog
-- ----------------------------
DROP VIEW IF EXISTS `pending_cashless_nonlog`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pending_cashless_nonlog` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`create_date_01` AS `DocReceieveDate`,`his-tpa`.`case_status`.`name` AS `status`,case `his-tpa`.`case`.`source` when 1 then 'Medisclick' when 2 then 'Medisclick' when 3 then 'eCentrix' when 4 then 'eReimbursement' when 5 then 'Hospital Portal' else 'Healthcare' end AS `Source`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `category`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`case`.`dob` AS `dob`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`department`.`name` AS `DEPARTMENT`,case `his-tpa`.`case`.`policy_status` when 1 then 'Enable' when 0 then 'Disable' else 'N/A' end AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`program`.`name` AS `program`,`his-tpa`.`plan`.`name` AS `plan`,`his-tpa`.`member`.`plan_external` AS `plan_external`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`rider`.`name` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,case `provider`.`full_name` when 'NON PARTICIPATING HOSPITAL' then concat(`his-tpa`.`case`.`other_provider`,' (Non Panel)') else `provider`.`full_name` end AS `provider`,`provider`.`city` AS `city`,`his-tpa`.`country`.`name` AS `counttr`,case `his-tpa`.`country`.`name` when 'Indonesia' then 'Domestic' else 'Overseas' end AS `ProviderDomicile`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,case `his-tpa`.`case`.`upload_haf_doc_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,case `his-tpa`.`case`.`haf_doc_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,case `his-tpa`.`case`.`issue_initial_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,case `his-tpa`.`case`.`initial_log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,concat_ws(',',`his-tpa`.`diagnosis`.`code`,`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`exclusion` AS `exclusion`,case `his-tpa`.`case`.`bill_received` when 0 then 'Not Received' when 1 then 'Received' else 'N/A' end AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,case `his-tpa`.`case`.`upload_bill_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_bill_finished`,case `his-tpa`.`case`.`bill_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `BillCompleteBy_M`,`his-tpa`.`case`.`bill_completed_date_01` AS `BillCompleteDate_M`,`his-tpa`.`case`.`ws_type` AS `ws_type`,case `his-tpa`.`case`.`ws_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,case `his-tpa`.`case`.`ws_approval` when 0 then 'Pending' when 1 then 'Not Approve' when 2 then 'Approve' else 'N/A' end AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,case `his-tpa`.`case`.`issue_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_log`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `LogIssued_M`,`his-tpa`.`case`.`log_issue_date_01` AS `LogIssueDate_M`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,case `his-tpa`.`case`.`log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,case `his-tpa`.`case`.`original_bill_checked` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,case `his-tpa`.`case`.`close_case_option` when 1 then 'By Document Send Back' when 2 then 'By Payment' else 'N/A' end AS `close_case_option`,case `his-tpa`.`case`.`original_bill_verified` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,case `his-tpa`.`case`.`doc_send_back_to_client_required` when 1 then 'Required' when 0 then 'Not Required' else 'N/A' end AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `actual`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `cover`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `excess`,`his-tpa`.`case`.`bill_issue_date` AS `BillReceieveDate`,'' AS `Document_InitialLOG_Hours`,'' AS `Initial_LOG_Minutes`,'' AS `Provider_Discharge_Hours`,'' AS `Document_FinalLOG_Hours`,'' AS `Final_LOG_Hours`,if(`his-tpa`.`case`.`status` = 19,if(`his-tpa`.`case`.`discharge_date` is null = 1,timestampdiff(DAY,`his-tpa`.`case`.`create_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`discharge_date`,current_timestamp())),timestampdiff(DAY,`his-tpa`.`case`.`discharge_date`,`his-tpa`.`case`.`bill_issue_date`)) AS `Document_OB_Hosp_Days`,if(`his-tpa`.`case`.`status` = 19,timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,`his-tpa`.`case`.`original_bill_upload_date`)) AS `Document_OB_Days`,if(`his-tpa`.`case`.`status` = 20 or `his-tpa`.`case`.`status` = 21 or `his-tpa`.`case`.`status` = 22 or `his-tpa`.`case`.`status` = 23 or `his-tpa`.`case`.`status` = 24 or `his-tpa`.`case`.`status` = 25,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,`his-tpa`.`case`.`original_bill_checked_date`)) AS `Document_OBCheck_Days`,if(`his-tpa`.`case`.`status` = 26,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,current_timestamp())),if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`original_bill_verified_date`),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`original_bill_verified_date`))) AS `Document_OBVerified_Days`,if(`his-tpa`.`case`.`status` = 27,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,`his-tpa`.`case`.`payment_date`)) AS `Document_Payment_Days`,if(`his-tpa`.`case`.`status` = 28,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,current_timestamp())),if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`))) AS `Document_Sendback_Days`,if(`his-tpa`.`case`.`status` = 29,timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date`)) AS `Document_ClientReceive_Days` from ((((((((((((((`his-tpa`.`case` join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`department` on(`his-tpa`.`member`.`department` = `his-tpa`.`department`.`id`)) left join `his-tpa`.`position` on(`his-tpa`.`member`.`position` = `his-tpa`.`position`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`status` not in (95,96,97,98,99,30,31,32,33,34,86,87,88,89) and `his-tpa`.`case`.`type` = 3 and `his-tpa`.`case_status`.`name`  not like 'Provider%' group by `his-tpa`.`case`.`id` order by `his-tpa`.`case`.`status` ;

-- ----------------------------
-- View structure for pending_cashless_outpatient
-- ----------------------------
DROP VIEW IF EXISTS `pending_cashless_outpatient`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pending_cashless_outpatient` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`create_date_01` AS `DocReceieveDate`,`his-tpa`.`case_status`.`name` AS `status`,case `his-tpa`.`case`.`source` when 1 then 'Medisclick' when 2 then 'Medisclick' when 3 then 'eCentrix' when 4 then 'eReimbursement' when 5 then 'Hospital Portal' else 'Healthcare' end AS `Source`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `category`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`case`.`dob` AS `dob`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`department`.`name` AS `DEPARTMENT`,case `his-tpa`.`case`.`policy_status` when 1 then 'Enable' when 0 then 'Disable' else 'N/A' end AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`program`.`name` AS `program`,`his-tpa`.`plan`.`name` AS `plan`,`his-tpa`.`member`.`plan_external` AS `plan_external`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`rider`.`name` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,case `provider`.`full_name` when 'NON PARTICIPATING HOSPITAL' then concat(`his-tpa`.`case`.`other_provider`,' (Non Panel)') else `provider`.`full_name` end AS `provider`,`provider`.`city` AS `city`,`his-tpa`.`country`.`name` AS `counttr`,case `his-tpa`.`country`.`name` when 'Indonesia' then 'Domestic' else 'Overseas' end AS `ProviderDomicile`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,case `his-tpa`.`case`.`upload_haf_doc_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,case `his-tpa`.`case`.`haf_doc_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,case `his-tpa`.`case`.`issue_initial_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,case `his-tpa`.`case`.`initial_log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,concat_ws(',',`his-tpa`.`diagnosis`.`code`,`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`exclusion` AS `exclusion`,case `his-tpa`.`case`.`bill_received` when 0 then 'Not Received' when 1 then 'Received' else 'N/A' end AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,case `his-tpa`.`case`.`upload_bill_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_bill_finished`,case `his-tpa`.`case`.`bill_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `BillCompleteBy_M`,`his-tpa`.`case`.`bill_completed_date_01` AS `BillCompleteDate_M`,`his-tpa`.`case`.`ws_type` AS `ws_type`,case `his-tpa`.`case`.`ws_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,case `his-tpa`.`case`.`ws_approval` when 0 then 'Pending' when 1 then 'Not Approve' when 2 then 'Approve' else 'N/A' end AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,case `his-tpa`.`case`.`issue_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_log`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `LogIssued_M`,`his-tpa`.`case`.`log_issue_date_01` AS `LogIssueDate_M`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,case `his-tpa`.`case`.`log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,case `his-tpa`.`case`.`original_bill_checked` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,case `his-tpa`.`case`.`close_case_option` when 1 then 'By Document Send Back' when 2 then 'By Payment' else 'N/A' end AS `close_case_option`,case `his-tpa`.`case`.`original_bill_verified` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,case `his-tpa`.`case`.`doc_send_back_to_client_required` when 1 then 'Required' when 0 then 'Not Required' else 'N/A' end AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `actual`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `cover`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `excess`,`his-tpa`.`case`.`bill_issue_date` AS `BillReceieveDate`,'' AS `Document_InitialLOG_Hours`,'' AS `Initial_LOG_Minutes`,if(`his-tpa`.`case`.`status` = 1 or `his-tpa`.`case`.`status` = 2 or `his-tpa`.`case`.`status` = 3,timestampdiff(HOUR,`his-tpa`.`case`.`create_date`,current_timestamp()),timestampdiff(HOUR,`his-tpa`.`case`.`create_date`,`his-tpa`.`case`.`discharge_date`)) AS `Provider_Discharge_Hours`,if(`his-tpa`.`case`.`status` = 4 or `his-tpa`.`case`.`status` = 5,timestampdiff(HOUR,`his-tpa`.`case`.`discharge_date`,current_timestamp()),timestampdiff(HOUR,`his-tpa`.`case`.`discharge_date`,`his-tpa`.`case`.`bill_completed_date`)) AS `Document_FinalLOG_Hours`,if(`his-tpa`.`case`.`status` = 6 or `his-tpa`.`case`.`status` = 7 or `his-tpa`.`case`.`status` = 8 or `his-tpa`.`case`.`status` = 9 or `his-tpa`.`case`.`status` = 10,timestampdiff(HOUR,`his-tpa`.`case`.`bill_completed_date`,current_timestamp()),timestampdiff(HOUR,`his-tpa`.`case`.`bill_completed_date`,`his-tpa`.`case`.`log_issue_date`)) AS `Final_LOG_Hours`,if(`his-tpa`.`case`.`status` = 11,timestampdiff(DAY,`his-tpa`.`case`.`log_issue_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`log_issue_date`,`his-tpa`.`case`.`bill_issue_date`)) AS `Document_OB_Hosp_Days`,if(`his-tpa`.`case`.`status` = 11,timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,`his-tpa`.`case`.`original_bill_upload_date`)) AS `Document_OB_Days`,if(`his-tpa`.`case`.`status` = 12 or `his-tpa`.`case`.`status` = 13 or `his-tpa`.`case`.`status` = 14,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,`his-tpa`.`case`.`original_bill_checked_date`)) AS `Document_OBCheck_Days`,if(`his-tpa`.`case`.`status` = 15,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,current_timestamp())),if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`original_bill_verified_date`),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`original_bill_verified_date`))) AS `Document_OBVerified_Days`,if(`his-tpa`.`case`.`status` = 16,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,`his-tpa`.`case`.`payment_date`)) AS `Document_Payment_Days`,if(`his-tpa`.`case`.`status` = 17,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,current_timestamp())),if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`))) AS `Document_Sendback_Days`,if(`his-tpa`.`case`.`status` = 18,timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date`)) AS `Document_ClientReceive_Days` from ((((((((((((((`his-tpa`.`case` join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`department` on(`his-tpa`.`member`.`department` = `his-tpa`.`department`.`id`)) left join `his-tpa`.`position` on(`his-tpa`.`member`.`position` = `his-tpa`.`position`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`status` not in (95,96,97,98,99,30,31,32,33,34,86,87,88,89) and `his-tpa`.`case`.`category` = 0 and `his-tpa`.`case`.`type` = 2 and `his-tpa`.`case_status`.`name`  not like 'Provider%' group by `his-tpa`.`case`.`id` order by `his-tpa`.`case`.`status` ;

-- ----------------------------
-- View structure for pending_reimbursement
-- ----------------------------
DROP VIEW IF EXISTS `pending_reimbursement`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pending_reimbursement` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,`his-tpa`.`case`.`create_date_01` AS `DocReceieveDate`,`his-tpa`.`case_status`.`name` AS `status`,case `his-tpa`.`case`.`source` when 1 then 'Medisclick' when 2 then 'Medisclick' when 3 then 'eCentrix' when 4 then 'eReimbursement' when 5 then 'Hospital Portal' else 'Healthcare' end AS `Source`,case `his-tpa`.`case`.`category` when 0 then 'Outpatient' when 1 then 'Inpatient' else 'N/A' end AS `category`,case `his-tpa`.`case`.`type` when 1 then 'Reimbursement' when 2 then 'Cashless' when 3 then 'Cashless Non-LOG' when 4 then 'Pay & File' else 'N/A' end AS `type`,`his-tpa`.`case`.`ref` AS `ref`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`case`.`dob` AS `dob`,case `his-tpa`.`case`.`gender` when 0 then 'Female' when 1 then 'Male' else 'N/A' end AS `gender`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`member_card` AS `member_card`,case `his-tpa`.`case`.`relation` when 1 then 'Principle' when 2 then 'Spouse' when 3 then 'Child' when 4 then 'Dependant' else 'N/A' end AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`department`.`name` AS `DEPARTMENT`,case `his-tpa`.`case`.`policy_status` when 1 then 'Enable' when 0 then 'Disable' else 'N/A' end AS `policy_status`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`case`.`policy_holder` AS `policy_holder`,`his-tpa`.`case`.`policy_effective_date` AS `policy_effective_date`,`his-tpa`.`case`.`policy_expiry_date` AS `policy_expiry_date`,`his-tpa`.`case`.`policy_issue_date` AS `policy_issue_date`,`his-tpa`.`case`.`policy_declare_date` AS `policy_declare_date`,`his-tpa`.`case`.`policy_lapse_date` AS `policy_lapse_date`,`his-tpa`.`case`.`policy_revival_date` AS `policy_revival_date`,`his-tpa`.`case`.`policy_termination_date` AS `policy_termination_date`,`his-tpa`.`case`.`special_condition` AS `special_condition`,`his-tpa`.`program`.`name` AS `program`,`his-tpa`.`plan`.`name` AS `plan`,`his-tpa`.`member`.`plan_external` AS `plan_external`,`his-tpa`.`case`.`plan_attach_date` AS `plan_attach_date`,`his-tpa`.`case`.`plan_expiry_date` AS `plan_expiry_date`,`his-tpa`.`rider`.`name` AS `rider`,`his-tpa`.`case`.`rider_attach_date` AS `rider_attach_date`,`his-tpa`.`case`.`rider_expiry_date` AS `rider_expiry_date`,case `provider`.`full_name` when 'NON PARTICIPATING HOSPITAL' then concat(`his-tpa`.`case`.`other_provider`,' (Non Panel)') else `provider`.`full_name` end AS `provider`,`provider`.`city` AS `city`,`his-tpa`.`country`.`name` AS `counttr`,case `his-tpa`.`country`.`name` when 'Indonesia' then 'Domestic' else 'Overseas' end AS `ProviderDomicile`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`admission_doctor` AS `admission_doctor`,`his-tpa`.`case`.`symptom` AS `symptom`,`his-tpa`.`case`.`symptom_since` AS `symptom_since`,`his-tpa`.`case`.`vital_sign` AS `vital_sign`,`his-tpa`.`case`.`initial_diagnosis` AS `initial_diagnosis`,`his-tpa`.`case`.`treatment_plan` AS `treatment_plan`,`his-tpa`.`case`.`upload_haf` AS `upload_haf`,`his-tpa`.`case`.`haf_uploaded_by` AS `haf_uploaded_by`,`his-tpa`.`case`.`haf_upload_date` AS `haf_upload_date`,`his-tpa`.`case`.`upload_doc` AS `upload_doc`,`his-tpa`.`case`.`doc_uploaded_by` AS `doc_uploaded_by`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,case `his-tpa`.`case`.`upload_haf_doc_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_haf_doc_finished`,`his-tpa`.`case`.`upload_haf_doc_finished_by` AS `upload_haf_doc_finished_by`,`his-tpa`.`case`.`upload_haf_doc_finished_date` AS `upload_haf_doc_finished_date`,case `his-tpa`.`case`.`haf_doc_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,case `his-tpa`.`case`.`issue_initial_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_claim_no` AS `initial_claim_no`,`his-tpa`.`case`.`initial_log_remarks` AS `initial_log_remarks`,case `his-tpa`.`case`.`initial_log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_plan` AS `discharge_plan`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`case`.`actual_treatment` AS `actual_treatment`,concat_ws(',',`his-tpa`.`diagnosis`.`code`,`his-tpa`.`diagnosis`.`name`) AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`exclusion` AS `exclusion`,case `his-tpa`.`case`.`bill_received` when 0 then 'Not Received' when 1 then 'Received' else 'N/A' end AS `bill_received`,`his-tpa`.`case`.`bill_received_by` AS `bill_received_by`,`his-tpa`.`case`.`bill_received_date` AS `bill_received_date`,`his-tpa`.`case`.`upload_bill` AS `upload_bill`,`his-tpa`.`case`.`bill_uploaded_by` AS `bill_uploaded_by`,`his-tpa`.`case`.`bill_upload_date` AS `bill_upload_date`,`his-tpa`.`case`.`upload_bill_finished_by` AS `upload_bill_finished_by`,`his-tpa`.`case`.`upload_bill_finished_date` AS `upload_bill_finished_date`,case `his-tpa`.`case`.`upload_bill_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `upload_bill_finished`,case `his-tpa`.`case`.`bill_completed` when 1 then 'Pending' when 2 then 'Not Complete' when 3 then 'Complete' else 'N/A' end AS `bill_completed`,`his-tpa`.`case`.`bill_completed_remarks` AS `bill_completed_remarks`,`his-tpa`.`case`.`bill_completed_by` AS `bill_completed_by`,`his-tpa`.`case`.`bill_completed_date` AS `bill_completed_date`,`his-tpa`.`case`.`bill_completed_by_01` AS `BillCompleteBy_M`,`his-tpa`.`case`.`bill_completed_date_01` AS `BillCompleteDate_M`,`his-tpa`.`case`.`ws_type` AS `ws_type`,case `his-tpa`.`case`.`ws_finished` when 0 then 'Not Done' when 1 then 'Done' else 'N/A' end AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,case `his-tpa`.`case`.`ws_approval` when 0 then 'Pending' when 1 then 'Not Approve' when 2 then 'Approve' else 'N/A' end AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,`his-tpa`.`case`.`issuance_limit` AS `issuance_limit`,case `his-tpa`.`case`.`issue_log` when 1 then 'Pending' when 2 then 'LOG' when 3 then 'Non-LOG' else 'N/A' end AS `issue_log`,`his-tpa`.`case`.`log_issued_by` AS `log_issued_by`,`his-tpa`.`case`.`log_issue_date` AS `log_issue_date`,`his-tpa`.`case`.`log_issued_by_01` AS `LogIssued_M`,`his-tpa`.`case`.`log_issue_date_01` AS `LogIssueDate_M`,`his-tpa`.`case`.`claim_no` AS `claim_no`,`his-tpa`.`case`.`log_remarks` AS `log_remarks`,case `his-tpa`.`case`.`log_approval` when 0 then 'Disagree' when 1 then 'Agree' else 'N/A' end AS `log_approval`,`his-tpa`.`case`.`nonlog_reason` AS `nonlog_reason`,`his-tpa`.`case`.`nonlog_remarks` AS `nonlog_remarks`,`his-tpa`.`case`.`reject_reason` AS `reject_reason`,`his-tpa`.`case`.`reject_remarks` AS `reject_remarks`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`bill_issue_date` AS `bill_issue_date`,`his-tpa`.`case`.`bill_due_date` AS `bill_due_date`,`his-tpa`.`case`.`upload_original_bill` AS `upload_original_bill`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,case `his-tpa`.`case`.`original_bill_checked` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,case `his-tpa`.`case`.`close_case_option` when 1 then 'By Document Send Back' when 2 then 'By Payment' else 'N/A' end AS `close_case_option`,case `his-tpa`.`case`.`original_bill_verified` when 1 then 'Pending' when 2 then 'Original Bill Not Complete' when 3 then 'WS Revision' when 4 then 'OK' when 5 then 'Close Case' else 'N/A' end AS `original_bill_verified`,`his-tpa`.`case`.`original_bill_verified_remarks` AS `original_bill_verified_remarks`,`his-tpa`.`case`.`original_bill_verified_by` AS `original_bill_verified_by`,`his-tpa`.`case`.`original_bill_verified_date` AS `original_bill_verified_date`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`upload_proof_of_payment` AS `upload_proof_of_payment`,case `his-tpa`.`case`.`doc_send_back_to_client_required` when 1 then 'Required' when 0 then 'Not Required' else 'N/A' end AS `doc_send_back_to_client_required`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`actual`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`actual`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `actual`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`cover`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`cover`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `cover`,case `his-tpa`.`case`.`issue_log_option` when 1 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) when 2 then if(`his-tpa`.`case`.`type` <> 1,(select sum(`ws1`.`excess`) from `his-tpa`.`worksheet_01` `ws1` where `ws1`.`case` = `his-tpa`.`case`.`id`),(select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`)) else (select sum(`ws`.`excess`) from `his-tpa`.`worksheet` `ws` where `ws`.`case` = `his-tpa`.`case`.`id`) end AS `excess`,`his-tpa`.`case`.`bill_issue_date` AS `BillReceieveDate`,'' AS `Document_InitialLOG_Hours`,'' AS `Initial_LOG_Minutes`,'' AS `Provider_Discharge_Hours`,'' AS `Document_FinalLOG_Hours`,'' AS `Final_LOG_Hours`,if(`his-tpa`.`case`.`status` = 19,timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`bill_issue_date`,`his-tpa`.`case`.`create_date`)) AS `Document_OB_Cli_Days`,if(`his-tpa`.`case`.`status` = 19,timestampdiff(DAY,`his-tpa`.`case`.`create_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`create_date`,`his-tpa`.`case`.`original_bill_upload_date`)) AS `Document_OB_Days`,if(`his-tpa`.`case`.`status` = 20 or `his-tpa`.`case`.`status` = 21 or `his-tpa`.`case`.`status` = 22 or `his-tpa`.`case`.`status` = 23 or `his-tpa`.`case`.`status` = 24 or `his-tpa`.`case`.`status` = 25,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_upload_date`,`his-tpa`.`case`.`original_bill_checked_date`)) AS `Document_OBCheck_Days`,if(`his-tpa`.`case`.`status` = 26,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,current_timestamp())),if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`original_bill_verified_date`),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`original_bill_verified_date`))) AS `Document_OBVerified_Days`,if(`his-tpa`.`case`.`status` = 27,timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_verified_date`,`his-tpa`.`case`.`payment_date`)) AS `Document_Payment_Days`,if(`his-tpa`.`case`.`status` = 28,if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,current_timestamp())),if(`his-tpa`.`case`.`close_case_option` = 1,timestampdiff(DAY,`his-tpa`.`case`.`payment_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`),timestampdiff(DAY,`his-tpa`.`case`.`original_bill_checked_date`,`his-tpa`.`case`.`doc_send_back_to_client_date`))) AS `Document_Sendback_Days`,if(`his-tpa`.`case`.`status` = 29,timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,current_timestamp()),timestampdiff(DAY,`his-tpa`.`case`.`doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date`)) AS `Document_ClientReceive_Days` from ((((((((((((((`his-tpa`.`case` join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`department` on(`his-tpa`.`member`.`department` = `his-tpa`.`department`.`id`)) left join `his-tpa`.`position` on(`his-tpa`.`member`.`position` = `his-tpa`.`position`.`id`)) join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`status` not in (95,96,97,98,99,30,31,32,33,34,86,87,88,89) and `his-tpa`.`case`.`type` = 1 and `his-tpa`.`case_status`.`name`  not like 'Provider%' group by `his-tpa`.`case`.`id` order by `his-tpa`.`case`.`status` ;

-- ----------------------------
-- View structure for per_day_limit_balance
-- ----------------------------
DROP VIEW IF EXISTS `per_day_limit_balance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `per_day_limit_balance` AS select `case`.`patient` AS `patient`,`case`.`admission_date` AS `admission_date`,`worksheet`.`plan` AS `plan`,`worksheet`.`header` AS `header`,`worksheet`.`detail` AS `detail`,sum(`worksheet`.`day`) AS `day`,sum(`worksheet`.`cover`) AS `cover` from (`case` join `worksheet` on(`case`.`id` = `worksheet`.`case`)) where `worksheet`.`per_day_limit` <> 0 and `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 97 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`tick` = 1 and `worksheet`.`relocated_to` is null group by `case`.`patient`,`case`.`admission_date`,`worksheet`.`plan`,`worksheet`.`header`,`worksheet`.`detail` order by NULL ;

-- ----------------------------
-- View structure for perawatan_tkp
-- ----------------------------
DROP VIEW IF EXISTS `perawatan_tkp`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `perawatan_tkp` AS select `perawatan`.`client` AS `client`,`perawatan`.`category` AS `category`,`perawatan`.`id` AS `id`,`perawatan`.`name` AS `name` from `perawatan` where `perawatan`.`client` = 289 ;

-- ----------------------------
-- View structure for plan_01
-- ----------------------------
DROP VIEW IF EXISTS `plan_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `plan_01` AS select `plan`.`client` AS `client`,`plan`.`program` AS `program`,`plan`.`id` AS `id`,`plan`.`name` AS `name`,`plan`.`limit` AS `limit`,`plan`.`service` AS `service`,`plan`.`coverage_region` AS `coverage_region`,`plan`.`plan_header_link` AS `plan_header_link`,`plan`.`created_by` AS `created_by`,`plan`.`create_date` AS `create_date`,`plan`.`edited_by` AS `edited_by`,`plan`.`edit_date` AS `edit_date` from `plan` ;

-- ----------------------------
-- View structure for plan_header_01
-- ----------------------------
DROP VIEW IF EXISTS `plan_header_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `plan_header_01` AS select `plan_header`.`client` AS `client`,`plan_header`.`program` AS `program`,`plan_header`.`plan` AS `plan`,`plan_header`.`id` AS `id`,`plan_header`.`name` AS `name`,`plan_header`.`effective_date` AS `effective_date`,`plan_header`.`expiry_date` AS `expiry_date`,`plan_header`.`annual_limit` AS `annual_limit`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,`plan_header`.`copayment` AS `copayment`,`plan_header`.`plan_detail_link` AS `plan_detail_link`,`plan_header`.`created_by` AS `created_by`,`plan_header`.`create_date` AS `create_date`,`plan_header`.`edited_by` AS `edited_by`,`plan_header`.`edit_date` AS `edit_date` from `plan_header` ;

-- ----------------------------
-- View structure for pre_admission_01
-- ----------------------------
DROP VIEW IF EXISTS `pre_admission_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`aaisys.master`@`%` SQL SECURITY DEFINER VIEW `pre_admission_01` AS select `case`.`admission_date` AS `admission_date`,`case`.`id` AS `id`,`case`.`status` AS `status`,`case`.`ref` AS `ref`,`case`.`category` AS `category`,`case`.`client` AS `client`,`case`.`patient` AS `patient`,`case`.`member_id` AS `member_id`,`case`.`member_card` AS `member_card`,`case`.`policy_no` AS `policy_no`,`case`.`provider` AS `provider`,`case`.`admission_doctor` AS `admission_doctor`,`case`.`initial_diagnosis` AS `initial_diagnosis`,`case`.`treatment_plan` AS `treatment_plan`,to_days(`case`.`admission_date`) - to_days(date_format(current_timestamp(),'%Y-%m-%d')) AS `days` from `case` where `case`.`admission_date` > date_format(current_timestamp(),'%Y-%m-%d') and `case`.`status` not in (31,32,30,97,98) ;

-- ----------------------------
-- View structure for pre_analysis
-- ----------------------------
DROP VIEW IF EXISTS `pre_analysis`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pre_analysis` AS select `worksheet`.`case` AS `case`,`case`.`patient` AS `patient`,`case`.`admission_date` AS `admission_date`,`worksheet`.`id` AS `id`,`worksheet`.`plan` AS `plan`,`worksheet`.`header` AS `header`,`worksheet`.`detail` AS `detail`,`case`.`ws_option` AS `ws_option`,`plan_detail`.`max_per_day` AS `max_per_day`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,`plan_detail`.`max_day_rate` + `worksheet`.`tolerance` AS `max_day_rate`,`plan_detail`.`annual_limit` AS `inner_limit`,`worksheet`.`day` AS `day`,`worksheet`.`day_rate` AS `day_rate`,if(`plan_detail`.`per_case_limit` <> 0,if(`plan_detail`.`per_case_limit` > `worksheet`.`day` * `plan_detail`.`max_day_rate`,`worksheet`.`day` * `plan_detail`.`max_day_rate`,`plan_detail`.`per_case_limit`),if(`plan_detail`.`per_day_limit` <> 0,if(if(`plan_detail`.`per_day_limit` - coalesce(`per_day_limit_balance`.`cover`,0) < 0,0,`plan_detail`.`per_day_limit` - coalesce(`per_day_limit_balance`.`cover`,0)) > `worksheet`.`day` * `plan_detail`.`max_day_rate`,`worksheet`.`day` * `plan_detail`.`max_day_rate`,if(`plan_detail`.`per_day_limit` - coalesce(`per_day_limit_balance`.`cover`,0) < 0,0,`plan_detail`.`per_day_limit` - coalesce(`per_day_limit_balance`.`cover`,0))),`worksheet`.`day` * `plan_detail`.`max_day_rate`)) AS `case_rate`,cast(`worksheet`.`day` * `worksheet`.`day_rate` as decimal(20,2)) AS `actual`,`worksheet`.`tolerance` AS `tolerance`,cast(`worksheet`.`day` * `worksheet`.`day_rate` - `worksheet`.`prorate` as decimal(20,2)) AS `non_prorate`,`worksheet`.`prorate` AS `prorate`,`worksheet`.`prorate_percent` AS `prorate_percent`,cast(`worksheet`.`prorate` - `worksheet`.`prorate` * `worksheet`.`prorate_percent` as decimal(20,2)) AS `prorate_result`,`worksheet`.`exclusion` AS `exclusion`,`balance_header`.`deductible_per_year_balance` AS `remaining_deductible`,if(`case`.`program` in (63,79) and `case`.`source` not in (5,6),`worksheet`.`copayment`,if(`case`.`plan` = 2808 and `worksheet`.`detail` = 66637,'0.75',`plan_header`.`copayment`)) AS `copayment`,`plan_header`.`copayment_01` AS `copayment_01`,`plan_detail`.`per_day_limit` AS `per_day_limit`,coalesce(`per_day_limit_balance`.`cover`,0) AS `per_day_limit_balance`,`plan_detail`.`per_case_limit` AS `per_case_limit`,if(`balance_detail`.`max_day_per_year_balance` < coalesce(`worksheet`.`day` * `plan_detail`.`max_per_day`,0) - coalesce(`per_day_limit_balance`.`day`,0),`balance_detail`.`max_day_per_year_balance`,coalesce(`worksheet`.`day` * `plan_detail`.`max_per_day`,0) - coalesce(`per_day_limit_balance`.`day`,0)) AS `remaining_day`,`balance_detail`.`detail_annual_limit_balance` AS `remaining_inner_limit`,`balance_header`.`header_annual_limit_balance` AS `remaining_annual_limit`,`program`.`using_float_fund` AS `using_float_fund`,if(coalesce(`float_fund_per_program`.`float_fund`,0) - `program_balance`.`cover` < 0,0,coalesce(`float_fund_per_program`.`float_fund`,0) - `program_balance`.`cover`) AS `remaining_float_fund`,`plan_detail`.`cash_benefit_availability` AS `cash_benefit_availability` from ((((((((((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_header` on(`worksheet`.`header` = `plan_header`.`id`)) join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) join `program` on(`case`.`program` = `program`.`id`)) join `plan` on(`case`.`plan` = `plan`.`id`)) left join `float_fund_per_program` on(`program`.`id` = `float_fund_per_program`.`program`)) left join `program_balance` on(`program`.`id` = `program_balance`.`program`)) left join `balance_detail` on(`case`.`patient` = `balance_detail`.`patient` and `plan_detail`.`id` = `balance_detail`.`detail`)) left join `balance_header` on(`case`.`patient` = `balance_header`.`patient` and `plan_header`.`name` = `balance_header`.`name`)) left join `per_day_limit_balance` on(`case`.`patient` = `per_day_limit_balance`.`patient` and `case`.`admission_date` = `per_day_limit_balance`.`admission_date` and `worksheet`.`plan` = `per_day_limit_balance`.`plan` and `worksheet`.`header` = `per_day_limit_balance`.`header` and `worksheet`.`detail` = `per_day_limit_balance`.`detail`)) where `case`.`status` in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33) ;

-- ----------------------------
-- View structure for pre_analysis_01
-- ----------------------------
DROP VIEW IF EXISTS `pre_analysis_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pre_analysis_01` AS select `worksheet`.`case` AS `case`,`case`.`patient` AS `patient`,`case`.`admission_date` AS `admission_date`,`worksheet`.`id` AS `id`,`worksheet`.`plan` AS `plan`,`worksheet`.`header` AS `header`,`worksheet`.`detail` AS `detail`,`case`.`ws_option` AS `ws_option`,`plan_detail`.`max_per_day` AS `max_per_day`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,`plan_detail`.`max_day_rate` + `worksheet`.`tolerance` AS `max_day_rate`,`plan_detail`.`annual_limit` AS `inner_limit`,`worksheet`.`day` AS `day`,`worksheet`.`day_rate` AS `day_rate`,if(`plan_detail`.`per_case_limit` <> 0,if(`plan_detail`.`per_case_limit` > `worksheet`.`day` * `plan_detail`.`max_day_rate`,`worksheet`.`day` * `plan_detail`.`max_day_rate`,`plan_detail`.`per_case_limit`),if(`plan_detail`.`per_day_limit` <> 0,if(if(`plan_detail`.`per_day_limit` - coalesce(`per_day_limit_balance`.`cover`,0) < 0,0,`plan_detail`.`per_day_limit` - coalesce(`per_day_limit_balance`.`cover`,0)) > `worksheet`.`day` * `plan_detail`.`max_day_rate`,`worksheet`.`day` * `plan_detail`.`max_day_rate`,if(`plan_detail`.`per_day_limit` - coalesce(`per_day_limit_balance`.`cover`,0) < 0,0,`plan_detail`.`per_day_limit` - coalesce(`per_day_limit_balance`.`cover`,0))),`worksheet`.`day` * `plan_detail`.`max_day_rate`)) AS `case_rate`,cast(`worksheet`.`day` * `worksheet`.`day_rate` as decimal(20,2)) AS `actual`,`worksheet`.`tolerance` AS `tolerance`,cast(`worksheet`.`day` * `worksheet`.`day_rate` - `worksheet`.`prorate` as decimal(20,2)) AS `non_prorate`,`worksheet`.`prorate` AS `prorate`,`worksheet`.`prorate_percent` AS `prorate_percent`,cast(`worksheet`.`prorate` - `worksheet`.`prorate` * `worksheet`.`prorate_percent` as decimal(20,2)) AS `prorate_result`,`worksheet`.`exclusion` AS `exclusion`,`balance_header_03`.`deductible_per_year_balance` AS `remaining_deductible`,if(`case`.`program` in (63,79) and `case`.`source` not in (5,6),`worksheet`.`copayment`,if(`case`.`plan` = 2808 and `worksheet`.`detail` = 66637,'0.75',`plan_header`.`copayment`)) AS `copayment`,`plan_header`.`copayment_01` AS `copayment_01`,`plan_detail`.`per_day_limit` AS `per_day_limit`,coalesce(`per_day_limit_balance`.`cover`,0) AS `per_day_limit_balance`,`plan_detail`.`per_case_limit` AS `per_case_limit`,if(`balance_detail_03`.`max_day_per_year_balance` < coalesce(`worksheet`.`day` * `plan_detail`.`max_per_day`,0) - coalesce(`per_day_limit_balance`.`day`,0),`balance_detail_03`.`max_day_per_year_balance`,coalesce(`worksheet`.`day` * `plan_detail`.`max_per_day`,0) - coalesce(`per_day_limit_balance`.`day`,0)) AS `remaining_day`,`balance_detail_03`.`detail_annual_limit_balance` AS `remaining_inner_limit`,`balance_header_03`.`header_annual_limit_balance` AS `remaining_annual_limit`,`program`.`using_float_fund` AS `using_float_fund`,if(coalesce(`float_fund_per_program`.`float_fund`,0) - `program_balance`.`cover` < 0,0,coalesce(`float_fund_per_program`.`float_fund`,0) - `program_balance`.`cover`) AS `remaining_float_fund`,`plan_detail`.`cash_benefit_availability` AS `cash_benefit_availability` from ((((((((((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_header` on(`worksheet`.`header` = `plan_header`.`id`)) join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) join `program` on(`case`.`program` = `program`.`id`)) join `plan` on(`case`.`plan` = `plan`.`id`)) left join `float_fund_per_program` on(`program`.`id` = `float_fund_per_program`.`program`)) left join `program_balance` on(`program`.`id` = `program_balance`.`program`)) left join `balance_detail_03` on(`case`.`patient` = `balance_detail_03`.`patient` and `plan_detail`.`id` = `balance_detail_03`.`detail`)) left join `balance_header_03` on(`case`.`patient` = `balance_header_03`.`patient` and `plan_header`.`name` = `balance_header_03`.`name`)) left join `per_day_limit_balance` on(`case`.`patient` = `per_day_limit_balance`.`patient` and `case`.`admission_date` = `per_day_limit_balance`.`admission_date` and `worksheet`.`plan` = `per_day_limit_balance`.`plan` and `worksheet`.`header` = `per_day_limit_balance`.`header` and `worksheet`.`detail` = `per_day_limit_balance`.`detail`)) where `case`.`status` in (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,33) ;

-- ----------------------------
-- View structure for pre_worksheet_01
-- ----------------------------
DROP VIEW IF EXISTS `pre_worksheet_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pre_worksheet_01` AS select `pre_worksheet`.`case` AS `case`,`pre_worksheet`.`client` AS `client`,`pre_worksheet`.`plan` AS `plan`,`pre_worksheet`.`header` AS `header`,`pre_worksheet`.`code_rawat` AS `code_rawat`,`pre_worksheet`.`detail` AS `detail`,sum(`pre_worksheet`.`amount`) AS `amount`,`pre_worksheet`.`patient` AS `patient`,`pre_worksheet`.`principle` AS `principle`,`pre_worksheet`.`program` AS `program` from `pre_worksheet` group by `pre_worksheet`.`case`,`pre_worksheet`.`detail` order by NULL ;

-- ----------------------------
-- View structure for pre_worksheet_03
-- ----------------------------
DROP VIEW IF EXISTS `pre_worksheet_03`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pre_worksheet_03` AS select `pre_worksheet`.`case` AS `case`,`pre_worksheet`.`plan` AS `plan`,`pre_worksheet`.`header` AS `header`,`pre_worksheet`.`code_rawat` AS `code_rawat`,`pre_worksheet`.`detail` AS `detail`,`pre_worksheet`.`general` AS `general`,`pre_worksheet`.`amount` AS `amount`,`pre_worksheet`.`id` AS `id`,`pre_worksheet`.`patient` AS `patient`,`pre_worksheet`.`principle` AS `principle`,`pre_worksheet`.`program` AS `program`,`pre_worksheet`.`client` AS `client`,`pre_worksheet`.`ref` AS `ref` from `pre_worksheet` where `pre_worksheet`.`amount` <> 0 ;

-- ----------------------------
-- View structure for pre_worksheet_04
-- ----------------------------
DROP VIEW IF EXISTS `pre_worksheet_04`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `pre_worksheet_04` AS select `pre_worksheet`.`case` AS `case`,`pre_worksheet`.`plan` AS `plan`,`pre_worksheet`.`header` AS `header`,`pre_worksheet`.`code_rawat` AS `code_rawat`,`pre_worksheet`.`detail` AS `detail`,`pre_worksheet`.`general` AS `general`,`pre_worksheet`.`amount` AS `amount`,`pre_worksheet`.`id` AS `id`,`pre_worksheet`.`patient` AS `patient`,`pre_worksheet`.`principle` AS `principle`,`pre_worksheet`.`program` AS `program`,`pre_worksheet`.`client` AS `client`,`pre_worksheet`.`ref` AS `ref` from `pre_worksheet` ;

-- ----------------------------
-- View structure for pre_worksheet_edc_01
-- ----------------------------
DROP VIEW IF EXISTS `pre_worksheet_edc_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `pre_worksheet_edc_01` AS select `pre_worksheet_edc`.`client` AS `client`,`pre_worksheet_edc`.`plan` AS `plan`,`pre_worksheet_edc`.`header` AS `header`,`pre_worksheet_edc`.`code_benefit` AS `code_benefit`,`pre_worksheet_edc`.`detail` AS `detail`,sum(`pre_worksheet_edc`.`amount`) AS `amount`,`pre_worksheet_edc`.`patient` AS `patient`,`pre_worksheet_edc`.`principle` AS `principle`,`pre_worksheet_edc`.`program` AS `program`,`pre_worksheet_edc`.`case` AS `case`,`pre_worksheet_edc`.`ref` AS `ref`,`pre_worksheet_edc`.`code_edc` AS `code_edc`,`pre_worksheet_edc`.`general_edc` AS `general_edc`,`pre_worksheet_edc`.`day` AS `day`,`pre_worksheet_edc`.`plan_detail_benefit` AS `plan_detail_benefit` from `pre_worksheet_edc` group by `pre_worksheet_edc`.`case`,`pre_worksheet_edc`.`detail` order by NULL ;

-- ----------------------------
-- View structure for principle
-- ----------------------------
DROP VIEW IF EXISTS `principle`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `principle` AS select `his-tpa`.`member`.`id` AS `id`,`his-tpa`.`member`.`member_name` AS `member_name`,date_format(`his-tpa`.`member`.`member_dob`,'%d/%m/%Y') AS `member_dob`,if(`his-tpa`.`member`.`client` = 3,concat(`his-tpa`.`member`.`policy_no`,'-',`his-tpa`.`member`.`member_id`),if(`his-tpa`.`member`.`client` = 17,concat(`his-tpa`.`member`.`policy_no`,'-',`his-tpa`.`member`.`member_id`),`his-tpa`.`member`.`policy_no`)) AS `policy_no`,`his-tpa`.`member`.`client` AS `client_id`,`client`.`abbreviation_name` AS `client_name` from (`his-tpa`.`member` join `his-tpa`.`client` on(`his-tpa`.`member`.`client` = `client`.`id`)) where `his-tpa`.`member`.`member_relation` = 1 ;

-- ----------------------------
-- View structure for principle_detail
-- ----------------------------
DROP VIEW IF EXISTS `principle_detail`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%%` SQL SECURITY DEFINER VIEW `principle_detail` AS select `member`.`member_principle` AS `principle`,`plan_detail`.`id` AS `detail`,`plan_detail`.`code` AS `code`,`plan_detail`.`name` AS `name`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,`plan_detail`.`max_day_rate` AS `max_day_rate`,`plan_detail`.`annual_limit` AS `annual_limit`,`plan_detail`.`cash_benefit_availability` AS `cash_benefit_availability` from (`member` join `plan_detail` on(`member`.`program` = `plan_detail`.`program` and `member`.`plan` = `plan_detail`.`plan`)) where `member`.`policy_status` = 1 group by `member`.`member_principle`,`plan_detail`.`name` order by NULL ;

-- ----------------------------
-- View structure for principle_detail_balance
-- ----------------------------
DROP VIEW IF EXISTS `principle_detail_balance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `principle_detail_balance` AS select `case`.`principle` AS `principle`,`worksheet`.`detail` AS `detail`,`plan_detail`.`name` AS `name`,sum(`worksheet`.`day`) AS `day`,sum(`worksheet`.`cover`) AS `cover` from (((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) join `member` on(`case`.`principle` = `member`.`id`)) where `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 97 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`tick` = 1 and `worksheet`.`relocated_to` is null and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) >= if(cast(concat(month(curdate()),lpad(dayofmonth(curdate()),2,0)) as unsigned) <= cast(concat(month(`member`.`policy_effective_date`),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned),cast(concat(year(curdate()) - 1,lpad(month(`member`.`policy_effective_date`),2,0),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned),cast(concat(year(curdate()),lpad(month(`member`.`policy_effective_date`),2,0),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned)) and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) <= cast(concat(year(`case`.`policy_expiry_date`),lpad(month(`case`.`policy_expiry_date`),2,0),lpad(dayofmonth(`case`.`policy_expiry_date`),2,0)) as unsigned) group by `case`.`principle`,`plan_detail`.`name` order by NULL ;

-- ----------------------------
-- View structure for principle_detail_balance_02
-- ----------------------------
DROP VIEW IF EXISTS `principle_detail_balance_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `principle_detail_balance_02` AS select `case`.`principle` AS `principle`,`worksheet`.`detail` AS `detail`,`plan_detail`.`name` AS `name`,sum(`worksheet`.`day`) AS `day`,sum(`worksheet`.`cover`) AS `cover` from (((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_detail` on(`worksheet`.`detail` = `plan_detail`.`id`)) join `member` on(`case`.`principle` = `member`.`id`)) where `case`.`client` = 11 and `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`cover` <> 0 and `worksheet`.`relocated_to` is null and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) >= cast(concat(year(cast('2015-08-31' as date)),lpad(month(cast('2015-08-31' as date)),2,0),lpad(dayofmonth(cast('2015-08-31' as date)),2,0)) as unsigned) and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) <= cast(concat(year(cast('2016-11-09' as date)),lpad(month(cast('2016-11-09' as date)),2,0),lpad(dayofmonth(cast('2016-11-09' as date)),2,0)) as unsigned) group by `case`.`principle`,`plan_detail`.`name` order by NULL ;

-- ----------------------------
-- View structure for principle_header
-- ----------------------------
DROP VIEW IF EXISTS `principle_header`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%%` SQL SECURITY DEFINER VIEW `principle_header` AS select `member`.`member_principle` AS `principle`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `annual_limit`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,`plan_header`.`copayment` AS `copayment` from (`member` join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) where `member`.`policy_status` = 1 group by `member`.`member_principle`,`plan_header`.`name` order by NULL ;

-- ----------------------------
-- View structure for principle_header_balance
-- ----------------------------
DROP VIEW IF EXISTS `principle_header_balance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `principle_header_balance` AS select `case`.`principle` AS `principle`,`worksheet`.`header` AS `header`,`plan_header`.`name` AS `name`,sum(`worksheet`.`cover`) AS `cover`,sum(`worksheet`.`deductible`) AS `deductible` from (((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_header` on(`worksheet`.`header` = `plan_header`.`id`)) join `member` on(`case`.`principle` = `member`.`id`)) where `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 97 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`tick` = 1 and `worksheet`.`relocated_to` is null and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) >= if(cast(concat(month(curdate()),lpad(dayofmonth(curdate()),2,0)) as unsigned) <= cast(concat(month(`member`.`policy_effective_date`),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned),cast(concat(year(curdate()) - 1,lpad(month(`member`.`policy_effective_date`),2,0),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned),cast(concat(year(curdate()),lpad(month(`member`.`policy_effective_date`),2,0),lpad(dayofmonth(`member`.`policy_effective_date`),2,0)) as unsigned)) and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) <= cast(concat(year(`case`.`policy_expiry_date`),lpad(month(`case`.`policy_expiry_date`),2,0),lpad(dayofmonth(`case`.`policy_expiry_date`),2,0)) as unsigned) group by `case`.`principle`,`plan_header`.`name` order by NULL ;

-- ----------------------------
-- View structure for principle_header_balance_02
-- ----------------------------
DROP VIEW IF EXISTS `principle_header_balance_02`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `principle_header_balance_02` AS select `case`.`principle` AS `principle`,`worksheet`.`header` AS `header`,`plan_header`.`name` AS `name`,sum(`worksheet`.`cover`) AS `cover`,sum(`worksheet`.`deductible`) AS `deductible` from (((`worksheet` join `case` on(`worksheet`.`case` = `case`.`id`)) join `plan_header` on(`worksheet`.`header` = `plan_header`.`id`)) join `member` on(`case`.`principle` = `member`.`id`)) where `case`.`client` = 11 and `case`.`status` <> 31 and `case`.`status` <> 32 and `case`.`status` <> 98 and `case`.`status` <> 94 and `case`.`status` <> 95 and `worksheet`.`cover` <> 0 and `worksheet`.`relocated_to` is null and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) >= cast(concat(year(cast('2016-01-01' as date)),lpad(month(cast('2016-01-01' as date)),2,0),lpad(dayofmonth(cast('2016-01-01' as date)),2,0)) as unsigned) and cast(concat(year(`case`.`admission_date`),lpad(month(`case`.`admission_date`),2,0),lpad(dayofmonth(`case`.`admission_date`),2,0)) as unsigned) <= cast(concat(year(cast('2017-12-31' as date)),lpad(month(cast('2017-12-31' as date)),2,0),lpad(dayofmonth(cast('2017-12-31' as date)),2,0)) as unsigned) group by `case`.`principle`,`plan_header`.`name` order by NULL ;

-- ----------------------------
-- View structure for program_01
-- ----------------------------
DROP VIEW IF EXISTS `program_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `program_01` AS select `program`.`client` AS `client`,`program`.`id` AS `id`,`program`.`name` AS `name`,`program`.`effective_date` AS `effective_date`,`program`.`expiry_date` AS `expiry_date`,`program`.`type` AS `type`,`program`.`service` AS `service`,`program`.`using_float_fund` AS `using_float_fund`,`program`.`remaining_float_fund` AS `remaining_float_fund`,`program`.`provider` AS `provider`,`program`.`provider_01` AS `provider_01`,`program`.`currency` AS `currency`,`program`.`claim_paid_by` AS `claim_paid_by`,`program`.`close_case_option` AS `close_case_option`,`program`.`doc_send_back_required` AS `doc_send_back_required`,`program`.`membership_fee` AS `membership_fee`,`program`.`case_fee` AS `case_fee`,`program`.`status` AS `status`,`program`.`created_by` AS `created_by`,`program`.`create_date` AS `create_date`,`program`.`edited_by` AS `edited_by`,`program`.`edit_date` AS `edit_date` from `program` ;

-- ----------------------------
-- View structure for program_balance
-- ----------------------------
DROP VIEW IF EXISTS `program_balance`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `program_balance` AS select `case`.`program` AS `program`,coalesce(sum(`worksheet`.`cover`),0) AS `cover` from (`case` left join `worksheet` on(`case`.`id` = `worksheet`.`case`)) where `case`.`status` < 31 group by `case`.`program` order by NULL ;

-- ----------------------------
-- View structure for provider
-- ----------------------------
DROP VIEW IF EXISTS `provider`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `provider` AS select `intsys`.`provider`.`id` AS `id`,`intsys`.`provider`.`id_edc` AS `id_edc`,`intsys`.`provider`.`status` AS `status`,`intsys`.`provider`.`full_name` AS `full_name`,`intsys`.`provider`.`abbreviation_name` AS `abbreviation_name`,`intsys`.`provider`.`ranking` AS `ranking`,`intsys`.`provider`.`pks_no` AS `pks_no`,`intsys`.`provider`.`category` AS `category`,`intsys`.`provider`.`type` AS `type`,`intsys`.`provider`.`service` AS `service`,`intsys`.`provider`.`24_hours` AS `24_hours`,`intsys`.`provider`.`discount` AS `discount`,`intsys`.`provider`.`discount_remarks` AS `discount_remarks`,`intsys`.`provider`.`remarks` AS `remarks`,`intsys`.`provider`.`partnership` AS `partnership`,`intsys`.`provider`.`ownership` AS `ownership`,`intsys`.`provider`.`penalty` AS `penalty`,`intsys`.`provider`.`penalty_remarks` AS `penalty_remarks`,`intsys`.`provider`.`remarks_01` AS `remarks_01`,`intsys`.`provider`.`payment_turnaround_day` AS `payment_turnaround_day`,`intsys`.`provider`.`invoice_expiry_day` AS `invoice_expiry_day`,`intsys`.`provider`.`area_code` AS `area_code`,`intsys`.`provider`.`address` AS `address`,`intsys`.`provider`.`city` AS `city`,`intsys`.`provider`.`province` AS `province`,`intsys`.`provider`.`country` AS `country`,`intsys`.`provider`.`postal` AS `postal`,`intsys`.`provider`.`phone` AS `phone`,`intsys`.`provider`.`other_phone` AS `other_phone`,`intsys`.`provider`.`fax` AS `fax`,`intsys`.`provider`.`email` AS `email`,`intsys`.`provider`.`attention` AS `attention`,`intsys`.`provider`.`website` AS `website`,`intsys`.`provider`.`bank` AS `bank`,`intsys`.`provider`.`currency` AS `currency`,`intsys`.`provider`.`location` AS `location`,`intsys`.`provider`.`account_no` AS `account_no`,`intsys`.`provider`.`bi_code` AS `bi_code`,`intsys`.`provider`.`rtgs_code` AS `rtgs_code`,`intsys`.`provider`.`on_behalf_of` AS `on_behalf_of`,`intsys`.`provider`.`latitude` AS `latitude`,`intsys`.`provider`.`longitude` AS `longitude`,`intsys`.`provider`.`assistance_name` AS `name_of_assistance_company`,`intsys`.`provider`.`assistance_phone` AS `phone_of_assistance_company`,`intsys`.`provider`.`assistance_pic` AS `pic_of_assistance_company`,`intsys`.`provider`.`photo` AS `photo`,`intsys`.`provider`.`agreement` AS `agreement`,`intsys`.`provider`.`uploaded_by` AS `uploaded_by`,`intsys`.`provider`.`upload_date` AS `upload_date`,`intsys`.`provider`.`tariff_book` AS `tariff_book`,`intsys`.`provider`.`uploaded_by_01` AS `uploaded_by_01`,`intsys`.`provider`.`upload_date_01` AS `upload_date_01`,`intsys`.`provider`.`recruitment_type` AS `recruitment_type`,`intsys`.`provider`.`guarantee_coverage` AS `guarantee_coverage`,`intsys`.`provider`.`center_of_excellence` AS `center_of_excellence`,`intsys`.`provider`.`special_condition` AS `special_condition`,`intsys`.`provider`.`bank_01` AS `bank_01`,`intsys`.`provider`.`location_01` AS `location_01`,`intsys`.`provider`.`account_no_01` AS `account_no_01`,`intsys`.`provider`.`on_behalf_of_01` AS `on_behalf_of_01`,`intsys`.`provider`.`bi_code_01` AS `bi_code_01`,`intsys`.`provider`.`rtgs_code_01` AS `rtgs_code_01`,`intsys`.`provider`.`effective_date` AS `effective_date`,`intsys`.`provider`.`expiry_date` AS `expiry_date`,`intsys`.`provider`.`enabled_by` AS `enabled_by`,`intsys`.`provider`.`enable_date` AS `enable_date`,`intsys`.`provider`.`disabled_by` AS `disabled_by`,`intsys`.`provider`.`disable_date` AS `disable_date`,`intsys`.`provider`.`created_by` AS `created_by`,`intsys`.`provider`.`create_date` AS `create_date`,`intsys`.`provider`.`edited_by` AS `edited_by`,`intsys`.`provider`.`edit_date` AS `edit_date`,`intsys`.`provider`.`auto_renewal` AS `auto_renewal`,`intsys`.`provider`.`use_hospital_portal` AS `use_hospital_portal`,`intsys`.`provider`.`multiple_cashier` AS `multiple_cashier`,`intsys`.`provider`.`renewal_process` AS `renewal_process`,`intsys`.`provider`.`renewal_process_by` AS `renewal_process_by`,`intsys`.`provider`.`renewal_process_date` AS `renewal_process_date`,`intsys`.`provider`.`deposit_rules` AS `deposit_rules`,`intsys`.`provider`.`open_cc` AS `open_cc`,`intsys`.`provider`.`gop_policy_limit` AS `gop_policy_limit`,`intsys`.`provider`.`region` AS `region` from `intsys`.`provider` ;

-- ----------------------------
-- View structure for provider_001
-- ----------------------------
DROP VIEW IF EXISTS `provider_001`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `provider_001` AS select `provider`.`id` AS `id`,`provider`.`id_edc` AS `id_edc`,`provider`.`abbreviation_name` AS `abbreviation_name`,`provider`.`full_name` AS `full_name`,`provider`.`address` AS `address`,`provider`.`city` AS `city`,`provider`.`province` AS `province` from `his-tpa`.`provider` ;

-- ----------------------------
-- View structure for provider_01
-- ----------------------------
DROP VIEW IF EXISTS `provider_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `provider_01` AS select `intsys`.`provider`.`id` AS `id`,`intsys`.`provider`.`id_ima` AS `id_ima`,`intsys`.`provider`.`id_roadside` AS `id_roadside`,`intsys`.`provider`.`id_edc` AS `id_edc`,`intsys`.`provider`.`status` AS `status`,`intsys`.`provider`.`provider_code` AS `provider_code`,`intsys`.`provider`.`kemenkes_code` AS `kemenkes_code`,`intsys`.`provider`.`full_name` AS `full_name`,`intsys`.`provider`.`abbreviation_name` AS `abbreviation_name`,`intsys`.`provider`.`ranking` AS `ranking`,`intsys`.`provider`.`pks_no` AS `pks_no`,`intsys`.`provider`.`category` AS `category`,`intsys`.`provider`.`type` AS `type`,`intsys`.`provider`.`service` AS `service`,`intsys`.`provider`.`client` AS `client`,`intsys`.`provider`.`multiple_cashier` AS `multiple_cashier`,`intsys`.`provider`.`24_hours` AS `24_hours`,`intsys`.`provider`.`discount` AS `discount`,`intsys`.`provider`.`discount_remarks` AS `discount_remarks`,`intsys`.`provider`.`remarks` AS `remarks`,`intsys`.`provider`.`partnership` AS `partnership`,`intsys`.`provider`.`ownership` AS `ownership`,`intsys`.`provider`.`penalty` AS `penalty`,`intsys`.`provider`.`penalty_remarks` AS `penalty_remarks`,`intsys`.`provider`.`remarks_01` AS `remarks_01`,`intsys`.`provider`.`payment_turnaround_day` AS `payment_turnaround_day`,`intsys`.`provider`.`invoice_expiry_day` AS `invoice_expiry_day`,`intsys`.`provider`.`area_code` AS `area_code`,`intsys`.`provider`.`address` AS `address`,`intsys`.`provider`.`city` AS `city`,`intsys`.`provider`.`province` AS `province`,`intsys`.`provider`.`country` AS `country`,`intsys`.`provider`.`postal` AS `postal`,`intsys`.`provider`.`phone` AS `phone`,`intsys`.`provider`.`other_phone` AS `other_phone`,`intsys`.`provider`.`fax` AS `fax`,`intsys`.`provider`.`email` AS `email`,`intsys`.`provider`.`attention` AS `attention`,`intsys`.`provider`.`website` AS `website`,`intsys`.`provider`.`bank` AS `bank`,`intsys`.`provider`.`currency` AS `currency`,`intsys`.`provider`.`location` AS `location`,`intsys`.`provider`.`account_no` AS `account_no`,`intsys`.`provider`.`on_behalf_of` AS `on_behalf_of`,`intsys`.`provider`.`latitude` AS `latitude`,`intsys`.`provider`.`longitude` AS `longitude`,`intsys`.`provider`.`assistance_name` AS `assistance_name`,`intsys`.`provider`.`assistance_phone` AS `assistance_phone`,`intsys`.`provider`.`assistance_pic` AS `assistance_pic`,`intsys`.`provider`.`photo` AS `photo`,`intsys`.`provider`.`agreement` AS `agreement`,`intsys`.`provider`.`uploaded_by` AS `uploaded_by`,`intsys`.`provider`.`upload_date` AS `upload_date`,`intsys`.`provider`.`tariff_book` AS `tariff_book`,`intsys`.`provider`.`uploaded_by_01` AS `uploaded_by_01`,`intsys`.`provider`.`upload_date_01` AS `upload_date_01`,`intsys`.`provider`.`recruitment_type` AS `recruitment_type`,`intsys`.`provider`.`guarantee_coverage` AS `guarantee_coverage`,`intsys`.`provider`.`center_of_excellence` AS `center_of_excellence`,`intsys`.`provider`.`special_condition` AS `special_condition`,`intsys`.`provider`.`bank_01` AS `bank_01`,`intsys`.`provider`.`location_01` AS `location_01`,`intsys`.`provider`.`account_no_01` AS `account_no_01`,`intsys`.`provider`.`on_behalf_of_01` AS `on_behalf_of_01`,`intsys`.`provider`.`tel_name1` AS `tel_name1`,`intsys`.`provider`.`tel1` AS `tel1`,`intsys`.`provider`.`tel_name2` AS `tel_name2`,`intsys`.`provider`.`tel2` AS `tel2`,`intsys`.`provider`.`tel_name3` AS `tel_name3`,`intsys`.`provider`.`tel3` AS `tel3`,`intsys`.`provider`.`weekday` AS `weekday`,`intsys`.`provider`.`weekend` AS `weekend`,`intsys`.`provider`.`public_holidays` AS `public_holidays`,`intsys`.`provider`.`twenty_four_hours` AS `twenty_four_hours`,`intsys`.`provider`.`piam` AS `piam`,`intsys`.`provider`.`workshop` AS `workshop`,`intsys`.`provider`.`sss` AS `sss`,`intsys`.`provider`.`accident` AS `accident`,`intsys`.`provider`.`tow` AS `tow`,`intsys`.`provider`.`carrier_tow` AS `carrier_tow`,`intsys`.`provider`.`towRemarks` AS `towRemarks`,`intsys`.`provider`.`battery_service` AS `battery_service`,`intsys`.`provider`.`change_tyre` AS `change_tyre`,`intsys`.`provider`.`coverage` AS `coverage`,`intsys`.`provider`.`effective_date` AS `effective_date`,`intsys`.`provider`.`expiry_date` AS `expiry_date`,`intsys`.`provider`.`auto_renewal` AS `auto_renewal`,`intsys`.`provider`.`renewal_process` AS `renewal_process`,`intsys`.`provider`.`renewal_process_by` AS `renewal_process_by`,`intsys`.`provider`.`renewal_process_date` AS `renewal_process_date`,`intsys`.`provider`.`use_hospital_portal` AS `use_hospital_portal`,`intsys`.`provider`.`enabled_by` AS `enabled_by`,`intsys`.`provider`.`enable_date` AS `enable_date`,`intsys`.`provider`.`disabled_by` AS `disabled_by`,`intsys`.`provider`.`disable_date` AS `disable_date`,`intsys`.`provider`.`created_by` AS `created_by`,`intsys`.`provider`.`create_date` AS `create_date`,`intsys`.`provider`.`edited_by` AS `edited_by`,`intsys`.`provider`.`edit_date` AS `edit_date`,`intsys`.`provider`.`bank_id` AS `bank_id`,`intsys`.`provider`.`img_provider` AS `img_provider` from `intsys`.`provider` ;

-- ----------------------------
-- View structure for provider_contact
-- ----------------------------
DROP VIEW IF EXISTS `provider_contact`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `provider_contact` AS select `intsys`.`provider_contact`.`provider` AS `provider`,`intsys`.`provider_contact`.`id` AS `id`,`intsys`.`provider_contact`.`position` AS `position`,`intsys`.`provider_contact`.`name` AS `name`,`intsys`.`provider_contact`.`phone` AS `phone`,`intsys`.`provider_contact`.`email` AS `email`,`intsys`.`provider_contact`.`created_by` AS `created_by`,`intsys`.`provider_contact`.`create_date` AS `create_date`,`intsys`.`provider_contact`.`edited_by` AS `edited_by`,`intsys`.`provider_contact`.`edit_date` AS `edit_date` from `intsys`.`provider_contact` ;

-- ----------------------------
-- View structure for provider_history
-- ----------------------------
DROP VIEW IF EXISTS `provider_history`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `provider_history` AS select `intsys`.`provider_history`.`provider` AS `provider`,`intsys`.`provider_history`.`id` AS `id`,`intsys`.`provider_history`.`type` AS `type`,`intsys`.`provider_history`.`description` AS `description`,`intsys`.`provider_history`.`created_by` AS `created_by`,`intsys`.`provider_history`.`create_date` AS `create_date`,`intsys`.`provider_history`.`edited_by` AS `edited_by`,`intsys`.`provider_history`.`edit_date` AS `edit_date` from `intsys`.`provider_history` ;

-- ----------------------------
-- View structure for reference_case
-- ----------------------------
DROP VIEW IF EXISTS `reference_case`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `reference_case` AS select `his-tpa`.`case`.`client` AS `client`,`his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`category` AS `category`,`his-tpa`.`case`.`type` AS `type`,`his-tpa`.`case`.`patient` AS `patient`,`his-tpa`.`case`.`provider` AS `provider`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`diagnosis` AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,sum(`his-tpa`.`worksheet`.`actual`) AS `total_actual`,sum(`his-tpa`.`worksheet`.`cover`) AS `total_cover`,sum(`his-tpa`.`worksheet`.`excess`) AS `total_excess`,sum(`his-tpa`.`worksheet`.`cash_benefit`) AS `total_cash_benefit`,sum(`his-tpa`.`worksheet`.`deductible`) AS `total_deductible`,`his-tpa`.`case`.`status` AS `status`,concat(cast(`his-tpa`.`case`.`id` as char charset utf8),' | ',convert(`his-tpa`.`member`.`member_name` using utf8),' | ',convert(`his-tpa`.`member`.`policy_no` using utf8),' | ',convert(`client`.`abbreviation_name` using utf8),' | ',convert(`provider`.`full_name` using utf8),' | ',cast(date_format(`his-tpa`.`case`.`admission_date`,'%d/%m/%Y') as char charset utf8),' | ',coalesce(cast(date_format(`his-tpa`.`case`.`discharge_date`,'%d/%m/%Y') as char charset utf8),'Null')) AS `remarks`,`his-tpa`.`case`.`final_decision` AS `final_decision`,`his-tpa`.`case`.`member_remarks` AS `member_remarks` from ((((((`his-tpa`.`case` join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) left join `his-tpa`.`plan_detail` on(`his-tpa`.`worksheet`.`detail` = `his-tpa`.`plan_detail`.`id`)) left join `his-tpa`.`plan_header` on(`his-tpa`.`worksheet`.`header` = `his-tpa`.`plan_header`.`id`)) group by `his-tpa`.`case`.`id` order by NULL ;

-- ----------------------------
-- View structure for reference_case_copy
-- ----------------------------
DROP VIEW IF EXISTS `reference_case_copy`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `reference_case_copy` AS select `his-tpa`.`case`.`client` AS `client`,`his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case`.`category` AS `category`,`his-tpa`.`case`.`type` AS `type`,`his-tpa`.`case`.`patient` AS `patient`,`his-tpa`.`case`.`provider` AS `provider`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`diagnosis` AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`worksheet_header`.`total_actual` AS `total_actual`,`worksheet_header`.`total_cover` AS `total_cover`,`worksheet_header`.`total_excess` AS `total_excess`,`worksheet_header`.`total_cash_benefit` AS `total_cash_benefit`,`worksheet_header`.`total_deductible` AS `total_deductible`,`his-tpa`.`case`.`status` AS `status`,concat(cast(`his-tpa`.`case`.`id` as char charset utf8),' | ',convert(`his-tpa`.`member`.`member_name` using utf8),' | ',convert(`his-tpa`.`member`.`policy_no` using utf8),' | ',convert(`client`.`abbreviation_name` using utf8),' | ',convert(`provider`.`full_name` using utf8),' | ',cast(date_format(`his-tpa`.`case`.`admission_date`,'%d/%m/%Y') as char charset utf8),' | ',coalesce(cast(date_format(`his-tpa`.`case`.`discharge_date`,'%d/%m/%Y') as char charset utf8),'Null')) AS `remarks` from ((((`his-tpa`.`case` left join `his-tpa`.`worksheet_header` on(`his-tpa`.`case`.`id` = `worksheet_header`.`case`)) join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) ;

-- ----------------------------
-- View structure for reference_plan_detail
-- ----------------------------
DROP VIEW IF EXISTS `reference_plan_detail`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `reference_plan_detail` AS select `member`.`id` AS `member`,`member`.`plan` AS `plan`,`plan_detail`.`id` AS `detail`,`plan_detail`.`name` AS `name`,`plan_detail`.`per_case_limit` AS `per_case_limit`,`plan_detail`.`per_day_limit` AS `per_day_limit`,`plan_detail`.`max_day_rate` AS `max_day_rate`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,coalesce(`balance_detail`.`max_day_per_year_utilized`,0) AS `utilized_max_day_per_year`,coalesce(`balance_detail`.`max_day_per_year_balance`,`plan_detail`.`max_day_per_year`) AS `remaining_max_day_per_year`,`plan_detail`.`annual_limit` AS `inner_limit`,coalesce(`balance_detail`.`detail_annual_limit_utilized`,0) AS `utilized_inner_limit`,coalesce(`balance_detail`.`detail_annual_limit_balance`,`plan_detail`.`annual_limit`) AS `remaining_inner_limit` from ((`member` join `plan_detail` on(`member`.`plan` = `plan_detail`.`plan`)) join `balance_detail` on(`plan_detail`.`id` = `balance_detail`.`detail` and `member`.`id` = `balance_detail`.`patient`)) ;

-- ----------------------------
-- View structure for reference_plan_detail_01
-- ----------------------------
DROP VIEW IF EXISTS `reference_plan_detail_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `reference_plan_detail_01` AS select `member`.`id` AS `member`,`member`.`plan` AS `plan`,`plan_detail`.`id` AS `detail`,`plan_detail`.`name` AS `name`,`plan_detail`.`per_case_limit` AS `per_case_limit`,`plan_detail`.`per_day_limit` AS `per_day_limit`,`plan_detail`.`max_day_rate` AS `max_day_rate`,`plan_detail`.`max_day_per_year` AS `max_day_per_year`,coalesce(`balance_detail_04`.`max_day_per_year_utilized`,0) AS `utilized_max_day_per_year`,coalesce(`balance_detail_04`.`max_day_per_year_balance`,`plan_detail`.`max_day_per_year`) AS `remaining_max_day_per_year`,`plan_detail`.`annual_limit` AS `inner_limit`,coalesce(`balance_detail_04`.`detail_annual_limit_utilized`,0) AS `utilized_inner_limit`,coalesce(`balance_detail_04`.`detail_annual_limit_balance`,`plan_detail`.`annual_limit`) AS `remaining_inner_limit` from ((`member` left join `plan_detail` on(`member`.`plan` = `plan_detail`.`plan`)) left join `balance_detail_04` on(`plan_detail`.`id` = `balance_detail_04`.`detail` and `member`.`id` = `balance_detail_04`.`patient`)) ;

-- ----------------------------
-- View structure for reference_plan_header
-- ----------------------------
DROP VIEW IF EXISTS `reference_plan_header`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `reference_plan_header` AS select `member`.`id` AS `member`,`member`.`plan` AS `plan`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `annual_limit`,coalesce(`rider`.`additional_annual_limit`,0) AS `additional_annual_limit`,coalesce(`balance_header`.`header_annual_limit_utilized`,0) AS `utilized_annual_limit`,coalesce(`balance_header`.`header_annual_limit_balance`,`plan_header`.`annual_limit`) AS `remaining_annual_limit`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,coalesce(`balance_header`.`deductible_per_year_utilized`,0) AS `utilized_deductible_per_year`,coalesce(`balance_header`.`deductible_per_year_balance`,`plan_header`.`deductible_per_year`) AS `remaining_deductible_per_year` from (((`member` join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) left join `rider` on(`member`.`rider` = `rider`.`id`)) join `balance_header` on(`member`.`id` = `balance_header`.`patient` and `plan_header`.`id` = `balance_header`.`header`)) ;

-- ----------------------------
-- View structure for reference_plan_header_01
-- ----------------------------
DROP VIEW IF EXISTS `reference_plan_header_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `reference_plan_header_01` AS select `member`.`id` AS `member`,`member`.`plan` AS `plan`,`plan_header`.`id` AS `header`,`plan_header`.`name` AS `name`,`plan_header`.`annual_limit` AS `annual_limit`,coalesce(`rider`.`additional_annual_limit`,0) AS `additional_annual_limit`,coalesce(`balance_header_04`.`header_annual_limit_utilized`,0) AS `utilized_annual_limit`,coalesce(`balance_header_04`.`header_annual_limit_balance`,`plan_header`.`annual_limit`) AS `remaining_annual_limit`,`plan_header`.`deductible_per_year` AS `deductible_per_year`,coalesce(`balance_header_04`.`deductible_per_year_utilized`,0) AS `utilized_deductible_per_year`,coalesce(`balance_header_04`.`deductible_per_year_balance`,`plan_header`.`deductible_per_year`) AS `remaining_deductible_per_year` from (((`member` left join `plan_header` on(`member`.`plan` = `plan_header`.`plan`)) left join `rider` on(`member`.`rider` = `rider`.`id`)) left join `balance_header_04` on(`member`.`id` = `balance_header_04`.`patient` and `plan_header`.`id` = `balance_header_04`.`header`)) ;

-- ----------------------------
-- View structure for relative
-- ----------------------------
DROP VIEW IF EXISTS `relative`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `relative` AS select `member`.`id` AS `id`,`member`.`member_name` AS `member_name`,`member`.`member_dob` AS `member_dob`,`member`.`member_gender` AS `member_gender`,`member`.`member_relation` AS `member_relation`,`member`.`member_principle` AS `member_principle`,`member`.`client` AS `client`,`member`.`branch` AS `branch`,`member`.`company` AS `company`,`member`.`policy_no` AS `policy_no`,`member`.`policy_holder` AS `policy_holder`,`member`.`policy_effective_date` AS `policy_effective_date`,`member`.`policy_expiry_date` AS `policy_expiry_date`,`member`.`policy_status` AS `policy_status`,`member`.`program` AS `program`,`member`.`plan` AS `plan`,`member`.`rider` AS `rider`,`member`.`special_condition` AS `special_condition` from `member` ;

-- ----------------------------
-- View structure for remaining_annual_limit
-- ----------------------------
DROP VIEW IF EXISTS `remaining_annual_limit`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `remaining_annual_limit` AS select `client`.`full_name` AS `client`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`member`.`id` AS `member`,`his-tpa`.`member`.`member_name` AS `member_name`,`his-tpa`.`member`.`policy_no` AS `policy_no`,`his-tpa`.`member`.`member_dob` AS `member_dob`,if(`his-tpa`.`member`.`policy_status` = 1,'Enable',if(`his-tpa`.`member`.`policy_status` = 0,'Disable','')) AS `policy_status`,if(`his-tpa`.`member`.`member_relation` = 1,'Principle',if(`his-tpa`.`member`.`member_relation` = 2,'Spouse',if(`his-tpa`.`member`.`member_relation` = 3,'Child',if(`his-tpa`.`member`.`member_relation` = 4,'Dependant','')))) AS `member_relation`,`reference_plan_header`.`name` AS `name`,`reference_plan_header`.`remaining_annual_limit` AS `remaining_annual_limit`,`his-tpa`.`member`.`member_principle` AS `member_principle` from (((`his-tpa`.`client` join `his-tpa`.`member` on(`client`.`id` = `his-tpa`.`member`.`client`)) left join `his-tpa`.`company` on(`his-tpa`.`company`.`id` = `his-tpa`.`member`.`company`)) join `his-tpa`.`reference_plan_header` on(`his-tpa`.`member`.`id` = `reference_plan_header`.`member`)) ;

-- ----------------------------
-- View structure for remaining_float_fund
-- ----------------------------
DROP VIEW IF EXISTS `remaining_float_fund`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `remaining_float_fund` AS select `float_fund_per_program`.`program` AS `program`,`float_fund_per_program`.`float_fund` AS `float_fund`,coalesce(`cover_per_program`.`cover`,0) AS `cover`,coalesce(`float_fund_per_program`.`float_fund` - `cover_per_program`.`cover`,`float_fund_per_program`.`float_fund`) AS `remaining` from (`float_fund_per_program` left join `cover_per_program` on(`float_fund_per_program`.`program` = `cover_per_program`.`program`)) ;

-- ----------------------------
-- View structure for report_automation
-- ----------------------------
DROP VIEW IF EXISTS `report_automation`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `report_automation` AS select `her-tpa`.`automation_report`.`id` AS `id`,`her-tpa`.`automation_report`.`client` AS `client`,`her-tpa`.`automation_report`.`code` AS `code`,`her-tpa`.`automation_report`.`case` AS `case`,`her-tpa`.`automation_report`.`remarks` AS `remarks`,`her-tpa`.`automation_report`.`process_date` AS `process_date`,`her-tpa`.`automation_report`.`report_date` AS `report_date` from `her-tpa`.`automation_report` ;

-- ----------------------------
-- View structure for report_case_meina
-- ----------------------------
DROP VIEW IF EXISTS `report_case_meina`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `report_case_meina` AS select `his-tpa`.`case`.`id` AS `id`,`his-tpa`.`case_status`.`name` AS `status`,`his-tpa`.`case`.`status_01` AS `status_before`,`his-tpa`.`case`.`created_by` AS `created_by`,`his-tpa`.`case`.`create_date` AS `create_date`,if(`his-tpa`.`case`.`type` = 1,'Reimbursement',if(`his-tpa`.`case`.`type` = 2,'Cashless',if(`his-tpa`.`case`.`type` = 3,'Cashless Non-LOG',if(`his-tpa`.`case`.`type` = 4,'Pay & File','')))) AS `type`,if(`his-tpa`.`case`.`category` = 0,'Outpatient','Inpatient') AS `category`,`his-tpa`.`member`.`member_name` AS `patient`,if(`his-tpa`.`case`.`gender` = 0,'Female','Male') AS `gender`,`principle`.`member_name` AS `principle`,if(`his-tpa`.`case`.`relation` = 1,'Principle',if(`his-tpa`.`case`.`relation` = 2,'Spouse',if(`his-tpa`.`case`.`relation` = 3,'Child',if(`his-tpa`.`case`.`relation` = 4,'Dependant','')))) AS `relation`,`client`.`full_name` AS `client`,`his-tpa`.`branch`.`name` AS `branch`,`his-tpa`.`company`.`name` AS `company`,`his-tpa`.`case`.`dob` AS `dob`,`his-tpa`.`case`.`member_id` AS `member_id`,`his-tpa`.`case`.`policy_no` AS `policy_no`,`his-tpa`.`status`.`name` AS `policy_status`,`his-tpa`.`program`.`name` AS `program`,`provider`.`full_name` AS `provider`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`his-tpa`.`country`.`name` AS `region`,if(`provider`.`country` = 85,'Domestic','Overseas') AS `case_location`,`his-tpa`.`case`.`admission_date` AS `admission_date`,`his-tpa`.`case`.`admission_time` AS `admission_time`,`his-tpa`.`case`.`doc_upload_date` AS `doc_upload_date`,if(`his-tpa`.`case`.`haf_doc_completed` = 1,'Pending',if(`his-tpa`.`case`.`haf_doc_completed` = 2,'Not Completed','Completed')) AS `haf_doc_completed`,`his-tpa`.`case`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`his-tpa`.`case`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`his-tpa`.`case`.`haf_doc_completed_date` AS `haf_doc_completed_date`,if(`his-tpa`.`case`.`issue_initial_log` = 1,'Pending',if(`his-tpa`.`case`.`issue_initial_log` = 2,'LOG','Non-LOG')) AS `issue_initial_log`,`his-tpa`.`case`.`initial_log_issued_by` AS `initial_log_issued_by`,`his-tpa`.`case`.`initial_log_issue_date` AS `initial_log_issue_date`,`his-tpa`.`case`.`initial_log_approval` AS `initial_log_approval`,`his-tpa`.`case`.`discharge_date` AS `discharge_date`,`his-tpa`.`case`.`discharge_doctor` AS `discharge_doctor`,`his-tpa`.`diagnosis`.`name` AS `diagnosis`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,if(`his-tpa`.`case`.`bill_completed` = 1,'Pending',if(`his-tpa`.`case`.`bill_completed` = 2,'Not completed','Completed')) AS `bill_completed`,if(`his-tpa`.`case`.`ws_finished` = 1,'Done','Not Done') AS `ws_finished`,`his-tpa`.`case`.`ws_finished_by` AS `ws_finished_by`,`his-tpa`.`case`.`ws_finished_date` AS `ws_finished_date`,if(`his-tpa`.`case`.`ws_approval` = 1,'Pending',if(`his-tpa`.`case`.`ws_approval` = 2,'Not Approve','Approve')) AS `ws_approval`,`his-tpa`.`case`.`ws_approval_remarks` AS `ws_approval_remarks`,`his-tpa`.`case`.`ws_approval_by` AS `ws_approval_by`,`his-tpa`.`case`.`ws_approval_date` AS `ws_approval_date`,if(`his-tpa`.`case`.`issue_log` = 1,'Pending',if(`his-tpa`.`case`.`issue_log` = 2,'Non-LOG','LOG')) AS `issue_log`,`his-tpa`.`case`.`bill_no` AS `bill_no`,`his-tpa`.`case`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`his-tpa`.`case`.`original_bill_upload_date` AS `original_bill_upload_date`,if(`his-tpa`.`case`.`original_bill_checked` = 1,'Pending',if(`his-tpa`.`case`.`original_bill_checked` = 2,'Original Bill Not Complete',if(`his-tpa`.`case`.`original_bill_checked` = 3,'WS Revision',if(`his-tpa`.`case`.`original_bill_checked` = 4,'OK','Close Case')))) AS `original_bill_checked`,`his-tpa`.`case`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`his-tpa`.`case`.`original_bill_checked_by` AS `original_bill_checked_by`,`his-tpa`.`case`.`original_bill_checked_date` AS `original_bill_checked_date`,if(`his-tpa`.`case`.`close_case_option` = 1,'By Document Send Back','By Payment') AS `close_case_option`,if(`his-tpa`.`case`.`original_bill_verified` = 1,'Pending',if(`his-tpa`.`case`.`original_bill_verified` = 2,'Original Bill Not Completed',if(`his-tpa`.`case`.`original_bill_verified` = 3,'WS Revision','OK'))) AS `original_bill_verified`,`his-tpa`.`case`.`payment_date` AS `payment_date`,`his-tpa`.`case`.`paid_by` AS `paid_by`,`his-tpa`.`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`his-tpa`.`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,sum(`his-tpa`.`worksheet`.`actual`) AS `actual`,sum(`his-tpa`.`worksheet`.`cover`) AS `cover`,sum(`his-tpa`.`worksheet`.`excess`) AS `excess`,`his-tpa`.`case`.`edited_by` AS `edited_by`,`his-tpa`.`case`.`edit_date` AS `edit_date` from ((((((((((((((((`his-tpa`.`case` left join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`status`)) left join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) left join `his-tpa`.`principle` on(`his-tpa`.`case`.`principle` = `principle`.`id`)) left join `his-tpa`.`client` on(`his-tpa`.`case`.`client` = `client`.`id`)) left join `his-tpa`.`branch` on(`his-tpa`.`case`.`branch` = `his-tpa`.`branch`.`id`)) left join `his-tpa`.`company` on(`his-tpa`.`case`.`company` = `his-tpa`.`company`.`id`)) left join `his-tpa`.`status` on(`his-tpa`.`case`.`policy_status` = `his-tpa`.`status`.`id`)) left join `his-tpa`.`program` on(`his-tpa`.`case`.`program` = `his-tpa`.`program`.`id`)) left join `his-tpa`.`rider` on(`his-tpa`.`case`.`rider` = `his-tpa`.`rider`.`id`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) left join `his-tpa`.`plan` on(`his-tpa`.`case`.`plan` = `his-tpa`.`plan`.`id`)) left join `his-tpa`.`plan_detail` on(`his-tpa`.`worksheet`.`detail` = `his-tpa`.`plan_detail`.`id`)) left join `his-tpa`.`plan_header` on(`his-tpa`.`worksheet`.`header` = `his-tpa`.`plan_header`.`id`)) left join `his-tpa`.`country` on(`provider`.`country` = `his-tpa`.`country`.`id`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`client` = 1 and date_format(`his-tpa`.`case`.`create_date`,'%Y-%m-%d') >= '2017-01-01' and date_format(`his-tpa`.`case`.`create_date`,'%Y-%m-%d') <= current_timestamp() group by `his-tpa`.`case`.`id` ;

-- ----------------------------
-- View structure for report_case_meina_01
-- ----------------------------
DROP VIEW IF EXISTS `report_case_meina_01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `report_case_meina_01` AS select `report_case_meina`.`id` AS `id`,`report_case_meina`.`status` AS `status`,`his-tpa`.`case_status`.`name` AS `status_before`,`report_case_meina`.`created_by` AS `created_by`,`report_case_meina`.`create_date` AS `create_date`,`report_case_meina`.`type` AS `type`,`report_case_meina`.`category` AS `category`,`report_case_meina`.`patient` AS `patient`,`report_case_meina`.`gender` AS `gender`,`report_case_meina`.`principle` AS `principle`,`report_case_meina`.`relation` AS `relation`,`report_case_meina`.`client` AS `client`,`report_case_meina`.`branch` AS `branch`,`report_case_meina`.`company` AS `company`,`report_case_meina`.`dob` AS `dob`,`report_case_meina`.`member_id` AS `member_id`,`report_case_meina`.`policy_no` AS `policy_no`,`report_case_meina`.`policy_status` AS `policy_status`,`report_case_meina`.`program` AS `program`,`report_case_meina`.`provider` AS `provider`,`report_case_meina`.`other_provider` AS `other_provider`,`report_case_meina`.`region` AS `region`,`report_case_meina`.`case_location` AS `case_location`,`report_case_meina`.`admission_date` AS `admission_date`,`report_case_meina`.`admission_time` AS `admission_time`,`report_case_meina`.`doc_upload_date` AS `doc_upload_date`,`report_case_meina`.`haf_doc_completed` AS `haf_doc_completed`,`report_case_meina`.`haf_doc_completed_remarks` AS `haf_doc_completed_remarks`,`report_case_meina`.`haf_doc_completed_by` AS `haf_doc_completed_by`,`report_case_meina`.`haf_doc_completed_date` AS `haf_doc_completed_date`,`report_case_meina`.`issue_initial_log` AS `issue_initial_log`,`report_case_meina`.`initial_log_issued_by` AS `initial_log_issued_by`,`report_case_meina`.`initial_log_issue_date` AS `initial_log_issue_date`,`report_case_meina`.`initial_log_approval` AS `initial_log_approval`,`report_case_meina`.`discharge_date` AS `discharge_date`,`report_case_meina`.`discharge_doctor` AS `discharge_doctor`,`report_case_meina`.`diagnosis` AS `diagnosis`,`report_case_meina`.`other_diagnosis` AS `other_diagnosis`,`report_case_meina`.`bill_completed` AS `bill_completed`,`report_case_meina`.`ws_finished` AS `ws_finished`,`report_case_meina`.`ws_finished_by` AS `ws_finished_by`,`report_case_meina`.`ws_finished_date` AS `ws_finished_date`,`report_case_meina`.`ws_approval` AS `ws_approval`,`report_case_meina`.`ws_approval_remarks` AS `ws_approval_remarks`,`report_case_meina`.`ws_approval_by` AS `ws_approval_by`,`report_case_meina`.`ws_approval_date` AS `ws_approval_date`,`report_case_meina`.`issue_log` AS `issue_log`,`report_case_meina`.`bill_no` AS `bill_no`,`report_case_meina`.`original_bill_uploaded_by` AS `original_bill_uploaded_by`,`report_case_meina`.`original_bill_upload_date` AS `original_bill_upload_date`,`report_case_meina`.`original_bill_checked` AS `original_bill_checked`,`report_case_meina`.`original_bill_checked_remarks` AS `original_bill_checked_remarks`,`report_case_meina`.`original_bill_checked_by` AS `original_bill_checked_by`,`report_case_meina`.`original_bill_checked_date` AS `original_bill_checked_date`,`report_case_meina`.`close_case_option` AS `close_case_option`,`report_case_meina`.`original_bill_verified` AS `original_bill_verified`,`report_case_meina`.`payment_date` AS `payment_date`,`report_case_meina`.`paid_by` AS `paid_by`,`report_case_meina`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`report_case_meina`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`report_case_meina`.`actual` AS `actual`,`report_case_meina`.`cover` AS `cover`,`report_case_meina`.`excess` AS `excess`,`report_case_meina`.`edited_by` AS `edited_by`,`report_case_meina`.`edit_date` AS `edit_date` from (`his-tpa`.`report_case_meina` left join `his-tpa`.`case_status` on(`his-tpa`.`case_status`.`status` = `report_case_meina`.`status_before`)) where `his-tpa`.`case_status`.`userlevels` = -1 ;

-- ----------------------------
-- View structure for sms_log
-- ----------------------------
DROP VIEW IF EXISTS `sms_log`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `sms_log` AS select substr(`case_sms_log`.`return`,1,6) AS `case`,`case_sms_log`.`send_date` AS `send_date`,substr(`case_sms_log`.`return`,10,12) AS `contact_info`,substr(`case_sms_log`.`return`,22,350) AS `description`,`case_sms_log`.`id` AS `id` from `case_sms_log` where substr(`case_sms_log`.`return`,1,6) = substr(`case_sms_log`.`return`,1,6) ;

-- ----------------------------
-- View structure for status_hospital_view
-- ----------------------------
DROP VIEW IF EXISTS `status_hospital_view`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `status_hospital_view` AS select group_concat(`S`.`id` order by `S`.`id` ASC separator ',') AS `id`,`S`.`name` AS `name` from `status_hospital` `S` where `S`.`id` not in (15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,95,98) group by `S`.`name` ;

-- ----------------------------
-- View structure for sunlife_critical_ilnes
-- ----------------------------
DROP VIEW IF EXISTS `sunlife_critical_ilnes`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `sunlife_critical_ilnes` AS select curdate() AS `Date_of_report_01`,year(`his-tpa`.`case`.`policy_effective_date`) AS `Member_Eff_date`,`his-tpa`.`case`.`policy_no` AS `Policy_No`,`his-tpa`.`case`.`policy_issue_date` AS `Policy_Issue_date`,`his-tpa`.`case`.`policy_revival_date` AS `Policy_Revival_date`,`his-tpa`.`case`.`member_id` AS `Member_id`,`his-tpa`.`member`.`member_name` AS `Patient_name`,if(`his-tpa`.`case`.`relation` = 1,'Principle',if(`his-tpa`.`case`.`relation` = 2,'Spouse',if(`his-tpa`.`case`.`relation` = 3,'Child','Dependant'))) AS `Member_relation`,`his-tpa`.`case`.`dob` AS `Member_date_of_birth`,`his-tpa`.`case`.`id` AS `case_id`,if(`his-tpa`.`case`.`payment_date` is not null,'Paid',if(`his-tpa`.`case`.`status` in (31,32),'Decline','Pending')) AS `claim_status`,`his-tpa`.`case`.`nonlog_remarks` AS `Non_log_remarks`,if(`his-tpa`.`case`.`type` = 1,'Reimbursment',if(`his-tpa`.`case`.`type` = 2,'Cashless','Cashless Non-LOG')) AS `case_type`,`his-tpa`.`case`.`admission_date` AS `admission_date_01`,date_format(`his-tpa`.`case`.`discharge_date`,'%Y-%m-%d') AS `discharge_date`,curdate() AS `Date_of_report`,`his-tpa`.`case`.`payment_date` AS `payment_date`,sum(`his-tpa`.`worksheet`.`cover`) AS `Sum_cover_01`,sum(`his-tpa`.`worksheet`.`actual`) AS `Sum_actual`,sum(`his-tpa`.`worksheet`.`cover`) AS `Sum_cover`,if(`his-tpa`.`case`.`category` = 0,'Outpatient','Inpatient') AS `case_category`,`his-tpa`.`plan_detail`.`name` AS `worksheet_name`,`his-tpa`.`plan_header`.`name` AS `benefit_name`,`his-tpa`.`diagnosis`.`name` AS `icd_desc`,`his-tpa`.`case`.`diagnosis` AS `icd_code`,`his-tpa`.`case`.`other_diagnosis` AS `other_diagnosis`,`his-tpa`.`case`.`admission_date` AS `admission_date`,if(`provider`.`type` = 1,'Hospital','Clinic') AS `hospital_type`,`provider`.`full_name` AS `hospital_fullname`,`his-tpa`.`case`.`other_provider` AS `other_provider`,`provider`.`city` AS `hospital_city`,'AAI' AS `AAI`,`his-tpa`.`case`.`client` AS `client` from (((((((`his-tpa`.`case` left join `his-tpa`.`member` on(`his-tpa`.`case`.`patient` = `his-tpa`.`member`.`id`)) left join `his-tpa`.`worksheet` on(`his-tpa`.`case`.`id` = `his-tpa`.`worksheet`.`case`)) left join `his-tpa`.`case_status` on(`his-tpa`.`case`.`status` = `his-tpa`.`case_status`.`id`)) left join `his-tpa`.`plan_header` on(`his-tpa`.`worksheet`.`header` = `his-tpa`.`plan_header`.`id`)) left join `his-tpa`.`plan_detail` on(`his-tpa`.`worksheet`.`detail` = `his-tpa`.`plan_detail`.`id`)) left join `his-tpa`.`diagnosis` on(`his-tpa`.`case`.`diagnosis` = `his-tpa`.`diagnosis`.`code`)) left join `his-tpa`.`provider` on(`his-tpa`.`case`.`provider` = `provider`.`id`)) where `his-tpa`.`case_status`.`userlevels` = -1 and `his-tpa`.`case`.`client` = 19 and `his-tpa`.`case`.`program` = 68 group by `his-tpa`.`case`.`id` ;

-- ----------------------------
-- View structure for test_perawatan
-- ----------------------------
DROP VIEW IF EXISTS `test_perawatan`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `test_perawatan` AS select group_concat(`P`.`client` order by `P`.`category` ASC separator ',') AS `client`,group_concat(`P`.`category` order by `P`.`category` ASC separator ',') AS `category`,group_concat(`P`.`id` order by `P`.`category` ASC separator ',') AS `id`,group_concat(`P`.`name` order by `P`.`category` ASC separator ',') AS `name` from `perawatan` `P` group by `P`.`client` ;

-- ----------------------------
-- View structure for test99
-- ----------------------------
DROP VIEW IF EXISTS `test99`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `test99` AS select `worksheet`.`case` AS `case`,`worksheet`.`plan` AS `plan`,`worksheet`.`header` AS `header`,`worksheet`.`detail` AS `detail`,`worksheet`.`id` AS `id`,`worksheet`.`start_date` AS `start_date`,`worksheet`.`end_date` AS `end_date`,`worksheet`.`day` AS `day`,`worksheet`.`day_rate` AS `day_rate`,`worksheet`.`actual` AS `actual`,`worksheet`.`tolerance` AS `tolerance`,`worksheet`.`non_prorate` AS `non_prorate`,`worksheet`.`prorate` AS `prorate`,`worksheet`.`prorate_percent` AS `prorate_percent`,`worksheet`.`prorate_result` AS `prorate_result`,`worksheet`.`exclusion` AS `exclusion`,`worksheet`.`remaining_deductible` AS `remaining_deductible`,`worksheet`.`copayment` AS `copayment`,`worksheet`.`per_day_limit` AS `per_day_limit`,`worksheet`.`per_day_limit_balance` AS `per_day_limit_balance`,`worksheet`.`per_case_limit` AS `per_case_limit`,`worksheet`.`remaining_day` AS `remaining_day`,`worksheet`.`remaining_inner_limit` AS `remaining_inner_limit`,`worksheet`.`remaining_annual_limit` AS `remaining_annual_limit`,`worksheet`.`using_float_fund` AS `using_float_fund`,`worksheet`.`remaining_float_fund` AS `remaining_float_fund`,`worksheet`.`cash_benefit_availability` AS `cash_benefit_availability`,`worksheet`.`cover` AS `cover`,`worksheet`.`excess` AS `excess`,`worksheet`.`deductible` AS `deductible`,`worksheet`.`cash_benefit` AS `cash_benefit`,`worksheet`.`remarks` AS `remarks`,`worksheet`.`remarks_01` AS `remarks_01`,`worksheet`.`relocated_to` AS `relocated_to`,`worksheet`.`tick` AS `tick`,`worksheet`.`created_by` AS `created_by`,`worksheet`.`create_date` AS `create_date`,`worksheet`.`edited_by` AS `edited_by`,`worksheet`.`edit_date` AS `edit_date` from `worksheet` where `worksheet`.`case` in (289971,289972,289973,289974,289975,289976,289977,289978,289979,289980,289981,289982,289983,289984,289985,289986,289987,289988,289989,289990,289991,289992,289993,289994,289995,289996,289997,289998,289999,290000,290001,290002,290003,290004,290005,290006,290007,290008,290009,290010,290011,290012,290013,290014,290015,290016,290017,290018,290019,290020,290021,290022,290023,290024,290025,290026,290027,290028,290029,290030,290031,290032,290033,290034,290035,290036,290037,290038,290039,290040,290041,290042,290043,290044,290045,290046,290047,290048,290049,290050,290051,290052,290053,290054,290055,290056,290057,290058,290059,290060,290061,290062,290063,290064,290065,290066,290067,290068,290069,290070,290071,290072,290073,290074,290075,290076,290077,290078,290079,290080,290081,290082,290083,290084,290085,290086,290087,290088,290089,290090,290091,290092,290093,290094,290095,290096,290097,290098,290099,290100,290101,290102,290103,290104,290105,290106,290107,290108,290109,290110,290111,290112,290113,290114,290115,290116,290117,290118,290119,290120,290121,290122,290123,290124,290125,290126,290127,290128,290129,290130,290131,301393,301394,301395,301396,301397,301398,301399,301400,301401,301402,301403,301404,301405,301406,301407,301408,301409,301410,301411,301412,301413,301414,301415,301416,301417,301418,301419,301420,301421,301422,301423,301424,301425,301426,301427,301428,301429,301430,301431,301432,301433,301434,301435,301436,301437,301438,301439,301440,301441,301442,301443,301444,301445,301446,301447,301448,301449,301450,301451,301452,301453,301454,301455,301456,301457,301458,301459,301460,301461,301462,301463,301464,301465,301466,301467,301468,301469,301470,301471,301472,301473,301474,301475,301476,301477,301478,301479,301480,301481,301482,301483,301484,301485,301486,301487,301488,301489,301490,301491,301492,301493,301494,301495,301496,301497,301498,301499,301500,301501,301502,301503,301504,301505,301506,301507,301508,301509,301510,301511,301512,301513,301514,301515,301516,301517,301518,301519,301520,301521,301522,301523,301524,301525,301526,301527,301528,301529,301530,301531,301532,301533,301534,301535,301536,301537,301538,301539,301540,301541,301542,301543,301544,301545,301546,301547,301548,301549,301550,301551,301552,342973,342974,342975,342976,342977,342978,342998,371240,377927,398980) ;

-- ----------------------------
-- View structure for update_doc_sendback
-- ----------------------------
DROP VIEW IF EXISTS `update_doc_sendback`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `update_doc_sendback` AS select `case`.`id` AS `id`,`case`.`status` AS `status`,`case`.`doc_send_back_to_client_date` AS `doc_send_back_to_client_date`,`case`.`doc_received_by_client_date` AS `doc_received_by_client_date`,`case`.`original_bill_verified` AS `original_bill_verified`,`case`.`payment_date` AS `payment_date` from `case` where `case`.`id` in (163598,163259,162611,162354,161883,160824,160162,160023,157571,157243,156472,155870,147152,138989) ;

-- ----------------------------
-- View structure for verify_member_tpa
-- ----------------------------
DROP VIEW IF EXISTS `verify_member_tpa`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `verify_member_tpa` AS select `member`.`client` AS `tpa_client`,`member`.`member_principle` AS `tpa_principle`,`member`.`id` AS `tpa_id`,`member`.`member_name` AS `tpa_member_name`,`member`.`member_dob` AS `tpa_member_dob`,if(`member`.`member_card` is null or trim(`member`.`member_card`) = '',`member`.`policy_no`,`member`.`member_card`) AS `tpa_akses`,`member`.`member_card` AS `tpa_member_card`,`member`.`policy_no` AS `tpa_policy_no`,`member`.`member_email` AS `tpa_member_email`,`member`.`member_password` AS `tpa_member_password`,1 AS `member_flag` from `member` ;

-- ----------------------------
-- View structure for worksheet_03
-- ----------------------------
DROP VIEW IF EXISTS `worksheet_03`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `worksheet_03` AS select `worksheet`.`case` AS `case`,`worksheet`.`plan` AS `plan`,`worksheet`.`header` AS `header`,`worksheet`.`detail` AS `detail`,`worksheet`.`id` AS `id`,`worksheet`.`start_date` AS `start_date`,`worksheet`.`end_date` AS `end_date`,`worksheet`.`day` AS `day`,`worksheet`.`day_rate` AS `day_rate`,`worksheet`.`actual` AS `actual`,`worksheet`.`tolerance` AS `tolerance`,`worksheet`.`non_prorate` AS `non_prorate`,`worksheet`.`prorate` AS `prorate`,`worksheet`.`prorate_percent` AS `prorate_percent`,`worksheet`.`prorate_result` AS `prorate_result`,`worksheet`.`exclusion` AS `exclusion`,`worksheet`.`remaining_deductible` AS `remaining_deductible`,`worksheet`.`copayment` AS `copayment`,`worksheet`.`remaining_day` AS `remaining_day`,`worksheet`.`remaining_inner_limit` AS `remaining_inner_limit`,`worksheet`.`remaining_annual_limit` AS `remaining_annual_limit`,`worksheet`.`using_float_fund` AS `using_float_fund`,`worksheet`.`remaining_float_fund` AS `remaining_float_fund`,`worksheet`.`cash_benefit_availability` AS `cash_benefit_availability`,`worksheet`.`cover` AS `cover`,`worksheet`.`excess` AS `excess`,`worksheet`.`deductible` AS `deductible`,`worksheet`.`cash_benefit` AS `cash_benefit`,`worksheet`.`remarks` AS `remarks`,`worksheet`.`remarks_01` AS `remarks_01`,`worksheet`.`relocated_to` AS `relocated_to`,`worksheet`.`tick` AS `tick`,`worksheet`.`created_by` AS `created_by`,`worksheet`.`create_date` AS `create_date`,`worksheet`.`edited_by` AS `edited_by`,`worksheet`.`edit_date` AS `edit_date` from `worksheet` ;

-- ----------------------------
-- View structure for worksheet_header
-- ----------------------------
DROP VIEW IF EXISTS `worksheet_header`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `worksheet_header` AS select `worksheet`.`case` AS `case`,min(`worksheet`.`detail`) AS `plan_detail`,max(`plan_detail`.`max_day_rate`) AS `max_day_rate`,sum(`worksheet`.`actual`) AS `total_actual`,sum(`worksheet`.`cover`) AS `total_cover`,sum(`worksheet`.`excess`) AS `total_excess`,sum(`worksheet`.`cash_benefit`) AS `total_cash_benefit`,sum(`worksheet`.`deductible`) AS `total_deductible`,group_concat(`worksheet`.`remarks` order by `worksheet`.`id` ASC separator '; ') AS `excess_remarks`,max(`worksheet`.`edited_by`) AS `last_edited_by`,max(`worksheet`.`edit_date`) AS `last_edit_date` from (`worksheet` join `plan_detail` on(`worksheet`.`plan` = `plan_detail`.`plan` and `worksheet`.`header` = `plan_detail`.`header` and `worksheet`.`detail` = `plan_detail`.`id`)) group by `worksheet`.`case` order by NULL ;

-- ----------------------------
-- View structure for worksheet_staging
-- ----------------------------
DROP VIEW IF EXISTS `worksheet_staging`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `worksheet_staging` AS select `worksheet`.`case` AS `case`,min(`worksheet`.`id`) AS `id` from `worksheet` where `worksheet`.`tick` = 0 group by `worksheet`.`case` order by NULL ;

-- ----------------------------
-- View structure for x-perawatan
-- ----------------------------
DROP VIEW IF EXISTS `x-perawatan`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `x-perawatan` AS select `perawatan`.`client` AS `client`,`perawatan`.`category` AS `category`,`perawatan`.`id` AS `id_perawatan`,`perawatan`.`name` AS `name`,`plan_detail`.`id` AS `id`,`member`.`plan` AS `plan`,`member`.`id` AS `member_id`,`member`.`member_name` AS `member_name`,`member`.`member_card` AS `member_card` from (((`perawatan` left join `general` on(`general`.`id_perawatan` = `perawatan`.`id`)) left join `plan_detail` on(`plan_detail`.`id` = `general`.`plan_detail`)) left join `member` on(`member`.`plan` = `plan_detail`.`plan`)) where `member`.`client` in (6,8,14,28,30,35,36,37,38,282,283,284,285,288,289,293,369,378,380,389,399,401,402) and `perawatan`.`client` in (6,8,14,28,30,35,36,37,38,282,283,284,285,288,289,293,369,378,380,389,399,401,402) group by `member`.`id`,`perawatan`.`id` order by NULL ;

-- ----------------------------
-- View structure for x-perawatan-01
-- ----------------------------
DROP VIEW IF EXISTS `x-perawatan-01`;
CREATE ALGORITHM=UNDEFINED DEFINER=`luki.handoko`@`%` SQL SECURITY DEFINER VIEW `x-perawatan-01` AS select `perawatan`.`client` AS `client`,`perawatan`.`category` AS `category`,`perawatan`.`id` AS `id_perawatan`,`perawatan`.`name` AS `name`,`plan_detail`.`id` AS `id`,`member`.`plan` AS `plan`,`member`.`id` AS `member_id`,`member`.`member_name` AS `member_name`,`member`.`member_card` AS `member_card` from ((`perawatan` left join `plan_detail` on(`perawatan`.`client` = `plan_detail`.`client`)) join `member` on(`plan_detail`.`plan` = `member`.`plan`)) where `member`.`client` in (6,8,14,28,30,35,36,37,38,401) group by `member`.`id`,`perawatan`.`id` ;

-- ----------------------------
-- Function structure for automaticcode_01
-- ----------------------------
DROP FUNCTION IF EXISTS `automaticcode_01`;
DELIMITER ;;
CREATE DEFINER=`luki.handoko`@`%` FUNCTION `automaticcode_01`(`neonumb` INT) RETURNS varchar(50) CHARSET utf8
    NO SQL
BEGIN
DECLARE neocode varchar(50);
DECLARE neosort INT;
DECLARE neoyear INT;
DECLARE neomonth INT;
 
SET neomonth = DATE_FORMAT(curdate(),'%m');
SET neoyear = DATE_FORMAT(curdate(),'%y');
SET neosort = IF(neonumb IS NULL, 1, neonumb + 1);
SET neocode = CONCAT('ER',neoyear,LPAD(neomonth,2,0),LPAD(neosort,10,0));
 
RETURN neocode;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `act_log_02`;
DELIMITER ;;
CREATE TRIGGER `act_log_02` BEFORE UPDATE ON `activity_log` FOR EACH ROW Begin

IF (select count(activity_log.`case`) as `case` from activity_log where activity_log.`case` = NEW.`case` and activity_log.contact_type = 29 and activity_log.`sms_send` = 1 AND activity_log.`status` = 1) = 0 AND OLD.contact_type = 29 AND NEW.status IN (1,2,3) AND OLD.sms_send = 1 THEN
   INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,101,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,2,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,2,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,NEW.created_by,NEW.create_date,`userlevel` from `case` where `id` = OLD.case AND (mobile IS NOT NULL OR mobile <> '') AND `category` = 1 AND `type` = 2;
END IF;

IF OLD.contact_type = 12 AND NEW.status IN (1,2,3) AND OLD.sms_send = 1 THEN
   INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,102,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,2,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,2,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,NEW.created_by,NEW.create_date,`userlevel` from `case` where `id` = OLD.case AND (mobile IS NOT NULL OR mobile <> '') AND `category` = 1 AND `type` = 2;
END IF;

IF OLD.contact_type = 12 AND NEW.status IN (4,5,6) AND OLD.sms_send = 1 THEN
   INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,103,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,2,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,NEW.created_by,NEW.create_date,`userlevel` from `case` where `id` = OLD.case AND (mobile IS NOT NULL OR mobile <> '') AND `category` = 1 AND `type` = 2;
END IF;

end
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trg_admission_01`;
DELIMITER ;;
CREATE TRIGGER `trg_admission_01` BEFORE INSERT ON `admission` FOR EACH ROW BEGIN

SET @ref = (SELECT COUNT(admission.id) FROM admission WHERE `admission`.source=6 AND `admission`.`admission_date` = NEW.`admission_date` AND `admission`.`patient` = NEW.`patient` AND `admission`.`category` = NEW.`category`
	ORDER BY `admission`.`id` DESC LIMIT 1);
SET @refS = IF(@ref >= 0,@ref,NULL);

IF NEW.source = 5 AND (SELECT `member`.`policy_status` FROM `member` WHERE `member`.`id` = NEW.patient) = 0  THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Member tersebut tidak aktif';
END IF;

IF NEW.type = 1 AND NEW.provider in (310,2417,2462) AND NEW.client=1 AND (NEW.other_provider_city IS NULL OR NEW.other_provider_country IS NULL)  THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'If Type Reimbursement and Provider Non Panel, Please Complete Non-Panel Provider Country and Non-Panel Provider City';
END IF;

IF NEW.code_rawat in (SELECT `perawatan`.`id` FROM `perawatan` WHERE `perawatan`.`category` = 1) and NEW.source=5 THEN
SET NEW.category = 1;
ELSEIF NEW.code_rawat in (SELECT `perawatan`.`id` FROM `perawatan` WHERE `perawatan`.`category` = 0) and NEW.source=5 THEN
SET NEW.category = 0;
END IF;

IF NEW.source=5 AND ((SELECT `case`.`status`  FROM `case` WHERE `case`.`admission_date` = NEW.`admission_date` AND `case`.`patient` = NEW.`patient` AND `case`.`category` = NEW.`category` ORDER BY `case`.`id` DESC LIMIT 1) < 11) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Sudah Pernah Ada Pendaftaran.';
END IF;

IF NEW.source=5 THEN
SET NEW.policy_holder = (SELECT policy_holder FROM member WHERE id = NEW.patient);
SET NEW.member_name = (SELECT member_name FROM member WHERE id = NEW.patient);
END IF;
SET NEW.dob = (SELECT member_dob FROM member WHERE id = NEW.patient);
SET NEW.gender = (SELECT member_gender FROM member WHERE id = NEW.patient);
SET NEW.member_id = (SELECT member_id FROM member WHERE id = NEW.patient);
SET NEW.member_card = (SELECT member_card FROM member WHERE id = NEW.patient);
SET NEW.member_card_edc = (SELECT member_card_edc FROM member WHERE id = NEW.patient);
SET NEW.principle = (SELECT member_principle FROM member WHERE id = NEW.patient);
SET NEW.relation = (SELECT member_relation FROM member WHERE id = NEW.patient);
SET NEW.mobile = IF(NEW.mobile = '',(SELECT member_mobile FROM member WHERE id = NEW.patient),NEW.mobile);
SET NEW.client = (SELECT client FROM member WHERE id = NEW.patient);
SET NEW.branch = (SELECT branch FROM member WHERE id = NEW.patient);
SET NEW.company = (SELECT company FROM member WHERE id = NEW.patient);
SET NEW.policy_status = (SELECT policy_status FROM member WHERE id = NEW.patient);
SET NEW.policy_no = (SELECT policy_no FROM member WHERE id = NEW.patient);
SET NEW.policy_holder = (SELECT policy_holder FROM member WHERE id = NEW.patient);
SET NEW.policy_issue_date = (SELECT policy_issue_date FROM member WHERE id = NEW.patient);
SET NEW.policy_effective_date = (SELECT policy_effective_date FROM member WHERE id = NEW.patient);
SET NEW.policy_expiry_date = (SELECT policy_expiry_date FROM member WHERE id = NEW.patient);
SET NEW.policy_declare_date = (SELECT policy_declare_date FROM member WHERE id = NEW.patient);
SET NEW.policy_suspend_date = (SELECT policy_suspend_date FROM member WHERE id = NEW.patient);
SET NEW.policy_unsuspend_date = (SELECT policy_unsuspend_date FROM member WHERE id = NEW.patient);
SET NEW.policy_lapse_date = (SELECT policy_lapse_date FROM member WHERE id = NEW.patient);
SET NEW.policy_revival_date = (SELECT policy_revival_date FROM member WHERE id = NEW.patient);
SET NEW.policy_termination_date = (SELECT policy_termination_date FROM member WHERE id = NEW.patient);
SET NEW.exclusion = (SELECT exclusion FROM member WHERE id = NEW.patient);
SET NEW.special_condition = (SELECT special_condition FROM member WHERE id = NEW.patient);
SET NEW.program = (SELECT program FROM member WHERE id = NEW.patient);
SET NEW.plan = (SELECT plan FROM member WHERE id = NEW.patient);
SET NEW.plan_attach_date = (SELECT plan_attach_date FROM member WHERE id = NEW.patient);
SET NEW.plan_expiry_date = (SELECT plan_expiry_date FROM member WHERE id = NEW.patient);
SET NEW.rider = (SELECT rider FROM member WHERE id = NEW.patient);
SET NEW.rider_attach_date = (SELECT rider_attach_date FROM member WHERE id = NEW.patient);
SET NEW.rider_expiry_date = (SELECT rider_expiry_date FROM member WHERE id = NEW.patient);
SET NEW.currency_01 =  if( NEW.client = 26,NEW.currency_01,(SELECT program.currency FROM member INNER JOIN program ON member.program = program.id WHERE member.id = NEW.patient));
SET NEW.currency_02 = (SELECT program.currency FROM member INNER JOIN program ON member.program = program.id WHERE member.id = NEW.patient);
SET NEW.id_edc = (SELECT id_edc FROM provider WHERE id = NEW.provider);
SET NEW.provider_email = (SELECT email FROM provider WHERE id = NEW.provider);
SET NEW.currency_rate = 1;
SET NEW.member_remarks_by = (SELECT remarks_by FROM member WHERE id = NEW.patient);
SET NEW.member_remarks_date = (SELECT remarks_date FROM member WHERE id = NEW.patient); 

IF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 1 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 2 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 3 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 4 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 5 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 6 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 2 YEAR),3,0)));
END IF;

IF NEW.userlevel = 3 AND NEW.status = 2 AND NEW.type <> 2 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Contact Center can create only cashless case.';
ELSEIF NEW.userlevel = 7 AND NEW.status = 2 AND NEW.type = 2 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Operation-Admin can create only reimbursement case.';
ELSEIF NEW.status = 2 AND NEW.policy_lapse_date IS NOT NULL AND NEW.policy_revival_date IS NULL AND DATEDIFF(NEW.policy_lapse_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Policy Lapse Date.';
ELSEIF NEW.status = 2 AND NEW.policy_lapse_date IS NOT NULL AND NEW.policy_revival_date IS NOT NULL AND DATEDIFF(NEW.policy_revival_date,NEW.policy_lapse_date) < 0 AND DATEDIFF(NEW.policy_lapse_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Policy Lapse Date.';
ELSEIF NEW.status = 2 AND NEW.policy_termination_date IS NOT NULL AND DATEDIFF(NEW.policy_termination_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Policy Termination Date.';
ELSEIF NEW.status = 2 AND NEW.policy_effective_date IS NOT NULL AND DATEDIFF(NEW.admission_date, NEW.policy_effective_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be lower than Policy Effective Date.';
ELSEIF NEW.status = 2 AND DATEDIFF(NEW.plan_expiry_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Plan Expiry Date.';
ELSEIF NEW.status = 3 AND NEW.cancel_reason = '' THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter Cancel Reason.';
ELSEIF NEW.source <> 6 AND NEW.status = 2 AND (SELECT COUNT(`admission`.`id`) AS `id_count` FROM `admission` WHERE `admission`.`status` <> 3 AND `admission`.`category` = NEW.category AND `admission`.`type` = NEW.type AND `admission`.`patient` = NEW.patient AND `admission`.`provider` = NEW.provider AND `admission`.`admission_date` = NEW.admission_date)  > 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The case is redundant.';
END IF;

IF NEW.source = 5 AND NEW.policy_effective_date IS NOT NULL AND DATEDIFF(NEW.admission_date, NEW.policy_effective_date) < 1 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Tanggal Efektif Kepesertaaan Member Belum Dimulai';
END IF;

IF NEW.status = 2 AND NEW.type = 2 AND (SELECT status FROM provider WHERE id = NEW.provider) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Provider Status is Disable.';
ELSE
 SET NEW.provider_status = (SELECT status FROM provider WHERE id = NEW.provider);
END IF;

IF NEW.type = 1 THEN
 SET New.is_service_provided = if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM program WHERE id = NEW.program) = 1,1,0);
ELSEIF NEW.type = 2 OR NEW.type = 3 OR NEW.type = 4 THEN 
 IF NEW.status = 2 AND if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM program WHERE id = NEW.program) = 1,if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM provider WHERE id = NEW.provider) = 1,1,0),0) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The service is not provided by neither our Medical Provider nor Client.';
ELSE
 SET New.is_service_provided = if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM program WHERE id = NEW.program) = 1,if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM provider WHERE id = NEW.provider) = 1,1,0),0);
END IF;
END IF;

IF NEW.status = 2 AND NEW.category = 0 AND NEW.type = 2 AND if((SELECT if(provider LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0))) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The Medical Provider is not our Panel.';
ELSEIF NEW.status = 2 AND NEW.category = 1 AND NEW.type = 2 AND if((SELECT if(provider_01 LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0))) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The Medical Provider is not our Panel.';
ELSE
 SET NEW.is_panel = if((SELECT if(provider_01 LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0)));
END IF;


IF NEW.source in (5,6) AND  NEW.category = 0 AND NEW.type = 2 AND  if((SELECT if(provider LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0))) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The Medical Provider is not our Panel.';
ELSEIF NEW.source in (5,6) AND  NEW.category = 1 AND NEW.type = 2 AND  if((SELECT if(provider_01 LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0))) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The Medical Provider is not our Panel.';
ELSE
 SET NEW.is_panel = if((SELECT if(provider_01 LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0)));
END IF;


IF NEW.status = 2 AND NEW.appended IS NULL AND NEW.source not in (5,6) THEN
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date); 
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`created_by_01`,`create_date_01`,`source`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_issue_date`,`policy_effective_date`,`policy_expiry_date`,`policy_declare_date`,`policy_suspend_date`,`policy_unsuspend_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`waiting_period`,`exclusion`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`,`is_clean`,`currency_rate_01_to_idr`,`currency_rate_idr_to_02`,`amount_currency_01`,`bill_no`,`bill_issue_date`,`bill_due_date`,`batch_received`,`edited_by`,`edit_date`, `case_remarks`, other_provider_city, other_provider_country,member_card_edc,id_edc,provider_email,member_remarks,member_remarks_by,member_remarks_date) 
 VALUES (NEW.created_by,NEW.create_date,if(NEW.type=1,NEW.created_by_01,NULL),if(NEW.type=1,NEW.create_date_01,NULL),NEW.source,if(NEW.program=65,if(NEW.userlevel=10,35,if(NEW.client IN (32,33),33,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)))),if(NEW.client IN (32,33),33,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)))),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.mobile,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_issue_date,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_declare_date,NEW.policy_suspend_date,NEW.policy_unsuspend_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.waiting_period,NEW.exclusion,NEW.special_condition,NEW.program,NEW.plan,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,NEW.admission_date,concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program),NULL,0,0,COALESCE(NEW.amount_currency_01,0),NEW.bill_no,NEW.bill_issue_date,NEW.bill_due_date,NEW.batch_received,NEW.edited_by,NEW.create_date, 

(SELECT GROUP_CONCAT(case_remarks.remarks SEPARATOR ',  ') AS remarks FROM `admission` INNER JOIN case_remarks ON case_remarks.client = `admission`.client
WHERE `case_remarks`.client = NEW.client AND (`case_remarks`.program LIKE CONCAT('%',',',NEW.program,',','%')	OR `case_remarks`.program LIKE CONCAT(NEW.program, ',', '%')
OR `case_remarks`.program LIKE CONCAT('%', ',', NEW.program)) AND (`case_remarks`.plan LIKE CONCAT('%', ',', NEW.plan, ',', '%')
OR `case_remarks`.plan LIKE CONCAT(NEW.plan, ',', '%')	OR `case_remarks`.plan LIKE CONCAT('%', ',', NEW.plan)) 
AND (`case_remarks`.provider LIKE CONCAT('%',',',NEW.provider,',','%') OR `case_remarks`.provider LIKE CONCAT(NEW.provider, ',', '%')
OR `case_remarks`.provider LIKE CONCAT('%', ',', NEW.provider)) AND admission.patient=NEW.patient GROUP BY admission.id DESC LIMIT 1), 

NEW.other_provider_city,  NEW.other_provider_country,NEW.member_card_edc, NEW.id_edc, NULL,NEW.member_remarks,NEW.member_remarks_by,NEW.member_remarks_date);
 SET NEW.appended = 1;
END IF;

IF NEW.category=0 AND NEW.source=5 AND NEW.client not in (6, 36, 38) THEN
 SET NEW.status=2;
 SET NEW.plan_header = (SELECT header FROM plan_detail WHERE code_hospital_portal = NEW.code_rawat AND plan=NEW.plan LIMIT 1);
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date); 
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`created_by_01`,`create_date_01`,`source`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_issue_date`,`policy_effective_date`,`policy_expiry_date`,`policy_declare_date`,`policy_suspend_date`,`policy_unsuspend_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`waiting_period`,`exclusion`,`special_condition`,`program`,`plan`,`plan_header`,`code_rawat`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`discharge_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`,`is_clean`,`currency_rate_01_to_idr`,`currency_rate_idr_to_02`,`amount_currency_01`,`bill_no`,`bill_issue_date`,`bill_due_date`,`batch_received`,`userlevel`,member_card_edc,id_edc,provider_email) 
VALUES (NEW.created_by,NEW.create_date,NEW.created_by_01,NEW.create_date_01,NEW.source,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.mobile,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_issue_date,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_declare_date,NEW.policy_suspend_date,NEW.policy_unsuspend_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.waiting_period,NEW.exclusion,NEW.special_condition,NEW.program,NEW.plan,NEW.plan_header,NEW.code_rawat,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,NEW.admission_date,concat(NEW.admission_date,' ',NEW.admission_hour,':',NEW.admission_minute,':00'),concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program),NULL,0,0,COALESCE(NEW.amount_currency_01,0),NEW.bill_no,NEW.bill_issue_date,NEW.bill_due_date,NEW.batch_received,-1,NEW.member_card_edc, NEW.id_edc,NULL); 
 SET NEW.appended = 1;
ELSEIF NEW.category=1 AND NEW.source=5 AND NEW.client not in (6, 36, 38) THEN
 SET NEW.status=1;
 SET NEW.plan_header = (SELECT header FROM plan_detail WHERE code_hospital_portal = NEW.code_rawat AND plan=NEW.plan LIMIT 1);
END IF;

IF NEW.category=0 AND NEW.source=5 AND NEW.client in (6, 36, 38) THEN
 SET NEW.status=2;
 SET NEW.plan_header = (SELECT plan_detail.header FROM plan_detail INNER JOIN code_bluebird ON code_bluebird.plan_detail = plan_detail.id WHERE code_bluebird.code_hospital_portal = NEW.code_rawat AND plan_detail.plan=NEW.plan LIMIT 1);
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date); 
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`created_by_01`,`create_date_01`,`source`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_issue_date`,`policy_effective_date`,`policy_expiry_date`,`policy_declare_date`,`policy_suspend_date`,`policy_unsuspend_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`waiting_period`,`exclusion`,`special_condition`,`program`,`plan`,`plan_header`,`code_rawat`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`discharge_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`,`is_clean`,`currency_rate_01_to_idr`,`currency_rate_idr_to_02`,`amount_currency_01`,`bill_no`,`bill_issue_date`,`bill_due_date`,`batch_received`,`userlevel`,member_card_edc,id_edc,provider_email) 
VALUES (NEW.created_by,NEW.create_date,NEW.created_by_01,NEW.create_date_01,NEW.source,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.mobile,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_issue_date,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_declare_date,NEW.policy_suspend_date,NEW.policy_unsuspend_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.waiting_period,NEW.exclusion,NEW.special_condition,NEW.program,NEW.plan,(SELECT plan_detail.header FROM plan_detail INNER JOIN code_bluebird ON code_bluebird.plan_detail = plan_detail.id WHERE code_bluebird.code_hospital_portal = NEW.code_rawat AND plan_detail.plan=NEW.plan LIMIT 1),NEW.code_rawat,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,NEW.admission_date,concat(NEW.admission_date,' ',NEW.admission_hour,':',NEW.admission_minute,':00'),concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program),NULL,0,0,COALESCE(NEW.amount_currency_01,0),NEW.bill_no,NEW.bill_issue_date,NEW.bill_due_date,NEW.batch_received,-1,NEW.member_card_edc, NEW.id_edc, NULL); 
  SET NEW.appended = 1;
ELSEIF NEW.category=1 AND NEW.source=5 AND NEW.client in (6, 36, 38) THEN
 SET NEW.status=1;
 SET NEW.plan_header = (SELECT plan_detail.header FROM plan_detail INNER JOIN code_bluebird ON code_bluebird.plan_detail = plan_detail.id WHERE code_bluebird.code_hospital_portal = NEW.code_rawat AND plan_detail.plan=NEW.plan LIMIT 1);
END IF;

IF NEW.category=1 AND NEW.source=5 AND NEW.client not in (6, 36, 38) THEN
 SET NEW.status=2;
 SET NEW.plan_header = (SELECT header FROM plan_detail WHERE code_hospital_portal = NEW.code_rawat AND plan=NEW.plan LIMIT 1);
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date); 
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`created_by_01`,`create_date_01`,`source`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_issue_date`,`policy_effective_date`,`policy_expiry_date`,`policy_declare_date`,`policy_suspend_date`,`policy_unsuspend_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`waiting_period`,`exclusion`,`special_condition`,`program`,`plan`,`plan_header`,`code_rawat`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`,`is_clean`,`currency_rate_01_to_idr`,`currency_rate_idr_to_02`,`amount_currency_01`,`bill_no`,`bill_issue_date`,`bill_due_date`,`batch_received`,`userlevel`,member_card_edc,id_edc,provider_email) 
VALUES (NEW.created_by,NEW.create_date,NEW.created_by_01,NEW.create_date_01,NEW.source,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.mobile,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_issue_date,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_declare_date,NEW.policy_suspend_date,NEW.policy_unsuspend_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.waiting_period,NEW.exclusion,NEW.special_condition,NEW.program,NEW.plan,NEW.plan_header,NEW.code_rawat,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,NEW.admission_date,concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program),NULL,0,0,COALESCE(NEW.amount_currency_01,0),NEW.bill_no,NEW.bill_issue_date,NEW.bill_due_date,NEW.batch_received,-1,NEW.member_card_edc, NEW.id_edc,NULL); 
 SET NEW.appended = 1;
ELSEIF NEW.category=1 AND NEW.source=5 AND NEW.client not in (6, 36, 38) THEN
 SET NEW.status=1;
 SET NEW.plan_header = (SELECT header FROM plan_detail WHERE code_hospital_portal = NEW.code_rawat AND plan=NEW.plan LIMIT 1);
END IF;

IF NEW.category=1 AND NEW.source=5 AND NEW.client in (6, 36, 38) THEN
 SET NEW.status=2;
 SET NEW.plan_header = (SELECT plan_detail.header FROM plan_detail INNER JOIN code_bluebird ON code_bluebird.plan_detail = plan_detail.id WHERE code_bluebird.code_hospital_portal = NEW.code_rawat AND plan_detail.plan=NEW.plan LIMIT 1);
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date); 
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`created_by_01`,`create_date_01`,`source`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_issue_date`,`policy_effective_date`,`policy_expiry_date`,`policy_declare_date`,`policy_suspend_date`,`policy_unsuspend_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`waiting_period`,`exclusion`,`special_condition`,`program`,`plan`,`plan_header`,`code_rawat`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`,`is_clean`,`currency_rate_01_to_idr`,`currency_rate_idr_to_02`,`amount_currency_01`,`bill_no`,`bill_issue_date`,`bill_due_date`,`batch_received`,`userlevel`,member_card_edc,id_edc,provider_email,member_remarks,member_remarks_by,member_remarks_date) 
VALUES (NEW.created_by,NEW.create_date,NEW.created_by_01,NEW.create_date_01,NEW.source,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.mobile,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_issue_date,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_declare_date,NEW.policy_suspend_date,NEW.policy_unsuspend_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.waiting_period,NEW.exclusion,NEW.special_condition,NEW.program,NEW.plan,(SELECT plan_detail.header FROM plan_detail INNER JOIN code_bluebird ON code_bluebird.plan_detail = plan_detail.id WHERE code_bluebird.code_hospital_portal = NEW.code_rawat AND plan_detail.plan=NEW.plan LIMIT 1),NEW.code_rawat,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,NEW.admission_date,concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program),NULL,0,0,COALESCE(NEW.amount_currency_01,0),NEW.bill_no,NEW.bill_issue_date,NEW.bill_due_date,NEW.batch_received,-1,NEW.member_card_edc, NEW.id_edc,NULL,NEW.member_remarks,NEW.member_remarks_by,NEW.member_remarks_date); 
  SET NEW.appended = 1;
ELSEIF NEW.category=1 AND NEW.source=5 AND NEW.client in (6, 36, 38) THEN
 SET NEW.status=1;
 SET NEW.plan_header = (SELECT plan_detail.header FROM plan_detail INNER JOIN code_bluebird ON code_bluebird.plan_detail = plan_detail.id WHERE code_bluebird.code_hospital_portal = NEW.code_rawat AND plan_detail.plan=NEW.plan LIMIT 1);
END IF;

IF NEW.create_date_01 IS NOT NULL THEN
 SET NEW.created_by_01 = NEW.edited_by;
END IF;

IF NEW.status = 2 AND NEW.appended IS NULL AND NEW.source=6 THEN
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date,'-',@refS); 
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`created_by_01`,`create_date_01`,`source`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_issue_date`,`policy_effective_date`,`policy_expiry_date`,`policy_declare_date`,`policy_suspend_date`,`policy_unsuspend_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`waiting_period`,`exclusion`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`,`is_clean`,`currency_rate_01_to_idr`,`currency_rate_idr_to_02`,`amount_currency_01`,`bill_no`,`bill_issue_date`,`bill_due_date`,`batch_received`,`code_edc`,`TraceNumber`,`edited_by`,`edit_date`,member_card_edc,id_edc,provider_email,member_remarks,member_remarks_by,member_remarks_date) 
VALUES (NEW.created_by,NEW.create_date,NEW.created_by_01,NEW.create_date_01,NEW.source,if(NEW.program=65,if(NEW.userlevel=10,35,if(NEW.client IN (32,33),33,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)))),if(NEW.client IN (32,33),33,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)))),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.mobile,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_issue_date,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_declare_date,NEW.policy_suspend_date,NEW.policy_unsuspend_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.waiting_period,NEW.exclusion,NEW.special_condition,NEW.program,NEW.plan,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,DATE_FORMAT(NEW.create_date,'%Y-%m-%d'),concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program),NULL,0,0,COALESCE(NEW.amount_currency_01,0),NEW.bill_no,NEW.bill_issue_date,NEW.bill_due_date,NEW.batch_received,NEW.`code_edc`,NEW.`TraceNumber`,NEW.edited_by,NEW.create_date,NEW.member_card_edc,NEW.id_edc,NULL,NEW.member_remarks,NEW.member_remarks_by,NEW.member_remarks_date);
 SET NEW.appended = 1;
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trg_admission_02`;
DELIMITER ;;
CREATE TRIGGER `trg_admission_02` BEFORE UPDATE ON `admission` FOR EACH ROW BEGIN

IF (NEW.member_remarks IS NOT NULL AND OLD.member_remarks IS NULL) THEN
 SET NEW.member_remarks_by =  (SELECT remarks_by FROM member WHERE id = NEW.patient);
 SET NEW.member_remarks_date = (SELECT remarks_date FROM member WHERE id = NEW.patient); 
ELSEIF (NEW.member_remarks <> OLD.member_remarks AND OLD.member_remarks IS NOT NULL) THEN
 SET NEW.member_remarks_by =  (SELECT remarks_by FROM member WHERE id = NEW.patient);
 SET NEW.member_remarks_date = (SELECT remarks_date FROM member WHERE id = NEW.patient); 
END IF;

IF NEW.type = 1 AND NEW.provider in (310,2417,2462)  AND NEW.client=1 AND (NEW.other_provider_city IS NULL OR NEW.other_provider_country IS NULL)  THEN
SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'If Type Reimbursement and Provider Non Panel, Please Complete Non-Panel Provider Country and Non-Panel Provider City';
END IF;

IF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 1 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 2 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 3 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 4 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 5 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 6 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 2 YEAR),3,0)));
END IF;

IF NEW.userlevel = 3 AND NEW.status = 2 AND NEW.type <> 2 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Contact Center can create only cashless case.';
ELSEIF NEW.userlevel = 7 AND NEW.status = 2 AND NEW.type = 2 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Operation-Admin can create only reimbursement case.';
ELSEIF NEW.userlevel <> -1 AND OLD.status <> 1 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to edit the content of Admission.';
ELSEIF NEW.status = 2 AND NEW.policy_lapse_date IS NOT NULL AND NEW.policy_revival_date IS NULL AND DATEDIFF(NEW.policy_lapse_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Policy Lapse Date.';
ELSEIF NEW.status = 2 AND NEW.policy_lapse_date IS NOT NULL AND NEW.policy_revival_date IS NOT NULL AND DATEDIFF(NEW.policy_revival_date,NEW.policy_lapse_date) < 0 AND DATEDIFF(NEW.policy_lapse_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Policy Lapse Date.';
ELSEIF NEW.status = 2 AND NEW.policy_termination_date IS NOT NULL AND DATEDIFF(NEW.policy_termination_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Policy Termination Date.';
ELSEIF NEW.status = 2 AND NEW.policy_effective_date IS NOT NULL AND DATEDIFF(NEW.admission_date, NEW.policy_effective_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be lower than Policy Effective Date.';
ELSEIF NEW.status = 2 AND DATEDIFF(NEW.plan_expiry_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Plan Expiry Date.';
ELSEIF NEW.status = 3 AND NEW.cancel_reason = '' THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter Cancel Reason.';
ELSEIF  NEW.status = 2 AND (SELECT COUNT(`admission`.`id`) AS `id_count` FROM `admission` WHERE `admission`.`status` <> 3 AND `admission`.`category` = NEW.category AND `admission`.`type` = NEW.type AND `admission`.`patient` = NEW.patient AND `admission`.`provider` = NEW.provider AND `admission`.`admission_date` = NEW.admission_date) > 1 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The case is redundant.';
END IF;

IF NEW.status = 2 AND NEW.type = 2 AND (SELECT status FROM provider WHERE id = NEW.provider) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Provider Status is Disable.';
ELSE
 SET NEW.provider_status = (SELECT status FROM provider WHERE id = NEW.provider);
END IF;


IF NEW.type = 1 THEN
	SET New.is_service_provided = if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM program WHERE id = NEW.program) = 1,1,0);
ELSEIF NEW.type = 2 OR NEW.type = 3 OR  NEW.type = 4 THEN 
	IF NEW.status = 2 AND if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM program WHERE id = NEW.program) = 1,if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM provider WHERE id = NEW.provider) = 1,1,0),0) = 0 THEN
	 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The service is not provided by neither our Medical Provider nor Client.';
	END IF;
END IF;



IF NEW.status = 2 AND NEW.category = 0 AND NEW.type = 2 AND if((SELECT if(provider LIKE CONCAT(NEW.provider,',%') OR provider=NEW.provider ,1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0))) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The Medical Provider is not our Panel.';
ELSEIF NEW.status = 2 AND NEW.category = 1 AND NEW.type = 2 AND if((SELECT if(provider_01 LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0))) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The Medical Provider is not our Panel.';
ELSE
 SET NEW.is_panel = if((SELECT if(provider_01 LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0)));
END IF;

IF NEW.status = 2 AND NEW.appended IS NULL AND NEW.source <> 5 THEN
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date); 
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`created_by_01`,`create_date_01`,`source`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_issue_date`,`policy_effective_date`,`policy_expiry_date`,`policy_declare_date`,`policy_suspend_date`,`policy_unsuspend_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`waiting_period`,`exclusion`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`,`is_clean`,`currency_rate_01_to_idr`,`currency_rate_idr_to_02`,`amount_currency_01`,`bill_no`,`bill_issue_date`,`bill_due_date`,`batch_received`,`edited_by`,`edit_date`, `case_remarks`, other_provider_city, other_provider_country, member_card_edc,id_edc,provider_email,member_remarks,member_remarks_by,member_remarks_date) 
VALUES (NEW.edited_by,NEW.create_date,if(NEW.type=1,NEW.created_by_01,NULL),if(NEW.type=1,NEW.create_date_01,NULL),NEW.source,if(NEW.program=65,if(NEW.userlevel=10,35,if(NEW.client IN (32,33),33,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)))),if(NEW.client IN (32,33),33,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)))),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.mobile,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_issue_date,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_declare_date,NEW.policy_suspend_date,NEW.policy_unsuspend_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.waiting_period,NEW.exclusion,NEW.special_condition,NEW.program,NEW.plan,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,NEW.admission_date,concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program),NULL,0,0,COALESCE(NEW.amount_currency_01,0),NEW.bill_no,NEW.bill_issue_date,NEW.bill_due_date,NEW.batch_received,NEW.edited_by,NEW.create_date, 

(SELECT GROUP_CONCAT(case_remarks.remarks SEPARATOR ',  ') AS remarks FROM `admission` INNER JOIN case_remarks ON case_remarks.client = `admission`.client
WHERE `case_remarks`.client = NEW.client AND (`case_remarks`.program LIKE CONCAT('%',',',NEW.program,',','%')	OR `case_remarks`.program LIKE CONCAT(NEW.program, ',', '%')
OR `case_remarks`.program LIKE CONCAT('%', ',', NEW.program)) AND (`case_remarks`.plan LIKE CONCAT('%', ',', NEW.plan, ',', '%')
OR `case_remarks`.plan LIKE CONCAT(NEW.plan, ',', '%')	OR `case_remarks`.plan LIKE CONCAT('%', ',', NEW.plan)) 
AND (`case_remarks`.provider LIKE CONCAT('%',',',NEW.provider,',','%') OR `case_remarks`.provider LIKE CONCAT(NEW.provider, ',', '%')
OR `case_remarks`.provider LIKE CONCAT('%', ',', NEW.provider)) AND admission.admission_date = NEW.admission_date AND admission.patient=NEW.patient ORDER BY admission.id DESC LIMIT 1),  

NEW.other_provider_city, NEW.other_provider_country, NEW.member_card_edc, NEW.id_edc,NULL,NEW.member_remarks,NEW.member_remarks_by,NEW.member_remarks_date);
 SET NEW.appended = 1;
END IF;

IF OLD.source=5 AND NEW.status=3 THEN
 SET NEW.source_header = 2;
END IF;

IF NEW.status = 2 AND (NEW.code_rawat IS NOT NULL OR NEW.code_rawat <> '') AND NEW.source = 5 THEN
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date); 
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`created_by_01`,`create_date_01`,`source`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_issue_date`,`policy_effective_date`,`policy_expiry_date`,`policy_declare_date`,`policy_suspend_date`,`policy_unsuspend_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`waiting_period`,`exclusion`,`special_condition`,`program`,`plan`,`plan_header`,`code_rawat`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`,`is_clean`,`currency_rate_01_to_idr`,`currency_rate_idr_to_02`,`amount_currency_01`,`bill_no`,`bill_issue_date`,`bill_due_date`,`batch_received`,`edited_by`,`edit_date`,  member_card_edc,id_edc,provider_email,member_remarks,member_remarks_by,member_remarks_date) 
VALUES (NEW.edited_by,NEW.create_date,NEW.created_by_01,NEW.create_date_01,NEW.source,if(NEW.program=65,if(NEW.userlevel=10,35,if(NEW.client IN (32,33),33,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)))),if(NEW.client IN (32,33),33,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)))),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.mobile,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_issue_date,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_declare_date,NEW.policy_suspend_date,NEW.policy_unsuspend_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.waiting_period,NEW.exclusion,NEW.special_condition,NEW.program,NEW.plan,NEW.plan_header,NEW.code_rawat,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,NOW(),concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program),NULL,0,0,COALESCE(NEW.amount_currency_01,0),NEW.bill_no,NEW.bill_issue_date,NEW.bill_due_date,NEW.batch_received,NEW.edited_by,NEW.create_date, NEW.member_card_edc, NEW.id_edc,NULL,NEW.member_remarks,NEW.member_remarks_by,NEW.member_remarks_date);
 SET NEW.appended = 1;
END IF;

IF NEW.create_date_01 IS NOT NULL THEN
 SET NEW.created_by_01 = NEW.edited_by;
END IF;



END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigbfins_api_edc_log`;
DELIMITER ;;
CREATE TRIGGER `trigbfins_api_edc_log` BEFORE INSERT ON `api_edc_log` FOR EACH ROW BEGIN

SET NEW.created_date = now();

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `case_trg_04`;
DELIMITER ;;
CREATE TRIGGER `case_trg_04` BEFORE INSERT ON `case` FOR EACH ROW BEGIN

DECLARE s VARCHAR(50);
DECLARE i INTEGER;
DECLARE p VARCHAR(50);


IF NEW.source = 4 THEN
SET i = (SELECT SUBSTRING(`case`.`batch_received`,8,10) AS `neonumb`
FROM `case` WHERE `case`.`source` = 4 ORDER BY SUBSTRING(`case`.`batch_received`,8,10) DESC LIMIT 1);
SET p =  (SELECT CONCAT(SUBSTRING(`case`.`batch_received`,3,2),LPAD(SUBSTRING(`case`.`batch_received`,5,2),2,0)) AS `lastmonth`
FROM `case` WHERE `case`.`source` = 4 ORDER BY CONCAT(SUBSTRING(`case`.`batch_received`,3,2),LPAD(SUBSTRING(`case`.`batch_received`,5,2),2,0)) DESC LIMIT 1);
SET s = if(p = DATE_FORMAT(curdate(),'%y%m'),(SELECT automaticcode_01(i)),(SELECT automaticcode_01(0)));
END IF;


END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `case_trg_02`;
DELIMITER ;;
CREATE TRIGGER `case_trg_02` AFTER INSERT ON `case` FOR EACH ROW BEGIN


IF (NEW.plan_header IS NOT NULL OR NEW.plan_header <> '') AND (NEW.code_rawat IS NOT NULL OR NEW.code_rawat <>'') AND NEW.client in (6,36,38) AND NEW.source in (1,2,5)  THEN
INSERT INTO `pre_worksheet` (`case`,`client`, `plan`,`header`, `code_rawat`,`detail`,`general`,`patient`,`principle`,`program`)
SELECT NEW.id, NEW.client, NEW.plan, NEW.plan_header, code_bluebird.code_hospital_portal as code_rawat, plan_detail.id AS plan_detail, general.id AS general, NEW.patient, NEW.principle, NEW.program
FROM `case` INNER JOIN plan_detail ON `case`.plan = plan_detail.plan INNER JOIN general ON plan_detail.id = general.plan_detail AND `case`.code_rawat = general.id_perawatan INNER JOIN code_bluebird ON code_bluebird.plan_detail = plan_detail.id
WHERE `case`.id = NEW.id AND plan_detail.plan = NEW.plan AND plan_detail.header = NEW.plan_header AND code_bluebird.`code_hospital_portal` = NEW.code_rawat  ;
END IF;

IF (NEW.plan_header IS NOT NULL OR NEW.plan_header <> '') AND (NEW.code_rawat IS NOT NULL OR NEW.code_rawat <>'') AND NEW.client not in (6, 36, 38)  AND NEW.source in (1,2,5)  THEN
INSERT INTO `pre_worksheet` (`case`,`client`, `plan`,`header`, `code_rawat`,`detail`,`general`,`patient`,`principle`,`program`)
SELECT NEW.`id`,NEW.`client`, NEW.`plan`, NEW.`plan_header`, NEW.`code_rawat`, `plan_detail`.`id`, `general`.`id`, NEW.`patient`, NEW.`principle`, NEW.`program`
FROM `case` INNER JOIN `plan_detail` ON `case`.`plan` = plan_detail.plan INNER JOIN general ON plan_detail.id = general.plan_detail
WHERE `case`.id = NEW.id AND plan_detail.plan= NEW.plan AND plan_detail.header=NEW.plan_header and plan_detail.`code_hospital_portal`=NEW.code_rawat ;
END IF;

IF(NEW.client = 24 and NEW.type = 2) THEN
    INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`)
    SELECT NEW.`id`,NEW.`case_id_client`,0,1 FROM `case` WHERE client=24 and `id`= NEW.`id`;
END IF;


END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `case_trg_01`;
DELIMITER ;;
CREATE TRIGGER `case_trg_01` BEFORE UPDATE ON `case` FOR EACH ROW BEGIN

IF OLD.source IS NOT NULL THEN
 SET NEW.source = OLD.source;
END IF;

IF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 1 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_effective_date AND DATE_ADD(NEW.policy_effective_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 2 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.plan_attach_date AND DATE_ADD(NEW.plan_attach_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 3 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_issue_date AND DATE_ADD(NEW.policy_issue_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 4 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_declare_date AND DATE_ADD(NEW.policy_declare_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 5 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.rider_attach_date AND DATE_ADD(NEW.rider_attach_date, INTERVAL 2 YEAR),3,0)));
ELSEIF (SELECT `client`.`waiting_period` AS `waiting_period` FROM `client` WHERE `client`.`id` = NEW.client) = 6 THEN
 SET NEW.waiting_period = IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 30 DAY),1,IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 1 YEAR),2,IF(NEW.admission_date BETWEEN NEW.policy_revival_date AND DATE_ADD(NEW.policy_revival_date, INTERVAL 2 YEAR),3,0)));
END IF;

IF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.symptom_since IS NOT NULL AND DATEDIFF(NEW.admission_date, NEW.symptom_since) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Symptom Since can not be newer than Admisssion Date.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.discharge_date IS NOT NULL AND DATEDIFF(NEW.discharge_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Discharge Date can not be older than Admisssion Date.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.discharge_date IS NOT NULL AND DATEDIFF(CURDATE(),NEW.discharge_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Discharge Date can not be newer than Current Date.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.type = 2 AND NEW.upload_bill_finished <> 0 AND NEW.discharge_date IS NULL THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter required field - Discharge Date & Time.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.type <> 2 AND NEW.upload_original_bill <> '' AND NEW.discharge_date IS NULL THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter required field - Discharge Date & Time.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.upload_original_bill <> '' AND NEW.bill_issue_date IS NULL THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter required field - Bill Issue Date.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.upload_original_bill <> '' AND NEW.bill_due_date IS NULL THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter required field - Bill Due Date.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.userlevel <> 13 AND NEW.payment_date IS NOT NULL AND NEW.original_bill_verified <> 4 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please verify required field - Original Bill Verification.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.userlevel <> 13 AND NEW.payment_date IS NOT NULL AND NEW.upload_proof_of_payment = '' THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter required field - Upload Proof of Payment.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.doc_send_back_to_client_required = 1 AND NEW.doc_send_back_to_client_date IS NOT NULL AND NEW.doc_received_by_client_date IS NOT NULL AND DATEDIFF(NEW.doc_received_by_client_date, NEW.doc_send_back_to_client_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Document Send Back to Client Date & Time can not be newer than Document Received by Client Date & Time.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.doc_send_back_to_client_required = 2 AND NEW.doc_send_back_to_client_date IS NOT NULL THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please empty required field - Document Send Back to Client Date & Time.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.doc_send_back_to_client_required = 2 AND NEW.doc_received_by_client_date IS NOT NULL THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please empty required field - Document Received by Client Date & Time.';
ELSEIF NEW.userlevel  <> -1 AND NEW.userlevel <> 1 AND NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 12 AND NEW.userlevel <> 13  AND NEW.type = 2 AND NEW.admission_date <> OLD.admission_date THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to change the value of Admission Date.'; 
ELSEIF NEW.userlevel <> -1 AND NEW.userlevel <> 1 AND NEW.userlevel <> 2 AND NEW.userlevel <> 5 AND NEW.userlevel <> 6 AND NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 12 AND NEW.userlevel <> 13 AND NEW.type <> 2 AND NEW.admission_date <> OLD.admission_date THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to change the value of Admission Date.'; 
ELSEIF NEW.userlevel <> -1 AND NEW.userlevel <> 1 AND NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.admission_time <> OLD.admission_time THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to change the value of Admission Time.'; 
ELSEIF NEW.userlevel <> -1 AND NEW.userlevel <> 1 AND NEW.userlevel <> 2 AND NEW.userlevel <> 4 AND NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.symptom_since <> OLD.symptom_since THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to change the value of Symptom Since.'; 
ELSEIF NEW.userlevel <> -1 AND NEW.userlevel <> 1 AND NEW.userlevel <> 2 AND NEW.userlevel <> 4 AND NEW.userlevel <> 5 AND NEW.userlevel <> 7 AND NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 12 AND NEW.userlevel <> 13 AND NEW.discharge_date <> OLD.discharge_date THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to change the value of Discharge Date & Time.'; 
ELSEIF NEW.userlevel <> -1 AND NEW.userlevel <> 1 AND NEW.userlevel <> 8 AND NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.payment_date <> OLD.payment_date THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to change the value of Payment Date & Time.'; 
ELSEIF NEW.userlevel <> -1 AND NEW.userlevel <> 1 AND NEW.userlevel <> 7 AND NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.bill_issue_date <> OLD.bill_issue_date THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to change the value of Bill Issue Date.'; 
ELSEIF NEW.userlevel <> -1 AND NEW.userlevel <> 1 AND NEW.userlevel <> 7 AND NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.bill_due_date <> OLD.bill_due_date THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You do not have permission to change the value of Bill Due Date.'; 
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.issue_log <> OLD.issue_log AND NEW.issue_log = 2 AND (SELECT issuance_limit FROM users WHERE username = NEW.edited_by) < (SELECT total_cover FROM worksheet_header WHERE `case` = NEW.id) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Issuance Limit amount is insufficlient, please ask other Checker with sufficlient Issuance Limit amount to Issue LOG.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.client = 26 AND (NEW.plan_header IS NULL OR NEW.plan_header = '') THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'For Equity, Coverage Type is mandatory.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.client = 26 AND (NEW.amount_currency_01 IS NULL OR NEW.amount_currency_01 = '') THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'For Equity, Amount - Total Actual is mandatory.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.client = 26 AND NEW.status = 20 AND (NEW.currency_rate_01_to_idr = '' OR NEW.currency_rate_01_to_idr IS NULL OR NEW.currency_rate_01_to_idr = 0) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'For Equity, Currency Rate - [A] to IDR is mandatory.';
ELSEIF NEW.userlevel <> 8 AND NEW.userlevel <> 10 AND NEW.userlevel <> 13 AND NEW.client = 26 AND NEW.status = 20 AND (NEW.currency_rate_idr_to_02 = '' OR NEW.currency_rate_idr_to_02 IS NULL OR NEW.currency_rate_idr_to_02 = 0) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'For Equity, Currency Rate - IDR to [P] is mandatory.';
ELSEIF NEW.ws_finished = 1 AND OLD.ws_finished <> 1 AND  ((SELECT SUM(worksheet.`excess`) FROM worksheet WHERE worksheet.`case` =NEW.id) = 0) AND ((SELECT SUM(worksheet.`cover`) FROM worksheet WHERE worksheet.`case` =NEW.id) = 0) AND NEW.source <> 5 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Worksheet Cover Amount and Excess Amount Cannot Null';
ELSEIF NEW.ws_approval = 3 AND OLD.ws_approval <> 3 AND  ((SELECT SUM(worksheet.`excess`) FROM worksheet WHERE worksheet.`case` =NEW.id) = 0) AND ((SELECT SUM(worksheet.`cover`) FROM worksheet WHERE worksheet.`case` = NEW.id) = 0) AND NEW.source <> 5 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Worksheet Cover Amount and Excess Amount Cannot Null';
END IF;

IF NEW.client = 26 AND NEW.original_bill_checked_remarks = '' AND (SELECT COUNT(`case`.`id`) AS `count` FROM `case` WHERE `case`.`patient` = NEW.patient AND `case`.`admission_date` = NEW.admission_date AND `case`.`provider` = NEW.provider AND `case`.`other_provider` = NEW.other_provider GROUP BY `case`.`patient`,`case`.`admission_date`,`case`.`provider`,`case`.`other_provider`) > 1 THEN
 SET NEW.original_bill_checked_remarks = 'Case ini ada kemugkinan double dengan case lain. Mohon dicek berdasarkan nama pasien, admission date, dan medical provider.';
ELSEIF NEW.client = 26 AND NEW.original_bill_checked_remarks IS NULL AND (SELECT COUNT(`case`.`id`) AS `count` FROM `case` WHERE `case`.`patient` = NEW.patient AND `case`.`admission_date` = NEW.admission_date AND `case`.`provider` = NEW.provider AND `case`.`other_provider` = NEW.other_provider GROUP BY `case`.`patient`,`case`.`admission_date`,`case`.`provider`,`case`.`other_provider`) > 1 THEN
 SET NEW.original_bill_checked_remarks = 'Case ini ada kemugkinan double dengan case lain. Mohon dicek berdasarkan nama pasien, admission date, dan medical provider.';
END IF;

IF NEW.source=5 AND (SELECT count(`case`.id) as count FROM `case` WHERE `case`.id = NEW.id AND ((`case`.exclusion LIKE (CONCAT(NEW.diagnosis,',%'))) OR (`case`.exclusion LIKE (CONCAT('%',',',NEW.diagnosis)))  OR (`case`.exclusion LIKE (CONCAT('%',',',NEW.diagnosis,',%')))  )) =1 THEN
  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Diagnosis Masuk Dalam Pengecualian Polis. Silahkan Hubungi AAI';
END IF;

IF NEW.upload_haf <> '' and NEW.upload_haf <> OLD.upload_haf THEN
 SET NEW.haf_uploaded_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.haf_upload_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.upload_haf <> '' and OLD.upload_haf = '' THEN
 SET NEW.haf_uploaded_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.haf_upload_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.upload_doc <> '' and NEW.upload_doc <> OLD.upload_doc THEN
 SET NEW.doc_uploaded_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.doc_upload_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.upload_doc <> '' and OLD.upload_doc = '' THEN
 SET NEW.doc_uploaded_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.doc_upload_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.upload_haf_doc_finished <> OLD.upload_haf_doc_finished THEN
 SET NEW.upload_haf_doc_finished_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.upload_haf_doc_finished_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.upload_haf_doc_finished <> 0 and OLD.upload_haf_doc_finished = 0 THEN
 SET NEW.upload_haf_doc_finished_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.upload_haf_doc_finished_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.haf_doc_completed <> OLD.haf_doc_completed THEN
 SET NEW.haf_doc_completed_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.haf_doc_completed_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.haf_doc_completed <> 1 AND OLD.haf_doc_completed = 1 THEN
 SET NEW.haf_doc_completed_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.haf_doc_completed_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.issue_initial_log <> OLD.issue_initial_log THEN
 SET NEW.initial_log_issued_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.initial_log_issue_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.issue_initial_log <> 1 AND OLD.issue_initial_log = 1 THEN
 SET NEW.initial_log_issued_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.initial_log_issue_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.issue_initial_log <> OLD.issue_initial_log && OLD.initial_log_issue_date_01 IS NULL THEN
 SET NEW.initial_log_issue_date_01 = coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.initial_log_issued_by_01 = coalesce(NEW.edited_by,NEW.created_by);
ELSEIF NEW.issue_initial_log <> 1 AND OLD.issue_initial_log = 1 && OLD.initial_log_issue_date_01 IS NULL THEN
 SET NEW.initial_log_issue_date_01 = coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.initial_log_issued_by_01 = coalesce(NEW.edited_by,NEW.created_by);
END IF;

IF NEW.initial_log_issue_date_01 <> OLD.initial_log_issue_date_01 THEN
 SET NEW.initial_log_issued_by_01 = coalesce(NEW.edited_by,NEW.created_by);
END IF;

IF NEW.discharge_plan <> OLD.discharge_plan THEN
 SET NEW.discharge_plan_received_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.discharge_plan_receive_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.discharge_plan IS NOT NULL AND OLD.discharge_plan IS NULL THEN
 SET NEW.discharge_plan_received_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.discharge_plan_receive_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.bill_received <> OLD.bill_received THEN
 SET NEW.bill_received_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.bill_received_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.bill_received = 1 and OLD.bill_received IS NULL THEN
 SET NEW.bill_received_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.bill_received_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.upload_bill <> '' and NEW.upload_bill <> OLD.upload_bill THEN
 SET NEW.bill_uploaded_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.bill_upload_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.upload_bill <> '' and OLD.upload_bill = '' THEN
 SET NEW.bill_uploaded_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.bill_upload_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.upload_bill_finished <> OLD.upload_bill_finished THEN
 SET NEW.upload_bill_finished_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.upload_bill_finished_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.upload_bill_finished <> 0 and OLD.upload_bill_finished = 0 THEN
 SET NEW.upload_bill_finished_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.upload_bill_finished_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.bill_completed <> OLD.bill_completed THEN
 SET NEW.bill_completed_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.bill_completed_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.bill_completed <> 1 AND OLD.bill_completed = 1 THEN
 SET NEW.bill_completed_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.bill_completed_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.bill_completed <> OLD.bill_completed && OLD.bill_completed_date_01 IS NULL THEN
 SET NEW.bill_completed_date_01 = coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.bill_completed_by_01 = coalesce(NEW.edited_by,NEW.created_by);
ELSEIF NEW.bill_completed <> 1 AND OLD.bill_completed = 1 && OLD.bill_completed_date_01 IS NULL THEN
 SET NEW.bill_completed_date_01 = coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.bill_completed_by_01 = coalesce(NEW.edited_by,NEW.created_by);
END IF;

IF NEW.bill_completed_date_01 <> OLD.bill_completed_date_01 THEN
 SET NEW.bill_completed_by_01 = coalesce(NEW.edited_by,NEW.created_by);
END IF;

IF NEW.exclusion LIKE CONCAT(NEW.diagnosis,',%') OR NEW.exclusion LIKE CONCAT('%',', ',NEW.diagnosis,',%') OR NEW.exclusion LIKE CONCAT('%',', ',NEW.diagnosis) AND NEW.client <> 263 THEN
 SET NEW.ws_approval_remarks = if(NEW.ws_approval_remarks LIKE CONCAT('%','Diagnosis utama ada di daftar pengecualian','%'),NEW.ws_approval_remarks,if(NEW.ws_approval_remarks = '','Diagnosis utama ada di daftar pengecualian',if(ISNULL(NEW.ws_approval_remarks),'Diagnosis utama ada di daftar pengecualian',CONCAT(NEW.ws_approval_remarks,'; ','Diagnosis utama ada di daftar pengecualian'))));
ELSEIF ((NEW.exclusion LIKE CONCAT(OLD.diagnosis,',%') OR NEW.exclusion LIKE CONCAT('%',', ',OLD.diagnosis,',%') OR NEW.exclusion LIKE CONCAT('%',', ',OLD.diagnosis)) <>  (NEW.exclusion LIKE CONCAT(NEW.diagnosis,',%') OR NEW.exclusion LIKE CONCAT('%',', ',NEW.diagnosis,',%') OR NEW.exclusion LIKE CONCAT('%',', ',NEW.diagnosis)) )AND NEW.client <> 263 THEN
 SET NEW.ws_approval_remarks = if(NEW.ws_approval_remarks LIKE CONCAT('%','Diagnosis utama ada di daftar pengecualian','%'),NEW.ws_approval_remarks,if(NEW.ws_approval_remarks = '','Diagnosis utama ada di daftar pengecualian',if(ISNULL(NEW.ws_approval_remarks),'Diagnosis utama ada di daftar pengecualian',CONCAT(NEW.ws_approval_remarks,'; ','Diagnosis utama ada di daftar pengecualian'))));
ELSEIF (SELECT count(`case`.id) as count FROM `case` WHERE `case`.id = NEW.id AND `case`.client = 38 AND ((`case`.exclusion LIKE (CONCAT(NEW.diagnosis,',%'))) OR (`case`.exclusion LIKE (CONCAT('%',',',NEW.diagnosis)))  OR (`case`.exclusion LIKE (CONCAT('%',',',NEW.diagnosis,',%')))  )) =1 AND (NEW.issue_log=2) AND (NEW.source <> 6) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Final Diagnosis include in Exclusion Member.';
END IF;

IF NEW.source = 6 AND NEW.ws_finished = 1 AND OLD.procced_to_worksheet = 0 AND NEW.category = 0 THEN
 SET NEW.procced_to_worksheet = 1;
END IF;

IF NEW.ws_type <> OLD.ws_type THEN
 INSERT INTO `worksheet` (`case`,`plan`,`header`,`detail`,`day`,`day_rate`,`actual`,`tolerance`,`non_prorate`,`prorate`,`prorate_percent`,`prorate_result`,`exclusion`,`remaining_deductible`,`copayment`,`per_day_limit`,`per_day_limit_balance`,`per_case_limit`,`remaining_day`,`remaining_inner_limit`,`remaining_annual_limit`,`using_float_fund`,`remaining_float_fund`,`cash_benefit_availability`,`cover`,`excess`,`deductible`,`cash_benefit`,`created_by`,`create_date`,`tick`) SELECT NEW.id AS `case`,`plan_detail`.`plan` AS `plan`,`plan_detail`.`header` AS `header`,`plan_detail`.`id` AS `detail`,1 AS `day`,0 AS `day_rate`,0 AS `actual`,0 AS `tolerance`,0 AS `non_prorate`,0 AS `prorate`,0 AS `prorate_percent`,0 AS `prorate_result`,0 AS `exclusion`,0 AS `remaining_deductible`,1 AS `copayment`,`plan_detail`.`per_day_limit` AS `per_day_limit`,0 AS `per_day_limit_balance`,`plan_detail`.`per_case_limit` AS `per_case_limit`,0 AS `remaining_day`,0 AS `remaining_inner_limit`,0 AS `remaining_annual_limit`,0 AS `using_float_fund`,0 AS `remaining_float_fund`,0 AS `cash_benefit_availability`,0 AS `cover`,0 AS `excess`,0 AS `deductible`,0 AS `cash_benefit`,NEW.edited_by AS `created_by`,NEW.edit_date AS `create_date`,0 AS `tick` FROM `plan_detail` WHERE `plan_detail`.`plan` = NEW.plan;
ELSEIF NEW.ws_type <> 0 AND OLD.ws_type = 0 THEN
 INSERT INTO `worksheet` (`case`,`plan`,`header`,`detail`,`day`,`day_rate`,`actual`,`tolerance`,`non_prorate`,`prorate`,`prorate_percent`,`prorate_result`,`exclusion`,`remaining_deductible`,`copayment`,`per_day_limit`,`per_day_limit_balance`,`per_case_limit`,`remaining_day`,`remaining_inner_limit`,`remaining_annual_limit`,`using_float_fund`,`remaining_float_fund`,`cash_benefit_availability`,`cover`,`excess`,`deductible`,`cash_benefit`,`created_by`,`create_date`,`tick`) SELECT NEW.id AS `case`,`plan_detail`.`plan` AS `plan`,`plan_detail`.`header` AS `header`,`plan_detail`.`id` AS `detail`,1 AS `day`,0 AS `day_rate`,0 AS `actual`,0 AS `tolerance`,0 AS `non_prorate`,0 AS `prorate`,0 AS `prorate_percent`,0 AS `prorate_result`,0 AS `exclusion`,0 AS `remaining_deductible`,1 AS `copayment`,`plan_detail`.`per_day_limit` AS `per_day_limit`,0 AS `per_day_limit_balance`,`plan_detail`.`per_case_limit` AS `per_case_limit`,0 AS `remaining_day`,0 AS `remaining_inner_limit`,0 AS `remaining_annual_limit`,0 AS `using_float_fund`,0 AS `remaining_float_fund`,0 AS `cash_benefit_availability`,0 AS `cover`,0 AS `excess`,0 AS `deductible`,0 AS `cash_benefit`,NEW.edited_by AS `created_by`,NEW.edit_date AS `create_date`,0 AS `tick` FROM `plan_detail` WHERE `plan_detail`.`plan` = NEW.plan;
END IF;

IF NEW.ws_finished <> OLD.ws_finished THEN
 SET NEW.ws_finished_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.ws_finished_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.ws_finished <> 0 AND OLD.ws_finished = 0 THEN
 SET NEW.ws_finished_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.ws_finished_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.ws_approval <> OLD.ws_approval THEN
 SET NEW.ws_approval_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.ws_approval_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.ws_approval <> 1 AND OLD.ws_approval =  1 THEN
 SET NEW.ws_approval_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.ws_approval_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.issue_log <> OLD.issue_log THEN
 SET NEW.log_issued_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.log_issue_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.issue_log <> 1 AND OLD.issue_log = 1 THEN
 SET NEW.log_issued_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.log_issue_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.issue_log <> OLD.issue_log && OLD.log_issue_date_01 IS NULL THEN
 SET NEW.log_issue_date_01 = coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.log_issued_by_01 = coalesce(NEW.edited_by,NEW.created_by);
ELSEIF NEW.issue_log <> 1 AND OLD.issue_log = 1 && OLD.log_issue_date_01 IS NULL THEN
 SET NEW.log_issue_date_01 = coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.log_issued_by_01 = coalesce(NEW.edited_by,NEW.created_by);
END IF;

IF NEW.log_issue_date_01 <> OLD.log_issue_date_01 THEN
 SET NEW.log_issued_by_01 = coalesce(NEW.edited_by,NEW.created_by);
END IF;

IF NEW.issue_log_option = 2 AND NEW.issue_log_option <> OLD.issue_log_option THEN
 INSERT INTO `worksheet_01` (`case`,`id`,`plan`,`header`,`detail`,`day`,`day_rate`,`actual`,`tolerance`,`non_prorate`,`prorate`,`prorate_percent`,`prorate_result`,`exclusion`,`remaining_deductible`,`copayment`,`per_day_limit`,`per_day_limit_balance`,`per_case_limit`,`remaining_day`,`remaining_inner_limit`,`remaining_annual_limit`,`using_float_fund`,`remaining_float_fund`,`cash_benefit_availability`,`cover`,`excess`,`deductible`,`cash_benefit`,`remarks`,`remarks_01`,`relocated_to`,`created_by`,`create_date`,`edited_by`,`edit_date`) SELECT `worksheet`.`case`,`worksheet`.`id`,`worksheet`.`plan`,`worksheet`.`header`,`worksheet`.`detail`,`worksheet`.`day`,`worksheet`.`day_rate`,`worksheet`.`actual`,`worksheet`.`tolerance`,`worksheet`.`non_prorate`,`worksheet`.`prorate`,`worksheet`.`prorate_percent`,`worksheet`.`prorate_result`,`worksheet`.`exclusion`,`worksheet`.`remaining_deductible`,`worksheet`.`copayment`,`worksheet`.`per_day_limit`,`worksheet`.`per_day_limit_balance`,`worksheet`.`per_case_limit`,`worksheet`.`remaining_day`,`worksheet`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit`,`worksheet`.`using_float_fund`,`worksheet`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability`,`worksheet`.`cover`,`worksheet`.`excess`,`worksheet`.`deductible`,`worksheet`.`cash_benefit`,`worksheet`.`remarks`,`worksheet`.`remarks_01`,`worksheet`.`relocated_to`,`worksheet`.`created_by`,`worksheet`.`create_date`,`worksheet`.`edited_by`,`worksheet`.`edit_date` FROM `worksheet` WHERE `worksheet`.`case` = NEW.id;
 UPDATE `worksheet` SET `worksheet`.`actual` = `worksheet`.`day` * `worksheet`.`day_rate`,`worksheet`.`tolerance` = 0,`worksheet`.`non_prorate` = 0,`worksheet`.`prorate` = 0,`worksheet`.`prorate_percent` = 0,`worksheet`.`prorate_result` = 0,`worksheet`.`exclusion` = 0,`worksheet`.`remaining_deductible` = 0,`worksheet`.`copayment` = 1,`worksheet`.`remaining_day` = 0,`worksheet`.`per_day_limit` = 0,`worksheet`.`per_day_limit_balance` = 0,`worksheet`.`per_case_limit` = 0,`worksheet`.`remaining_inner_limit` = 0,`worksheet`.`remaining_annual_limit` = 0,`worksheet`.`using_float_fund` = 0,`worksheet`.`remaining_float_fund` = 0,`worksheet`.`cash_benefit_availability` = 0,`worksheet`.`cover` = (`worksheet`.`day` * `worksheet`.`day_rate`) - `worksheet`.`exclusion`,`worksheet`.`excess` = `worksheet`.`exclusion`,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0 WHERE `worksheet`.`case` = NEW.id;
ELSEIF NEW.issue_log_option = 1 AND NEW.issue_log_option <> OLD.issue_log_option THEN
 INSERT INTO `worksheet_01` (`case`,`id`,`plan`,`header`,`detail`,`day`,`day_rate`,`actual`,`tolerance`,`non_prorate`,`prorate`,`prorate_percent`,`prorate_result`,`exclusion`,`remaining_deductible`,`copayment`,`per_day_limit`,`per_day_limit_balance`,`per_case_limit`,`remaining_day`,`remaining_inner_limit`,`remaining_annual_limit`,`using_float_fund`,`remaining_float_fund`,`cash_benefit_availability`,`cover`,`excess`,`deductible`,`cash_benefit`,`remarks`,`remarks_01`,`relocated_to`,`created_by`,`create_date`,`edited_by`,`edit_date`) SELECT `worksheet`.`case`,`worksheet`.`id`,`worksheet`.`plan`,`worksheet`.`header`,`worksheet`.`detail`,`worksheet`.`day`,`worksheet`.`day_rate`,`worksheet`.`actual`,`worksheet`.`tolerance`,`worksheet`.`non_prorate`,`worksheet`.`prorate`,`worksheet`.`prorate_percent`,`worksheet`.`prorate_result`,`worksheet`.`exclusion`,`worksheet`.`remaining_deductible`,`worksheet`.`copayment`,`worksheet`.`per_day_limit`,`worksheet`.`per_day_limit_balance`,`worksheet`.`per_case_limit`,`worksheet`.`remaining_day`,`worksheet`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit`,`worksheet`.`using_float_fund`,`worksheet`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability`,`worksheet`.`cover`,`worksheet`.`excess`,`worksheet`.`deductible`,`worksheet`.`cash_benefit`,`worksheet`.`remarks`,`worksheet`.`remarks_01`,`worksheet`.`relocated_to`,`worksheet`.`created_by`,`worksheet`.`create_date`,`worksheet`.`edited_by`,`worksheet`.`edit_date` FROM `worksheet` WHERE `worksheet`.`case` = NEW.id;
 UPDATE `worksheet` SET `worksheet`.`actual` = `worksheet`.`day` * `worksheet`.`day_rate`,`worksheet`.`tolerance` = 0,`worksheet`.`non_prorate` = 0,`worksheet`.`prorate` = 0,`worksheet`.`prorate_percent` = 0,`worksheet`.`prorate_result` = 0,`worksheet`.`exclusion` = 0,`worksheet`.`remaining_deductible` = 0,`worksheet`.`copayment` = 1,`worksheet`.`remaining_day` = 0,`worksheet`.`per_day_limit` = 0,`worksheet`.`per_day_limit_balance` = 0,`worksheet`.`per_case_limit` = 0,`worksheet`.`remaining_inner_limit` = 0,`worksheet`.`remaining_annual_limit` = 0,`worksheet`.`using_float_fund` = 0,`worksheet`.`remaining_float_fund` = 0,`worksheet`.`cash_benefit_availability` = 0,`worksheet`.`cover` = (`worksheet`.`day` * `worksheet`.`day_rate`),`worksheet`.`excess` = 0,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0 WHERE `worksheet`.`case` = NEW.id;
ELSEIF NEW.issue_log_option = 0 AND NEW.issue_log_option <> OLD.issue_log_option THEN
 UPDATE `worksheet` INNER JOIN `worksheet_01` ON `worksheet`.`id` = `worksheet_01`.`id` SET `worksheet`.`case` = `worksheet_01`.`case`,`worksheet`.`plan` = `worksheet_01`.`plan`,`worksheet`.`header` = `worksheet_01`.`header`,`worksheet`.`detail` = `worksheet_01`.`detail`,`worksheet`.`day` = `worksheet_01`.`day`,`worksheet`.`day_rate` = `worksheet_01`.`day_rate`,`worksheet`.`actual` = `worksheet_01`.`actual`,`worksheet`.`tolerance` = `worksheet_01`.`tolerance`,`worksheet`.`non_prorate` = `worksheet_01`.`non_prorate`,`worksheet`.`prorate` = `worksheet_01`.`prorate`,`worksheet`.`prorate_percent` = `worksheet_01`.`prorate_percent`,`worksheet`.`prorate_result` = `worksheet_01`.`prorate_result`,`worksheet`.`exclusion` = `worksheet_01`.`exclusion`,`worksheet`.`remaining_deductible` = `worksheet_01`.`remaining_deductible`,`worksheet`.`copayment` = `worksheet_01`.`copayment`,`worksheet`.`per_day_limit` = `worksheet_01`.`per_day_limit`,`worksheet`.`per_day_limit_balance` = `worksheet_01`.`per_day_limit_balance`,`worksheet`.`per_case_limit` = `worksheet_01`.`per_case_limit`,`worksheet`.`remaining_day` = `worksheet_01`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `worksheet_01`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `worksheet_01`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `worksheet_01`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `worksheet_01`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `worksheet_01`.`cash_benefit_availability`,`worksheet`.`cover` = `worksheet_01`.`cover`,`worksheet`.`excess` = `worksheet_01`.`excess`,`worksheet`.`deductible` = `worksheet_01`.`deductible`,`worksheet`.`cash_benefit` = `worksheet_01`.`cash_benefit` WHERE `worksheet`.`case` = NEW.id;
 DELETE FROM `worksheet_01` WHERE `worksheet_01`.`case` = NEW.id;
END IF;

IF NEW.upload_original_bill IS NOT NULL AND NEW.upload_original_bill <> OLD.upload_original_bill THEN
 SET NEW.original_bill_uploaded_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_upload_date = NOW();
ELSEIF NEW.upload_original_bill IS NOT NULL AND OLD.upload_original_bill IS NULL THEN
 SET NEW.original_bill_uploaded_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_upload_date = NOW();
END IF;

IF NEW.original_bill_checked <> OLD.original_bill_checked THEN
 SET NEW.original_bill_checked_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.original_bill_checked <> 1 AND OLD.original_bill_checked = 1 THEN
 SET NEW.original_bill_checked_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.original_bill_checked <> OLD.original_bill_checked && OLD.original_bill_checked_by_01 IS NULL THEN
 SET NEW.original_bill_checked_by_01 = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date_01 = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.original_bill_checked <> 1 AND OLD.original_bill_checked = 1 && OLD.original_bill_checked_by_01 IS NULL THEN
 SET NEW.original_bill_checked_by_01 = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date_01 = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.original_bill_checked_date_01 <> OLD.original_bill_checked_date_01 THEN
 SET NEW.original_bill_checked_by_01 = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.original_bill_verified <> OLD.original_bill_verified THEN
 SET NEW.original_bill_verified_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_verified_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.original_bill_verified <> 1 AND OLD.original_bill_verified = 1 THEN
 SET NEW.original_bill_verified_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_verified_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.payment_date IS NOT NULL AND NEW.payment_date <> OLD.payment_date THEN
 SET NEW.paid_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.upload_payment_date = NOW();
ELSEIF NEW.payment_date IS NOT NULL AND OLD.payment_date IS NULL THEN
 SET NEW.paid_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.upload_payment_date = NOW();
SET NEW.payment_approval_date = NEW.payment_date;
END IF;

IF NEW.payment_date_01 IS NOT NULL AND NEW.payment_date_01 <> OLD.payment_date_01 THEN
 SET NEW.paid_by_01 = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.upload_payment_date_01 = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.payment_date IS NOT NULL AND OLD.payment_date IS NULL THEN
 SET NEW.paid_by_01 = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.upload_payment_date_01 = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.status = 33 AND NEW.payment_date IS NOT NULL THEN
 SET NEW.status = 34;
ELSEIF NEW.status = 29 AND NEW.doc_received_by_client_date IS NOT NULL AND NEW.doc_received_by_client_date <> OLD.doc_received_by_client_date AND NEW.close_case_option = 2 THEN
 SET NEW.status = 26;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,25 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),13,NEW.log_issue_date,NEW.log_issued_by,New.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,'' AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external`,`worksheet`.`remarks`  FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status = 29 AND NEW.doc_received_by_client_date IS NOT NULL AND OLD.doc_received_by_client_date IS NULL AND NEW.close_case_option = 2 THEN
 SET NEW.status = 26;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,25 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),13,NEW.log_issue_date,NEW.log_issued_by,New.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,'' AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external` ,`worksheet`.`remarks` FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27,28,29) AND NEW.doc_received_by_client_date IS NOT NULL AND NEW.doc_received_by_client_date <> OLD.doc_received_by_client_date AND NEW.close_case_option = 1 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27,28,29) AND NEW.doc_received_by_client_date IS NOT NULL AND OLD.doc_received_by_client_date IS NULL AND NEW.close_case_option = 1 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27,28) AND NEW.doc_send_back_to_client_date IS NOT NULL AND NEW.doc_send_back_to_client_date <> OLD.doc_send_back_to_client_date THEN
 SET NEW.status = 29;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,29 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27,28) AND NEW.doc_send_back_to_client_date IS NOT NULL AND OLD.doc_send_back_to_client_date IS NULL THEN
 SET NEW.status = 29;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,29 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27) AND NEW.payment_date IS NOT NULL AND NEW.payment_date <> OLD.payment_date AND NEW.close_case_option = 2 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27) AND NEW.payment_date IS NOT NULL AND OLD.payment_date IS NULL AND NEW.close_case_option = 2 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27) AND NEW.payment_date IS NOT NULL AND NEW.payment_date <> OLD.payment_date AND NEW.close_case_option = 1 AND NEW.doc_send_back_to_client_required = 2 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27) AND NEW.payment_date IS NOT NULL AND OLD.payment_date IS NULL AND NEW.close_case_option = 1 AND NEW.doc_send_back_to_client_required = 2 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,NEW.`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,NEW.`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where `client` = 36 AND `id` = NEW.`id` AND (NEW.`mobile` IS NOT NULL OR NEW.`mobile` <> '');
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27) AND NEW.payment_date IS NOT NULL AND NEW.payment_date <> OLD.payment_date AND NEW.close_case_option = 1 AND NEW.doc_send_back_to_client_required = 1 THEN
 SET NEW.status = 28;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,28 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26,27) AND NEW.payment_date IS NOT NULL AND OLD.payment_date IS NULL AND NEW.close_case_option = 1 AND NEW.doc_send_back_to_client_required = 1 THEN
 SET NEW.status = 28;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,28 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,NEW.`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,NEW.`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where `client` = 36 AND `id` = NEW.`id` AND (NEW.`mobile` IS NOT NULL OR NEW.`mobile` <> '');
ELSEIF NEW.status IN (19,20,21,22,23,24,25,26) AND NEW.original_bill_verified = 4 AND OLD.original_bill_verified <> 4 THEN
 SET NEW.status = 27;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,27 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,27,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where `client` IN (1,31,36) AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
ELSEIF NEW.status = 26 AND NEW.original_bill_verified = 3 AND NEW.original_bill_verified_remarks <> '' AND NEW.original_bill_verified_remarks <> OLD.original_bill_verified_remarks THEN
 SET NEW.status = 23;
 SET NEW.ws_finished = 0;
 SET NEW.ws_approval = 2;
 SET NEW.issue_log = 1;
 SET NEW.issue_log_option = 0;
 UPDATE `worksheet` INNER JOIN `worksheet_01` ON `worksheet`.`id` = `worksheet_01`.`id` SET `worksheet`.`case` = `worksheet_01`.`case`,`worksheet`.`plan` = `worksheet_01`.`plan`,`worksheet`.`header` = `worksheet_01`.`header`,`worksheet`.`detail` = `worksheet_01`.`detail`,`worksheet`.`day` = `worksheet_01`.`day`,`worksheet`.`day_rate` = `worksheet_01`.`day_rate`,`worksheet`.`actual` = `worksheet_01`.`actual`,`worksheet`.`tolerance` = `worksheet_01`.`tolerance`,`worksheet`.`non_prorate` = `worksheet_01`.`non_prorate`,`worksheet`.`prorate` = `worksheet_01`.`prorate`,`worksheet`.`prorate_percent` = `worksheet_01`.`prorate_percent`,`worksheet`.`prorate_result` = `worksheet_01`.`prorate_result`,`worksheet`.`exclusion` = `worksheet_01`.`exclusion`,`worksheet`.`remaining_deductible` = `worksheet_01`.`remaining_deductible`,`worksheet`.`copayment` = `worksheet_01`.`copayment`,`worksheet`.`remaining_day` = `worksheet_01`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `worksheet_01`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `worksheet_01`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `worksheet_01`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `worksheet_01`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `worksheet_01`.`cash_benefit_availability`,`worksheet`.`cover` = `worksheet_01`.`cover`,`worksheet`.`excess` = `worksheet_01`.`excess`,`worksheet`.`deductible` = `worksheet_01`.`deductible`,`worksheet`.`cash_benefit` = `worksheet_01`.`cash_benefit` WHERE `worksheet`.`case` = NEW.id;
 DELETE FROM `worksheet_01` WHERE `worksheet_01`.`case` = NEW.id;
 SET NEW.ws_approval_remarks = if(NEW.ws_approval_remarks = '',NEW.original_bill_verified_remarks,if(isnull(NEW.ws_approval_remarks),NEW.original_bill_verified_remarks,concat(NEW.ws_approval_remarks,'; ',NEW.original_bill_verified_remarks)));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,23 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = NULL WHERE `case`.`ws_approval` <> 3 AND `worksheet_02`.`case` = NEW.id;
ELSEIF NEW.status = 26 AND NEW.original_bill_verified = 3 AND OLD.original_bill_verified <> 3 THEN
 SET NEW.status = 23;
 SET NEW.ws_finished = 0;
 SET NEW.ws_approval = 2;
 SET NEW.issue_log = 1;
 SET NEW.issue_log_option = 0;
 UPDATE `worksheet` INNER JOIN `worksheet_01` ON `worksheet`.`id` = `worksheet_01`.`id` SET `worksheet`.`case` = `worksheet_01`.`case`,`worksheet`.`plan` = `worksheet_01`.`plan`,`worksheet`.`header` = `worksheet_01`.`header`,`worksheet`.`detail` = `worksheet_01`.`detail`,`worksheet`.`day` = `worksheet_01`.`day`,`worksheet`.`day_rate` = `worksheet_01`.`day_rate`,`worksheet`.`actual` = `worksheet_01`.`actual`,`worksheet`.`tolerance` = `worksheet_01`.`tolerance`,`worksheet`.`non_prorate` = `worksheet_01`.`non_prorate`,`worksheet`.`prorate` = `worksheet_01`.`prorate`,`worksheet`.`prorate_percent` = `worksheet_01`.`prorate_percent`,`worksheet`.`prorate_result` = `worksheet_01`.`prorate_result`,`worksheet`.`exclusion` = `worksheet_01`.`exclusion`,`worksheet`.`remaining_deductible` = `worksheet_01`.`remaining_deductible`,`worksheet`.`copayment` = `worksheet_01`.`copayment`,`worksheet`.`remaining_day` = `worksheet_01`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `worksheet_01`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `worksheet_01`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `worksheet_01`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `worksheet_01`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `worksheet_01`.`cash_benefit_availability`,`worksheet`.`cover` = `worksheet_01`.`cover`,`worksheet`.`excess` = `worksheet_01`.`excess`,`worksheet`.`deductible` = `worksheet_01`.`deductible`,`worksheet`.`cash_benefit` = `worksheet_01`.`cash_benefit` WHERE `worksheet`.`case` = NEW.id;
 DELETE FROM `worksheet_01` WHERE `worksheet_01`.`case` = NEW.id;
 SET NEW.ws_approval_remarks = if(NEW.ws_approval_remarks = '',NEW.original_bill_verified_remarks,if(isnull(NEW.ws_approval_remarks),NEW.original_bill_verified_remarks,concat(NEW.ws_approval_remarks,'; ',NEW.original_bill_verified_remarks)));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,23 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = NULL WHERE `case`.`ws_approval` <> 3 AND `worksheet_02`.`case` = NEW.id;
ELSEIF NEW.status = 26 AND NEW.original_bill_verified = 2 AND NEW.original_bill_verified_remarks <> '' AND NEW.original_bill_verified_remarks <> OLD.original_bill_verified_remarks THEN
 SET NEW.status = 19;
 SET NEW.is_clean = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,19 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,19,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where (`client` = 1 OR `client` = 31) AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),11,NEW.log_issue_date,NEW.log_issued_by,NEW.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,NEW.original_bill_checked_remarks AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external` ,`worksheet`.`remarks` FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status = 26 AND NEW.original_bill_verified = 2 AND OLD.original_bill_verified <> 2 THEN
 SET NEW.status = 19;
 SET NEW.is_clean = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,19 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,19,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where (`client` = 1 OR `client` = 31) AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),11,NEW.log_issue_date,NEW.log_issued_by,NEW.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,NEW.original_bill_checked_remarks AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external` ,`worksheet`.`remarks` FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status IN (19,20,21,22,23,24,25) AND NEW.issue_log = 3 AND OLD.issue_log <> 3 THEN
 SET NEW.status = 31;
 SET NEW.claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.discharge_date) = 1,'I',if(month(NEW.discharge_date) = 2,'II',if(month(NEW.discharge_date) = 3,'III',if(month(NEW.discharge_date) = 4,'IV',if(month(NEW.discharge_date) = 5,'V',if(month(NEW.discharge_date) = 6,'VI',if(month(NEW.discharge_date) = 7,'VII',if(month(NEW.discharge_date) = 8,'VIII',if(month(NEW.discharge_date) = 9,'IX',if(month(NEW.discharge_date) = 10,'X',if(month(NEW.discharge_date) = 11,'XI','XII'))))))))))),'-',year(NEW.discharge_date));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,31 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,31,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where `client` = 24 AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),14,NEW.log_issue_date,NEW.log_issued_by,NEW.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,NEW.nonlog_remarks AS `remarks` FROM (((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN `nonlog_reason` ON (`case`.`nonlog_reason` = `nonlog_reason`.`id`)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external` ,`worksheet`.`remarks` FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status IN (19,20,21,22,23,24,25) AND NEW.issue_log = 2 AND OLD.issue_log <> 2 AND NEW.close_case_option = 2 AND NEW.doc_send_back_to_client_required = 2 THEN
 SET NEW.status = 26;
 SET NEW.original_bill_checked = 4;
 SET NEW.original_bill_checked_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date =  coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.issuance_limit = (SELECT issuance_limit FROM users WHERE username = NEW.edited_by);
 SET NEW.claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.discharge_date) = 1,'I',if(month(NEW.discharge_date) = 2,'II',if(month(NEW.discharge_date) = 3,'III',if(month(NEW.discharge_date) = 4,'IV',if(month(NEW.discharge_date) = 5,'V',if(month(NEW.discharge_date) = 6,'VI',if(month(NEW.discharge_date) = 7,'VII',if(month(NEW.discharge_date) = 8,'VIII',if(month(NEW.discharge_date) = 9,'IX',if(month(NEW.discharge_date) = 10,'X',if(month(NEW.discharge_date) = 11,'XI','XII'))))))))))),'-',year(NEW.discharge_date));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,26 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),13,NEW.log_issue_date,NEW.log_issued_by,New.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,'' AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external` ,`worksheet`.`remarks` FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status IN (19,20,21,22,23,24,25) AND NEW.issue_log = 2 AND OLD.issue_log <> 2 AND NEW.close_case_option = 2 AND NEW.doc_send_back_to_client_required = 1 THEN
 SET NEW.status = 28;
 SET NEW.original_bill_checked = 4;
 SET NEW.original_bill_checked_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date =  coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.issuance_limit = (SELECT issuance_limit FROM users WHERE username = NEW.edited_by);
 SET NEW.claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.discharge_date) = 1,'I',if(month(NEW.discharge_date) = 2,'II',if(month(NEW.discharge_date) = 3,'III',if(month(NEW.discharge_date) = 4,'IV',if(month(NEW.discharge_date) = 5,'V',if(month(NEW.discharge_date) = 6,'VI',if(month(NEW.discharge_date) = 7,'VII',if(month(NEW.discharge_date) = 8,'VIII',if(month(NEW.discharge_date) = 9,'IX',if(month(NEW.discharge_date) = 10,'X',if(month(NEW.discharge_date) = 11,'XI','XII'))))))))))),'-',year(NEW.discharge_date));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,28 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),13,NEW.log_issue_date,NEW.log_issued_by,New.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,'' AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external`,`worksheet`.`remarks`  FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status IN (19,20,21,22,23,24,25) AND NEW.issue_log = 2 AND OLD.issue_log <> 2 AND NEW.close_case_option = 1 THEN
 SET NEW.status = 26;
  SET NEW.original_bill_checked = 4;
 SET NEW.original_bill_checked_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date =  coalesce(NEW.edit_date,NEW.create_date);
 SET NEW.issuance_limit = (SELECT issuance_limit FROM users WHERE username = NEW.edited_by);
 SET NEW.claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.discharge_date) = 1,'I',if(month(NEW.discharge_date) = 2,'II',if(month(NEW.discharge_date) = 3,'III',if(month(NEW.discharge_date) = 4,'IV',if(month(NEW.discharge_date) = 5,'V',if(month(NEW.discharge_date) = 6,'VI',if(month(NEW.discharge_date) = 7,'VII',if(month(NEW.discharge_date) = 8,'VIII',if(month(NEW.discharge_date) = 9,'IX',if(month(NEW.discharge_date) = 10,'X',if(month(NEW.discharge_date) = 11,'XI','XII'))))))))))),'-',year(NEW.discharge_date));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,26 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),13,NEW.log_issue_date,NEW.log_issued_by,New.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,'' AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external` ,`worksheet`.`remarks` FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status IN (23,24) AND NEW.ws_approval = 3 AND OLD.ws_approval <> 3 THEN
 SET NEW.status = 25;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,25 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = 1 WHERE `case`.`ws_approval` = 3 AND `worksheet_02`.`case` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
ELSEIF NEW.status = 24 AND NEW.ws_approval = 2 AND NEW.ws_approval_remarks <> '' AND NEW.ws_approval_remarks <> OLD.ws_approval_remarks THEN
 SET NEW.status = 23;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,23 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 24 AND NEW.ws_approval = 2 AND OLD.ws_approval <> 2 THEN
 SET NEW.status = 23;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,23 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 23 AND NEW.ws_finished = 1 AND OLD.ws_finished <> 1 THEN
 SET NEW.status = 24;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,24 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22) AND NEW.ws_approval = 3 AND OLD.ws_approval <> 3 THEN
 SET NEW.status = 25;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,25 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = 1 WHERE `case`.`ws_approval` = 3 AND `worksheet_02`.`case` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
ELSEIF NEW.status IN (19,20,21,22) AND NEW.ws_approval = 2 AND NEW.ws_approval_remarks <> '' AND NEW.ws_approval_remarks <> OLD.ws_approval_remarks THEN
 SET NEW.status = 23;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,23 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21,22) AND NEW.ws_approval = 2 AND OLD.ws_approval <> 2 THEN
 SET NEW.status = 23;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,23 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20,21) AND NEW.ws_finished = 1 AND OLD.ws_finished <> 1 THEN
 SET NEW.status = 22;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,22 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (19,20) AND NEW.original_bill_checked = 5 AND OLD.original_bill_checked <> 5 THEN
 SET NEW.status = 31;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,31 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),14,NEW.log_issue_date,NEW.log_issued_by,NEW.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,NEW.nonlog_remarks AS `remarks` FROM (((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN `nonlog_reason` ON (`case`.`nonlog_reason` = `nonlog_reason`.`id`)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
 INSERT INTO case_detail_equity(claim_id,member_id,benefit_code,benefit_description,benefit_limit,amt_incurred,amt_approved,amt_not_approved,coverage_type,plan_id,remarks) SELECT CAST(`worksheet`.`case` AS CHAR(15)),`member`.`member_id`,SUBSTRING(`plan_detail`.`code`,3),`plan_detail`.`name`,`plan_detail`.`max_day_rate`,`worksheet`.`actual`,`worksheet`.`cover`,`worksheet`.`excess`,CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),`member`.`plan_external` ,`worksheet`.`remarks` FROM (((`worksheet` LEFT JOIN `case` ON (`worksheet`.`case` = `case`.`id`)) LEFT JOIN `plan_detail` ON (`worksheet`.`detail` = `plan_detail`.`id`)) LEFT JOIN `member` ON (`case`.`patient` = `member`.`id`)) WHERE `member`.`client` = 26 AND `worksheet`.`case` = NEW.id AND `case`.`type` = 1;
ELSEIF NEW.status IN (19,20) AND NEW.original_bill_checked = 3 AND OLD.original_bill_checked <> 3 THEN
 SET NEW.status = 21;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,21 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),12,NEW.log_issue_date,NEW.log_issued_by,NEW.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,'' AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
ELSEIF NEW.status = 20 AND NEW.original_bill_checked = 2 AND NEW.original_bill_checked_remarks <> '' AND NEW.original_bill_checked_remarks <> OLD.original_bill_checked_remarks THEN
 SET NEW.status = 19;
 SET NEW.is_clean = 0;
 SET NEW.original_bill_checked_by = NEW.edited_by;
 SET NEW.original_bill_checked_date = NEW.edit_date; 

 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,19 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,19,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where (`client` = 1 OR `client` = 31) AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),11,NEW.log_issue_date,NEW.log_issued_by,NEW.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,NEW.original_bill_checked_remarks AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
ELSEIF NEW.status = 20 AND NEW.original_bill_checked = 2 AND OLD.original_bill_checked <> 2 THEN
 SET NEW.status = 19;
 SET NEW.is_clean = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,19 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,19,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where (`client` = 1 OR `client` = 31) AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
 INSERT INTO case_header_equity(member_id,claim_type,claim_id,policy_number,member_name,coverage_type,provider_code,other_provider,admission_date,discharge_date,duration_days,claim_process_status,app_date,app_by,diagnosis_code,diagnosis_desc,plan_id,amt_incurred,amt_approved,amt_not_approved,register_id,currency_origin,amt_of_currency_origin,exchange_rate_currency_origin_to_idr,exchange_rate_idr_to_usd,remarks) SELECT NEW.member_id,if((NEW.type = 2),'M','R'),cast(NEW.id AS CHAR(15)),NEW.policy_no,`member`.`member_name`,COALESCE(CAST(LEFT(`plan_detail`.`code`,2) AS CHAR(2)),NEW.plan_header),NEW.provider,NEW.other_provider,DATE(NEW.admission_date),DATE(NEW.discharge_date),(TO_DAYS(CAST(NEW.admission_date AS DATE)) - TO_DAYS(CAST(NEW.discharge_date AS DATE))),11,NEW.log_issue_date,NEW.log_issued_by,NEW.diagnosis,NEW.other_diagnosis,`member`.`plan_external`,COALESCE(SUM(`worksheet`.`actual`),0),COALESCE(SUM(`worksheet`.`cover`),0),COALESCE(SUM(`worksheet`.`excess`),0),NEW.batch_received,`country`.`iso-4217`,NEW.amount_currency_01,NEW.currency_rate_01_to_idr,NEW.currency_rate_idr_to_02,NEW.original_bill_checked_remarks AS `remarks` FROM ((((`case` LEFT JOIN member ON (`case`.patient = member.id)) LEFT JOIN worksheet ON (`case`.id = worksheet.`case`)) LEFT JOIN country ON (`case`.currency_01 = country.id)) LEFT JOIN plan_detail ON (worksheet.detail = plan_detail.id)) WHERE `case`.`client` = 26 AND `case`.`type`= 1  AND `case`.`id` = NEW.id GROUP BY `case`.`id`;
ELSEIF NEW.status = 19 AND NEW.upload_original_bill <> '' AND NEW.upload_original_bill <> OLD.upload_original_bill THEN
 SET NEW.status = 20;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,20 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,20,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where (`client` = 1 OR `client` = 31) AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
ELSEIF NEW.status = 19 AND NEW.upload_original_bill <> '' AND OLD.upload_original_bill = '' THEN
 SET NEW.status = 20;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,20 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,20,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where (`client` = 1 OR `client` = 31) AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
ELSEIF NEW.status = 18 AND NEW.doc_received_by_client_date IS NOT NULL AND NEW.doc_received_by_client_date <> OLD.doc_received_by_client_date AND NEW.close_case_option = 2 THEN
 SET NEW.status = 15;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,15 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
ELSEIF NEW.status = 18 AND NEW.doc_received_by_client_date IS NOT NULL AND OLD.doc_received_by_client_date IS NULL AND NEW.close_case_option = 2 THEN
 SET NEW.status = 15;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,15 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) AND NEW.doc_received_by_client_date IS NOT NULL AND NEW.doc_received_by_client_date <> OLD.doc_received_by_client_date AND NEW.close_case_option = 1 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18) AND NEW.doc_received_by_client_date IS NOT NULL AND OLD.doc_received_by_client_date IS NULL AND NEW.close_case_option = 1 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) AND NEW.doc_send_back_to_client_date IS NOT NULL AND NEW.doc_send_back_to_client_date <> OLD.doc_send_back_to_client_date THEN
 SET NEW.status = 18;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,18 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17) AND NEW.doc_send_back_to_client_date IS NOT NULL AND OLD.doc_send_back_to_client_date IS NULL THEN
 SET NEW.status = 18;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,18 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) AND NEW.payment_date IS NOT NULL AND NEW.payment_date <> OLD.payment_date AND NEW.close_case_option = 2 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) AND NEW.payment_date IS NOT NULL AND OLD.payment_date IS NULL AND NEW.close_case_option = 2 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) AND NEW.payment_date IS NOT NULL AND NEW.payment_date <> OLD.payment_date AND NEW.close_case_option = 1 AND NEW.doc_send_back_to_client_required = 2 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) AND NEW.payment_date IS NOT NULL AND OLD.payment_date IS NULL AND NEW.close_case_option = 1 AND NEW.doc_send_back_to_client_required = 2 THEN
 SET NEW.status = 30;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,30 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) AND NEW.payment_date IS NOT NULL AND NEW.payment_date <> OLD.payment_date AND NEW.close_case_option = 1 AND NEW.doc_send_back_to_client_required = 1 THEN
 SET NEW.status = 17;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,17 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16) AND NEW.payment_date IS NOT NULL AND OLD.payment_date IS NULL AND NEW.close_case_option = 1 AND NEW.doc_send_back_to_client_required = 1 THEN
 SET NEW.status = 17;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,17 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15) AND NEW.original_bill_verified = 4 AND (OLD.original_bill_verified <> 4 OR OLD.original_bill_verified = 4) THEN
 SET NEW.status = 16;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,16 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 15 AND NEW.original_bill_verified = 3 AND NEW.original_bill_verified_remarks <> '' AND NEW.original_bill_verified_remarks <> OLD.original_bill_verified_remarks THEN
 SET NEW.status = 13;
 SET NEW.ws_finished = 0;
 SET NEW.ws_approval = 2;
 SET NEW.issue_log_option = 0;
 UPDATE `worksheet` INNER JOIN `worksheet_01` ON `worksheet`.`id` = `worksheet_01`.`id` SET `worksheet`.`case` = `worksheet_01`.`case`,`worksheet`.`plan` = `worksheet_01`.`plan`,`worksheet`.`header` = `worksheet_01`.`header`,`worksheet`.`detail` = `worksheet_01`.`detail`,`worksheet`.`day` = `worksheet_01`.`day`,`worksheet`.`day_rate` = `worksheet_01`.`day_rate`,`worksheet`.`actual` = `worksheet_01`.`actual`,`worksheet`.`tolerance` = `worksheet_01`.`tolerance`,`worksheet`.`non_prorate` = `worksheet_01`.`non_prorate`,`worksheet`.`prorate` = `worksheet_01`.`prorate`,`worksheet`.`prorate_percent` = `worksheet_01`.`prorate_percent`,`worksheet`.`prorate_result` = `worksheet_01`.`prorate_result`,`worksheet`.`exclusion` = `worksheet_01`.`exclusion`,`worksheet`.`remaining_deductible` = `worksheet_01`.`remaining_deductible`,`worksheet`.`copayment` = `worksheet_01`.`copayment`,`worksheet`.`remaining_day` = `worksheet_01`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `worksheet_01`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `worksheet_01`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `worksheet_01`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `worksheet_01`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `worksheet_01`.`cash_benefit_availability`,`worksheet`.`cover` = `worksheet_01`.`cover`,`worksheet`.`excess` = `worksheet_01`.`excess`,`worksheet`.`deductible` = `worksheet_01`.`deductible`,`worksheet`.`cash_benefit` = `worksheet_01`.`cash_benefit` WHERE `worksheet`.`case` = NEW.id;
 DELETE FROM `worksheet_01` WHERE `worksheet_01`.`case` = NEW.id;
 SET NEW.ws_approval_remarks = if(NEW.ws_approval_remarks = '',NEW.original_bill_verified_remarks,if(isnull(NEW.ws_approval_remarks),NEW.original_bill_verified_remarks,concat(NEW.ws_approval_remarks,'; ',NEW.original_bill_verified_remarks)));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,13 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = NULL WHERE `case`.`ws_approval` <> 3 AND `worksheet_02`.`case` = NEW.id;
ELSEIF NEW.status = 15 AND NEW.original_bill_verified = 3 AND OLD.original_bill_verified <> 3 THEN
 SET NEW.status = 13;
 SET NEW.ws_finished = 0;
 SET NEW.ws_approval = 2;
 SET NEW.issue_log_option = 0;
 UPDATE `worksheet` INNER JOIN `worksheet_01` ON `worksheet`.`id` = `worksheet_01`.`id` SET `worksheet`.`case` = `worksheet_01`.`case`,`worksheet`.`plan` = `worksheet_01`.`plan`,`worksheet`.`header` = `worksheet_01`.`header`,`worksheet`.`detail` = `worksheet_01`.`detail`,`worksheet`.`day` = `worksheet_01`.`day`,`worksheet`.`day_rate` = `worksheet_01`.`day_rate`,`worksheet`.`actual` = `worksheet_01`.`actual`,`worksheet`.`tolerance` = `worksheet_01`.`tolerance`,`worksheet`.`non_prorate` = `worksheet_01`.`non_prorate`,`worksheet`.`prorate` = `worksheet_01`.`prorate`,`worksheet`.`prorate_percent` = `worksheet_01`.`prorate_percent`,`worksheet`.`prorate_result` = `worksheet_01`.`prorate_result`,`worksheet`.`exclusion` = `worksheet_01`.`exclusion`,`worksheet`.`remaining_deductible` = `worksheet_01`.`remaining_deductible`,`worksheet`.`copayment` = `worksheet_01`.`copayment`,`worksheet`.`remaining_day` = `worksheet_01`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `worksheet_01`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `worksheet_01`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `worksheet_01`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `worksheet_01`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `worksheet_01`.`cash_benefit_availability`,`worksheet`.`cover` = `worksheet_01`.`cover`,`worksheet`.`excess` = `worksheet_01`.`excess`,`worksheet`.`deductible` = `worksheet_01`.`deductible`,`worksheet`.`cash_benefit` = `worksheet_01`.`cash_benefit` WHERE `worksheet`.`case` = NEW.id;
 DELETE FROM `worksheet_01` WHERE `worksheet_01`.`case` = NEW.id;
 SET NEW.ws_approval_remarks = concat(NEW.ws_approval_remarks,'; ',NEW.original_bill_verified_remarks);
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,13 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = NULL WHERE `case`.`ws_approval` <> 3 AND `worksheet_02`.`case` = NEW.id;
ELSEIF NEW.status = 15 AND NEW.original_bill_verified = 2 AND NEW.original_bill_verified_remarks <> '' AND NEW.original_bill_verified_remarks <> OLD.original_bill_verified_remarks THEN
 SET NEW.status = 11;
 SET NEW.is_clean = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,11 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 15 AND NEW.original_bill_verified = 2 AND OLD.original_bill_verified <> 2 THEN
 SET NEW.status = 11;
 SET NEW.is_clean = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,11 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (13,14) AND NEW.ws_approval = 3 AND OLD.ws_approval <> 3 AND NEW.close_case_option = 2 AND NEW.doc_send_back_to_client_required = 2 THEN
 SET NEW.status = 15;
 SET NEW.original_bill_checked = 4;
 SET NEW.original_bill_checked_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date = coalesce(NEW.edit_date,NEW.create_date);
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,15 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = 1 WHERE `case`.`ws_approval` = 3 AND `worksheet_02`.`case` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
ELSEIF NEW.status IN (13,14) AND NEW.ws_approval = 3 AND OLD.ws_approval <> 3 AND NEW.close_case_option = 2 AND NEW.doc_send_back_to_client_required = 1 THEN
 SET NEW.status = 17;
 SET NEW.original_bill_checked = 4;
 SET NEW.original_bill_checked_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date = coalesce(NEW.edit_date,NEW.create_date);
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,17 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = 1 WHERE `case`.`ws_approval` = 3 AND `worksheet_02`.`case` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
 INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`) SELECT NEW.`id`,NEW.`case_id_client`,0,3 FROM `case` WHERE client=24 and `id`= NEW.`id`;
ELSEIF NEW.status IN (13,14) AND NEW.ws_approval = 3 AND OLD.ws_approval <> 3 AND NEW.close_case_option = 1 THEN
 SET NEW.status = 15;
 SET NEW.original_bill_checked = 4;
 SET NEW.original_bill_checked_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.original_bill_checked_date = coalesce(NEW.edit_date,NEW.create_date);
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,15 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = 1 WHERE `case`.`ws_approval` = 3 AND `worksheet_02`.`case` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
 INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`) SELECT NEW.`id`,NEW.`case_id_client`,0,3 FROM `case` WHERE client=24 and `id`= NEW.`id`;
ELSEIF NEW.status = 14 AND NEW.ws_approval = 2 AND NEW.ws_approval_remarks <> '' AND NEW.ws_approval_remarks <> OLD.ws_approval_remarks THEN
 SET NEW.status = 13;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,13 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 14 AND NEW.ws_approval = 2 AND OLD.ws_approval <> 2 THEN
 SET NEW.status = 13;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,13 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 13 AND NEW.ws_finished = 1 AND OLD.ws_finished <> 1 THEN
 SET NEW.status = 14;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,14 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12) AND NEW.original_bill_checked = 4 AND OLD.original_bill_checked <> 4 AND NEW.close_case_option = 2 AND NEW.doc_send_back_to_client_required = 2 THEN
 SET NEW.status = 15;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,15 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
 INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`) SELECT NEW.`id`,NEW.`case_id_client`,0,3 FROM `case` WHERE client=24 and `id`= NEW.`id`;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12) AND NEW.original_bill_checked = 4 AND OLD.original_bill_checked <> 4 AND NEW.close_case_option = 2 AND NEW.doc_send_back_to_client_required = 1 THEN
 SET NEW.status = 17;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,17 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12) AND NEW.original_bill_checked = 4 AND OLD.original_bill_checked <> 4 AND NEW.close_case_option = 1 THEN
 SET NEW.status = 15;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,15 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
 INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`) SELECT NEW.`id`,NEW.`case_id_client`,0,3 FROM `case` WHERE client=24 and `id`= NEW.`id`;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12) AND NEW.original_bill_checked = 3 AND NEW.original_bill_checked_remarks <> '' AND NEW.original_bill_checked_remarks <> OLD.original_bill_checked_remarks THEN
 SET NEW.status = 13;
 SET NEW.ws_finished = 0;
 SET NEW.ws_approval = 2;
 SET NEW.issue_log_option = 0;
 UPDATE `worksheet` INNER JOIN `worksheet_01` ON `worksheet`.`id` = `worksheet_01`.`id` SET `worksheet`.`case` = `worksheet_01`.`case`,`worksheet`.`plan` = `worksheet_01`.`plan`,`worksheet`.`header` = `worksheet_01`.`header`,`worksheet`.`detail` = `worksheet_01`.`detail`,`worksheet`.`day` = `worksheet_01`.`day`,`worksheet`.`day_rate` = `worksheet_01`.`day_rate`,`worksheet`.`actual` = `worksheet_01`.`actual`,`worksheet`.`tolerance` = `worksheet_01`.`tolerance`,`worksheet`.`non_prorate` = `worksheet_01`.`non_prorate`,`worksheet`.`prorate` = `worksheet_01`.`prorate`,`worksheet`.`prorate_percent` = `worksheet_01`.`prorate_percent`,`worksheet`.`prorate_result` = `worksheet_01`.`prorate_result`,`worksheet`.`exclusion` = `worksheet_01`.`exclusion`,`worksheet`.`remaining_deductible` = `worksheet_01`.`remaining_deductible`,`worksheet`.`copayment` = `worksheet_01`.`copayment`,`worksheet`.`remaining_day` = `worksheet_01`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `worksheet_01`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `worksheet_01`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `worksheet_01`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `worksheet_01`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `worksheet_01`.`cash_benefit_availability`,`worksheet`.`cover` = `worksheet_01`.`cover`,`worksheet`.`excess` = `worksheet_01`.`excess`,`worksheet`.`deductible` = `worksheet_01`.`deductible`,`worksheet`.`cash_benefit` = `worksheet_01`.`cash_benefit` WHERE `worksheet`.`case` = NEW.id;
 DELETE FROM `worksheet_01` WHERE `worksheet_01`.`case` = NEW.id;
 SET NEW.ws_approval_remarks = if(NEW.ws_approval_remarks = '',NEW.original_bill_checked_remarks,if(isnull(NEW.ws_approval_remarks),NEW.original_bill_checked_remarks,concat(NEW.ws_approval_remarks,'; ',NEW.original_bill_checked_remarks)));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,13 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = NULL WHERE `case`.`ws_approval` <> 3 AND `worksheet_02`.`case` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11,12) AND NEW.original_bill_checked = 3 AND OLD.original_bill_checked <> 3 THEN
 SET NEW.status = 13;
 SET NEW.ws_finished = 0;
 SET NEW.ws_approval = 2;
 SET NEW.issue_log_option = 0;
 UPDATE `worksheet` INNER JOIN `worksheet_01` ON `worksheet`.`id` = `worksheet_01`.`id` SET `worksheet`.`case` = `worksheet_01`.`case`,`worksheet`.`plan` = `worksheet_01`.`plan`,`worksheet`.`header` = `worksheet_01`.`header`,`worksheet`.`detail` = `worksheet_01`.`detail`,`worksheet`.`day` = `worksheet_01`.`day`,`worksheet`.`day_rate` = `worksheet_01`.`day_rate`,`worksheet`.`actual` = `worksheet_01`.`actual`,`worksheet`.`tolerance` = `worksheet_01`.`tolerance`,`worksheet`.`non_prorate` = `worksheet_01`.`non_prorate`,`worksheet`.`prorate` = `worksheet_01`.`prorate`,`worksheet`.`prorate_percent` = `worksheet_01`.`prorate_percent`,`worksheet`.`prorate_result` = `worksheet_01`.`prorate_result`,`worksheet`.`exclusion` = `worksheet_01`.`exclusion`,`worksheet`.`remaining_deductible` = `worksheet_01`.`remaining_deductible`,`worksheet`.`copayment` = `worksheet_01`.`copayment`,`worksheet`.`remaining_day` = `worksheet_01`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `worksheet_01`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `worksheet_01`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `worksheet_01`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `worksheet_01`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `worksheet_01`.`cash_benefit_availability`,`worksheet`.`cover` = `worksheet_01`.`cover`,`worksheet`.`excess` = `worksheet_01`.`excess`,`worksheet`.`deductible` = `worksheet_01`.`deductible`,`worksheet`.`cash_benefit` = `worksheet_01`.`cash_benefit` WHERE `worksheet`.`case` = NEW.id;
 DELETE FROM `worksheet_01` WHERE `worksheet_01`.`case` = NEW.id;
 SET NEW.ws_approval_remarks = if(NEW.ws_approval_remarks = '',NEW.original_bill_checked_remarks,if(isnull(NEW.ws_approval_remarks),NEW.original_bill_checked_remarks,concat(NEW.ws_approval_remarks,'; ',NEW.original_bill_checked_remarks)));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,13 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = NULL WHERE `case`.`ws_approval` <> 3 AND `worksheet_02`.`case` = NEW.id;
ELSEIF NEW.status = 12 AND NEW.original_bill_checked = 2 AND NEW.original_bill_checked_remarks <> '' AND NEW.original_bill_checked_remarks <> OLD.original_bill_checked_remarks THEN
 SET NEW.status = 11;
 SET NEW.original_bill_checked = 1; 
 SET NEW.is_clean = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,11 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 12 AND NEW.original_bill_checked = 2 AND OLD.original_bill_checked <> 2 THEN
 SET NEW.status = 11;
 SET NEW.original_bill_checked = 1;
 SET NEW.is_clean = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,11 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10,11) AND NEW.upload_original_bill <> OLD.upload_original_bill THEN
 SET NEW.status = 12;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,12 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10) AND NEW.issue_log = 3 AND OLD.issue_log <> 3 THEN
 SET NEW.status = 31;
 SET NEW.claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.discharge_date) = 1,'I',if(month(NEW.discharge_date) = 2,'II',if(month(NEW.discharge_date) = 3,'III',if(month(NEW.discharge_date) = 4,'IV',if(month(NEW.discharge_date) = 5,'V',if(month(NEW.discharge_date) = 6,'VI',if(month(NEW.discharge_date) = 7,'VII',if(month(NEW.discharge_date) = 8,'VIII',if(month(NEW.discharge_date) = 9,'IX',if(month(NEW.discharge_date) = 10,'X',if(month(NEW.discharge_date) = 11,'XI','XII'))))))))))),'-',year(NEW.discharge_date));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,31 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
  IF NEW.sms_send_01 = 1 AND NEW.category = 1 and NEW.type = 2 THEN																	 
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,31,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where `client` = 24 AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
	    END IF;
 INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`) SELECT NEW.`id`,NEW.`case_id_client`,0,31 FROM `case` WHERE client=24 and `id`= NEW.`id`;	   
ELSEIF NEW.status IN (1,2,3,4,5,6,7,8,9,10) AND NEW.issue_log = 2 AND OLD.issue_log <> 2 THEN
 SET NEW.status = 11;
 SET NEW.issuance_limit = (SELECT issuance_limit FROM users WHERE username = NEW.edited_by);
 SET NEW.claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.discharge_date) = 1,'I',if(month(NEW.discharge_date) = 2,'II',if(month(NEW.discharge_date) = 3,'III',if(month(NEW.discharge_date) = 4,'IV',if(month(NEW.discharge_date) = 5,'V',if(month(NEW.discharge_date) = 6,'VI',if(month(NEW.discharge_date) = 7,'VII',if(month(NEW.discharge_date) = 8,'VIII',if(month(NEW.discharge_date) = 9,'IX',if(month(NEW.discharge_date) = 10,'X',if(month(NEW.discharge_date) = 11,'XI','XII'))))))))))),'-',year(NEW.discharge_date));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,11 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 IF NEW.sms_send_01 = 1 AND NEW.category = 1 and NEW.type = 2 THEN														 
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,11,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where `client` = 24 AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
	END IF;
 INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`) SELECT NEW.`id`,NEW.`case_id_client`,0,2 FROM `case` WHERE client=24 and `id`= NEW.`id`;	   
ELSEIF NEW.status IN (8,9) AND NEW.ws_approval = 3 AND OLD.ws_approval <> 3 THEN
 SET NEW.status = 10;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,10 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = 1 WHERE `case`.`ws_approval` = 3 AND `worksheet_02`.`case` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
ELSEIF NEW.status = 9 AND NEW.ws_approval = 2 AND NEW.ws_approval_remarks <> '' AND NEW.ws_approval_remarks <> OLD.ws_approval_remarks THEN
 SET NEW.status = 8;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,8 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 9 AND NEW.ws_approval = 2 AND OLD.ws_approval <> 2 THEN
 SET NEW.status = 8;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,8 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 8 AND NEW.ws_finished = 1 AND OLD.ws_finished <> 1 THEN
 SET NEW.status = 9;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,9 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7) AND NEW.ws_approval = 3 AND OLD.ws_approval <> 3 THEN
 SET NEW.status = 10;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,10 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE worksheet_02 INNER JOIN worksheet ON worksheet_02.id = worksheet.id INNER JOIN `case` ON worksheet.`case` = `case`.id SET `worksheet_02`.`approved` = 1 WHERE `case`.`ws_approval` = 3 AND `worksheet_02`.`case` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
ELSEIF NEW.status IN (1,2,3,4,5,6,7) AND NEW.ws_approval = 2 AND NEW.ws_approval_remarks <> '' AND NEW.ws_approval_remarks <> OLD.ws_approval_remarks THEN
 SET NEW.status = 8;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,8 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6,7) AND NEW.ws_approval = 2 AND OLD.ws_approval <> 2 THEN
 SET NEW.status = 8;
 SET NEW.ws_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,8 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5,6) AND NEW.ws_finished = 1 AND OLD.ws_finished <> 1 THEN
 SET NEW.status = 7;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,7 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4,5) AND NEW.bill_completed = 3 AND OLD.bill_completed <> 3 THEN
 SET NEW.status = 6;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,6 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 5 AND NEW.bill_completed = 2 AND NEW.bill_completed_remarks <> '' AND NEW.bill_completed_remarks <> OLD.bill_completed_remarks THEN
 SET NEW.status = 4;
 SET NEW.upload_bill_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,4 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 5 AND NEW.bill_completed = 2 AND OLD.bill_completed <> 2 THEN
 SET NEW.status = 4;
 SET NEW.upload_bill_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,4 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3,4) AND NEW.upload_bill_finished = 1 AND OLD.upload_bill_finished <> 1 THEN
 SET NEW.status = 5;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,5 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status IN (1,2,3) AND NEW.issue_initial_log = 3 AND OLD.issue_initial_log <> 3 THEN
 SET NEW.status = 31;
 SET NEW.initial_claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.admission_date) = 1,'I',if(month(NEW.admission_date) = 2,'II',if(month(NEW.admission_date) = 3,'III',if(month(NEW.admission_date) = 4,'IV',if(month(NEW.admission_date) = 5,'V',if(month(NEW.admission_date) = 6,'VI',if(month(NEW.admission_date) = 7,'VII',if(month(NEW.admission_date) = 8,'VIII',if(month(NEW.admission_date) = 9,'IX',if(month(NEW.admission_date) = 10,'X',if(month(NEW.admission_date) = 11,'XI','XII'))))))))))),'-',year(NEW.admission_date));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,31 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
 UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining` WHERE `program`.`id` = NEW.program;
 IF NEW.sms_send = 1 AND NEW.category = 1 and NEW.type = 2 THEN																  
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,31,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where `client` = 24 AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
		    END IF;
 INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`) SELECT NEW.`id`,NEW.`case_id_client`,0,31 FROM `case` WHERE client=24 and `id`= NEW.`id`;
ELSEIF NEW.status IN (1,2,3) AND NEW.issue_initial_log = 2 AND OLD.issue_initial_log <> 2 THEN
 SET NEW.status = 4;
 SET NEW.initial_claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.admission_date) = 1,'I',if(month(NEW.admission_date) = 2,'II',if(month(NEW.admission_date) = 3,'III',if(month(NEW.admission_date) = 4,'IV',if(month(NEW.admission_date) = 5,'V',if(month(NEW.admission_date) = 6,'VI',if(month(NEW.admission_date) = 7,'VII',if(month(NEW.admission_date) = 8,'VIII',if(month(NEW.admission_date) = 9,'IX',if(month(NEW.admission_date) = 10,'X',if(month(NEW.admission_date) = 11,'XI','XII'))))))))))),'-',year(NEW.admission_date));
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,4 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
IF NEW.sms_send = 1 AND NEW.category = 1 and NEW.type = 2 THEN																  
 INSERT INTO `case_sms` (`id`,`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel`) SELECT `id`,`created_by`,`create_date`,4,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`mobile`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`admission_doctor`,`symptom`,`symptom_since`,`vital_sign`,`initial_diagnosis`,`treatment_plan`,`upload_haf`,`haf_uploaded_by`,`haf_upload_date`,`upload_doc`,`doc_uploaded_by`,`doc_upload_date`,`upload_haf_doc_finished`,`upload_haf_doc_finished_by`,`upload_haf_doc_finished_date`,`haf_doc_completed`,`haf_doc_completed_remarks`,`haf_doc_completed_by`,`haf_doc_completed_date`,`issue_initial_log`,`initial_log_issued_by`,`initial_log_issue_date`,`initial_claim_no`,`initial_log_remarks`,`initial_log_approval`,`discharge_date`,`discharge_doctor`,`actual_treatment`,`diagnosis`,`other_diagnosis`,`exclusion`,`bill_received`,`bill_received_by`,`bill_received_date`,`upload_bill`,`bill_uploaded_by`,`bill_upload_date`,`upload_bill_finished`,`upload_bill_finished_by`,`upload_bill_finished_date`,`bill_completed`,`bill_completed_remarks`,`bill_completed_by`,`bill_completed_date`,`ws_type`,`ws_option`,`ws_finished`,`ws_finished_by`,`ws_finished_date`,`ws_approval`,`ws_approval_remarks`,`ws_approval_by`,`ws_approval_date`,`issuance_limit`,`issue_log`,`issue_log_option`,`log_issued_by`,`log_issue_date`,`claim_no`,`log_remarks`,`log_approval`,`nonlog_reason`,`nonlog_remarks`,`reject_reason`,`reject_remarks`,`bill_no`,`bill_issue_date`,`bill_due_date`,`upload_original_bill`,`original_bill_uploaded_by`,`original_bill_upload_date`,`original_bill_checked`,`original_bill_checked_remarks`,`original_bill_checked_by`,`original_bill_checked_date`,`close_case_option`,`original_bill_verified`,`original_bill_verified_remarks`,`original_bill_verified_by`,`original_bill_verified_date`,`payment_date`,`paid_by`,`upload_proof_of_payment`,`doc_send_back_to_client_required`,`doc_send_back_to_client_date`,`doc_received_by_client_date`,`edited_by`,`edit_date`,`userlevel` from `case` where `client` = 24 AND `id` = NEW.id AND (NEW.mobile IS NOT NULL OR NEW.mobile <> '');
	 END IF;	   
ELSEIF NEW.status IN (1,2) AND NEW.haf_doc_completed = 3 AND OLD.haf_doc_completed <> 3 THEN
 SET NEW.status = 3;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,3 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 2 AND NEW.haf_doc_completed = 2 AND OLD.haf_doc_completed <> 2 THEN
 SET NEW.status = 1;
 SET NEW.upload_haf_doc_finished = 0;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,1 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.status = 1 AND NEW.upload_haf_doc_finished = 1 AND OLD.upload_haf_doc_finished <> 1 THEN
 SET NEW.status = 2;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,2 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
END IF;

IF (NEW.plan_header IS NOT NULL OR NEW.plan_header <> '') AND (OLD.plan_header IS NULL OR OLD.plan_header='') AND NEW.source = 5 then
 SET NEW.plan_header = NEW.plan_header;
END IF;

IF NEW.status = 32 AND NEW.client = 24 THEN
 INSERT INTO `case_client` (`case_id`,`case_id_client`, `status_sending`,`status_case`) SELECT NEW.`id`,NEW.`case_id_client`,0,32 FROM `case` WHERE client=24 and `id`= NEW.`id`;
END IF;

IF (NEW.plan_header IS NOT NULL OR NEW.plan_header <> '') AND (NEW.userlevel <> 0) AND (NEW.code_rawat IS NOT NULL OR NEW.code_rawat <>'') AND (NEW.source=5) AND (NEW.original_bill_checked = 1) AND (NEW.userlevel =-1) AND (SELECT plan.fullcover FROM `case` INNER JOIN plan ON plan.id = `case`.plan WHERE `case`.id = NEW.id AND `case`.plan=NEW.plan) = 0  THEN
SET NEW.bill_received = 1;	
SET NEW.bill_received_by = NEW.created_by;
SET NEW.bill_received_date = NEW.discharge_date;
SET NEW.upload_bill = 'hospital.jpg';
SET NEW.bill_uploaded_by = NEW.created_by;
SET NEW.bill_upload_date = NEW.discharge_date;
SET NEW.upload_bill_finished = 1;
SET NEW.upload_bill_finished_by = NEW.created_by;
SET NEW.upload_bill_finished_date = NEW.discharge_date;
SET NEW.bill_completed = 3;
SET NEW.bill_completed_by = NEW.created_by;
SET NEW.bill_completed_date = NEW.discharge_date;
SET NEW.bill_completed_by_01 = NEW.created_by;
SET NEW.bill_completed_date_01 = NEW.discharge_date;
SET NEW.ws_finished =1;
SET NEW.ws_finished_by = NEW.created_by;
SET NEW.ws_finished_date = NEW.discharge_date;
SET NEW.ws_approval = 3;
SET NEW.ws_approval_by = NEW.created_by;
SET NEW.ws_approval_date = NEW.discharge_date;
SET NEW.issue_log =2;
SET NEW.log_issued_by = NEW.created_by;
SET NEW.log_issue_date = NEW.discharge_date;
SET NEW.log_issued_by_01 = NEW.created_by;
SET NEW.log_issue_date_01 = NEW.discharge_date;
SET NEW.log_approval =1;
SET NEW.status =11;
SET NEW.claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.discharge_date) = 1,'I',if(month(NEW.discharge_date) = 2,'II',if(month(NEW.discharge_date) = 3,'III',if(month(NEW.discharge_date) = 4,'IV',if(month(NEW.discharge_date) = 5,'V',if(month(NEW.discharge_date) = 6,'VI',if(month(NEW.discharge_date) = 7,'VII',if(month(NEW.discharge_date) = 8,'VIII',if(month(NEW.discharge_date) = 9,'IX',if(month(NEW.discharge_date) = 10,'X',if(month(NEW.discharge_date) = 11,'XI','XII'))))))))))),'-',year(NEW.discharge_date));
END IF;

IF (NEW.plan_header IS NOT NULL OR NEW.plan_header <> '') AND (NEW.userlevel <> 0) AND (NEW.code_rawat IS NOT NULL OR NEW.code_rawat <>'') AND (NEW.source=5) AND (NEW.original_bill_checked = 1) AND (NEW.userlevel =-1) AND (SELECT plan.fullcover FROM `case` INNER JOIN plan ON plan.id = `case`.plan WHERE `case`.id = NEW.id AND `case`.plan=NEW.plan) = 1 THEN
SET NEW.bill_received = 1;	
SET NEW.bill_received_by = NEW.created_by;
SET NEW.bill_received_date = NEW.discharge_date;
SET NEW.upload_bill = 'hospital.jpg';
SET NEW.bill_uploaded_by = NEW.created_by;
SET NEW.bill_upload_date = NEW.discharge_date;
SET NEW.upload_bill_finished = 1;
SET NEW.upload_bill_finished_by = NEW.created_by;
SET NEW.upload_bill_finished_date = NEW.discharge_date;
SET NEW.bill_completed = 3;
SET NEW.bill_completed_by = NEW.created_by;
SET NEW.bill_completed_date = NEW.discharge_date;
SET NEW.bill_completed_by_01 = NEW.created_by;
SET NEW.bill_completed_date_01 = NEW.discharge_date;
SET NEW.ws_finished =1;
SET NEW.ws_finished_by = NEW.created_by;
SET NEW.ws_finished_date = NEW.discharge_date;
SET NEW.ws_approval = 3;
SET NEW.ws_approval_by = NEW.created_by;
SET NEW.ws_approval_date = NEW.discharge_date;
SET NEW.issue_log_option =1;
UPDATE `worksheet` SET `worksheet`.`actual` = `worksheet`.`day` * `worksheet`.`day_rate`,`worksheet`.`tolerance` = 0,`worksheet`.`non_prorate` = 0,`worksheet`.`prorate` = 0,`worksheet`.`prorate_percent` = 0,`worksheet`.`prorate_result` = 0,`worksheet`.`exclusion` = 0,`worksheet`.`remaining_deductible` = 0,`worksheet`.`copayment` = 1,`worksheet`.`remaining_day` = 0,`worksheet`.`per_day_limit` = 0,`worksheet`.`per_day_limit_balance` = 0,`worksheet`.`per_case_limit` = 0,`worksheet`.`remaining_inner_limit` = 0,`worksheet`.`remaining_annual_limit` = 0,`worksheet`.`using_float_fund` = 0,`worksheet`.`remaining_float_fund` = 0,`worksheet`.`cash_benefit_availability` = 0,`worksheet`.`cover` = (`worksheet`.`day` * `worksheet`.`day_rate`),`worksheet`.`excess` = 0,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0 WHERE `worksheet`.`case` = NEW.`id`;
SET NEW.issue_log =2;
SET NEW.log_issued_by = NEW.created_by;
SET NEW.log_issue_date = NEW.discharge_date;
SET NEW.log_issued_by_01 = NEW.created_by;
SET NEW.log_issue_date_01 = NEW.discharge_date;
SET NEW.claim_no = concat(LPAD(NEW.id,6,0),'-TPA-',if(NEW.category = 0,'OP','IP'),'-',LPAD(NEW.provider,4,0),'-',(SELECT area_code FROM provider WHERE id = NEW.provider),'-',if(month(NEW.discharge_date) = 1,'I',if(month(NEW.discharge_date) = 2,'II',if(month(NEW.discharge_date) = 3,'III',if(month(NEW.discharge_date) = 4,'IV',if(month(NEW.discharge_date) = 5,'V',if(month(NEW.discharge_date) = 6,'VI',if(month(NEW.discharge_date) = 7,'VII',if(month(NEW.discharge_date) = 8,'VIII',if(month(NEW.discharge_date) = 9,'IX',if(month(NEW.discharge_date) = 10,'X',if(month(NEW.discharge_date) = 11,'XI','XII'))))))))))),'-',year(NEW.discharge_date));
SET NEW.log_approval =1;
SET NEW.status =11;
END IF;


IF (NEW.status = 33) AND (NEW.payment_date IS NOT NULL) THEN
 SET NEW.status = 34;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,97 AS `contact_type`,34 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
END IF;

IF (NEW.status = 35) AND (NEW.is_clean = 1) THEN
 SET NEW.status = 36;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,98 AS `contact_type`,36 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
END IF;

IF (NEW.status = 35) AND (NEW.is_clean = 0) THEN
 SET NEW.status = 37;
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,98 AS `contact_type`,37 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
END IF;

IF NEW.case_remarks <> '' THEN
 SET NEW.case_remarks_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.case_remarks_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.case_remarks <> '' and OLD.case_remarks = '' THEN
 SET NEW.case_remarks_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.case_remarks_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;


IF (NEW.ws_finished_by IS NOT NULL AND NEW.ws_finished_date IS NOT NULL AND NEW.ws_approval_by IS NOT NULL AND NEW.ws_approval_date IS NOT NULL AND NEW.ws_error_category IS NOT NULL AND NEW.ws_error_type IS NOT NULL ) AND (OLD.ws_error_category IS NULL AND OLD.ws_error_type IS NULL )THEN
 INSERT INTO `error_log` (`case`,`category`,`type`,`remarks`,`checked_by`,`check_date`,`status`,`created_by`,`create_date`) 
 SELECT NEW.`id`,NEW.`ws_error_category`,NEW.`ws_error_type`, NEW.`ws_approval_remarks`,NEW.`ws_approval_by`,NEW.`ws_approval_date`,NEW.`status`,NEW.ws_finished_by, NEW.`ws_finished_date` FROM `case` WHERE `case`.`id` = NEW.id;
END IF;

IF (NEW.original_bill_checked_error_category IS NOT NULL AND NEW.original_bill_checked_error_type IS NOT NULL ) AND (OLD.original_bill_checked_error_category IS NULL AND OLD.original_bill_checked_error_type IS NULL )THEN
IF NEW.original_bill_checked = 2 THEN
 INSERT INTO `error_log` (`case`,`category`,`type`,`remarks`,`checked_by`,`check_date`,`status`,`created_by`,`create_date`) 
SELECT NEW.`id`,NEW.`original_bill_checked_error_category`,NEW.`original_bill_checked_error_type`, NEW.`original_bill_checked_remarks`,NEW.`original_bill_checked_by`, NEW.original_bill_checked_date,NEW.`status` ,NEW.original_bill_uploaded_by,NEW.original_bill_upload_date FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.original_bill_checked = 3 THEN
 INSERT INTO `error_log` (`case`,`category`,`type`,`remarks`,`checked_by`,`check_date`,`status`,`created_by`,`create_date`) 
SELECT NEW.`id`,NEW.`original_bill_checked_error_category`,NEW.`original_bill_checked_error_type`, NEW.`original_bill_checked_remarks`,NEW.`original_bill_checked_by`, NEW.original_bill_checked_date,NEW.`status` ,NEW.ws_finished_by,NEW.ws_finished_date FROM `case` WHERE `case`.`id` = NEW.id;
END IF;
END IF;

IF (NEW.original_bill_verified_error_category IS NOT NULL AND NEW.original_bill_verified_error_type IS NOT NULL) AND (OLD.original_bill_verified_error_category IS NULL AND OLD.original_bill_verified_error_type IS NULL)THEN
IF NEW.original_bill_verified = 2 THEN
 INSERT INTO `error_log` (`case`,`category`,`type`,`remarks`,`checked_by`,`check_date`,`status`,`created_by`,`create_date`) 
SELECT NEW.`id`,NEW.`original_bill_verified_error_category`,NEW.`original_bill_verified_error_type`, NEW.`original_bill_verified_remarks`,NEW.`original_bill_verified_by`, NEW.original_bill_verified_date,NEW.`status`,NEW.original_bill_uploaded_by, NEW.original_bill_upload_date  FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF NEW.original_bill_verified = 3 THEN
 INSERT INTO `error_log` (`case`,`category`,`type`,`remarks`,`checked_by`,`check_date`,`status`,`created_by`,`create_date`) 
SELECT NEW.`id`,NEW.`original_bill_verified_error_category`,NEW.`original_bill_verified_error_type`, NEW.`original_bill_verified_remarks`,NEW.`original_bill_verified_by`, NEW.original_bill_verified_date,NEW.`status`,NEW.ws_finished_by, NEW.ws_finished_date  FROM `case` WHERE `case`.`id` = NEW.id;
END IF;
END IF;

IF NEW.source = 6 AND NEW.status=94 THEN
 SET NEW.status_01=OLD.status;
END IF;

IF NEW.initial_diagnosis_01 IS NOT NULL OR (NEW.initial_diagnosis_01 <> OLD.initial_diagnosis_01) THEN
SET NEW.averaged_cost = (SELECT averaged_cost FROM diagnosis WHERE code = NEW.initial_diagnosis_01);
SET NEW.los = CONCAT((SELECT los FROM diagnosis WHERE code = NEW.initial_diagnosis_01),' days');
END IF;

IF NEW.status in (98,97,95,31,32,94) THEN
 SET NEW.case_closed_date = NOW();
END IF;

IF NEW.client_approval_for_payment <> OLD.client_approval_for_payment THEN
 SET NEW.payment_approval_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.payment_approval_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF NEW.client_approval_for_payment IS NOT NULL THEN
 SET NEW.payment_approval_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.payment_approval_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.status = 94 AND OLD.status <> 94 THEN
INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,94 AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
END IF;

IF (NEW.upload_original_bill IS NOT NULL AND OLD.upload_original_bill IS NULL) OR (NEW.original_bill_upload_date IS NOT NULL AND OLD.original_bill_upload_date IS NULL) THEN
 SET NEW.original_bill_upload_date_first = NEW.original_bill_upload_date;
END IF;

IF (NEW.original_bill_checked = 2 AND OLD.original_bill_checked <> 2) AND NEW.type = 1 THEN
 SET NEW.is_clean =  0;
END IF;	

IF NEW.copy_case = 1 AND (OLD.copy_case IS NULL OR OLD.copy_case =0) THEN
 SET NEW.	copy_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.	copy_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;	

IF NEW.original_bill_checked_date_01 IS NULL AND (NEW.original_bill_checked_date IS NOT NULL OR  OLD.original_bill_checked_date IS NOT NULL) THEN	
 SET NEW.original_bill_checked_date_01= NEW.original_bill_checked_date;
 SET NEW.original_bill_checked_by_01 = NEW.original_bill_checked_by;
END IF;

IF NEW.actual_treatment IS NULL AND NEW.status in (5,6,7) THEN
  SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter required field - Actual Treatment.';
END IF;

IF (NEW.member_remarks IS NOT NULL AND OLD.member_remarks IS NULL) THEN
 SET NEW.member_remarks_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.member_remarks_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF (NEW.member_remarks <> OLD.member_remarks AND OLD.member_remarks IS NOT NULL) THEN
 SET NEW.member_remarks_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.member_remarks_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;

IF NEW.final_decision IS NOT NULL AND OLD.final_decision IS NULL THEN
 SET NEW.case_remarks_by =  coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.case_remarks_date = coalesce(NEW.edit_date,NEW.create_date);
ELSEIF  (NEW.final_decision <> OLD.final_decision AND OLD.final_decision IS NOT NULL) THEN
 SET NEW.case_remarks_by =  coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.case_remarks_date = coalesce(NEW.edit_date,NEW.create_date);
END IF;																																		

IF (NEW.change_status IS NOT NULL AND OLD.change_status IS NULL) OR  (NEW.change_status <> '' AND OLD.change_status = '') THEN
 SET NEW.change_status_01 = OLD.status;
 SET NEW.status_01 = OLD.status;
 SET NEW.status = NEW.change_status;
 SET NEW.change_status_01_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.change_status_01_date = coalesce(NEW.edit_date,NEW.create_date);
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,NEW.status AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
END IF;

IF NEW.change_status_02 = 1 AND OLD.change_status_02 IS NULL THEN
 SET NEW.status =  OLD.status_01;
 SET NEW.status_01 = NEW.status;
 SET NEW.change_status_02_by = coalesce(NEW.edited_by,NEW.created_by);
 SET NEW.change_status_02_date = coalesce(NEW.edit_date,NEW.create_date);
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`) SELECT `case`.`id` AS `case`,coalesce(NEW.edit_date,NEW.create_date) AS `datetime`,99 AS `contact_type`,NEW.status AS `status`,coalesce(NEW.edited_by,NEW.created_by) AS `created_by`,coalesce(NEW.edit_date,NEW.create_date) AS `create_date` FROM `case` WHERE `case`.`id` = NEW.id;
END IF;


END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `case_trg_03`;
DELIMITER ;;
CREATE TRIGGER `case_trg_03` AFTER UPDATE ON `case` FOR EACH ROW BEGIN


IF NEW.procced_to_worksheet <> OLD.procced_to_worksheet AND NEW.procced_to_worksheet = 1 AND NEW.source=5  THEN
         DELETE FROM pre_worksheet_02 where  pre_worksheet_02.`case` = NEW.id;
          INSERT INTO pre_worksheet_02 (`case`, `client`, `plan`, `header`, `code_rawat`, `detail`, `amount`, `patient`, `principle`, `program` ) SELECT `case`, `client`, `plan`, `header`, `code_rawat`, `detail`, `amount`, `patient`, `principle`, `program`  from pre_worksheet_01 where pre_worksheet_01.`case` = NEW.id AND pre_worksheet_01.amount <> 0; 
END IF;

IF (NEW.original_bill_checked = 2 AND OLD.original_bill_checked <> 2) AND NEW.type = 1 THEN
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`,`contact_info`,`contact_person`,`description`) 
 SELECT `case`.`id` AS `case`,`case`.edit_date AS `datetime`,99 AS `contact_type`,`case`.status AS `status`,`case`.edited_by AS `created_by`,`case`.edit_date AS `create_date`, 'Original Bill Checking' as contact_info,'Original Bill Not Completed' as contact_person,`case`.original_bill_checked_remarks  FROM `case` WHERE `case`.`id` = NEW.id;
ELSEIF (NEW.original_bill_checked = 2 AND OLD.original_bill_checked <> 2) AND NEW.type <> 1 THEN
 INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`,`contact_info`,`contact_person`,`description`) 
 SELECT `case`.`id` AS `case`,`case`.edit_date AS `datetime`,99 AS `contact_type`,`case`.status AS `status`,`case`.edited_by AS `created_by`,`case`.edit_date AS `create_date`, 'Original Bill Checking' as contact_info,'Original Bill Not Completed' as contact_person,`case`.original_bill_checked_remarks  FROM `case` WHERE `case`.`id` = NEW.id;
END IF;

IF (NEW.member_remarks IS NOT NULL AND OLD.member_remarks IS NULL) THEN
 UPDATE `member` SET `member`.`member_remarks` = NEW.member_remarks, `member`.`remarks_by`=NEW.edited_by, `member`.`remarks_date`=NOW() WHERE `member`.`id`=NEW.patient;
 INSERT INTO `history_member_remarks`(`patient`,`remarks`,`remarks_by`,`remarks_date`) VALUES (NEW.patient, NEW.member_remarks,NEW.member_remarks_by,NEW.member_remarks_date);
ELSEIF (NEW.member_remarks <> OLD.member_remarks AND OLD.member_remarks IS NOT NULL) THEN
 UPDATE `member` SET `member`.`member_remarks` = NEW.member_remarks, `member`.`remarks_by`=NEW.edited_by, `member`.`remarks_date`=NEW.edit_date WHERE `member`.`id`=NEW.patient;
 INSERT INTO `history_member_remarks`(`patient`,`remarks`,`remarks_by`,`remarks_date`) VALUES (NEW.patient, NEW.member_remarks,NEW.member_remarks_by,NEW.member_remarks_date);
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `case_trg_05_notif_sunlife`;
DELIMITER ;;
CREATE TRIGGER `case_trg_05_notif_sunlife` AFTER UPDATE ON `case` FOR EACH ROW BEGIN
    DECLARE issue_log integer;
    IF NEW.client = 19 AND OLD.status = 25 AND NEW.status IN (28,31) AND NEW.type = 1 AND NEW.issue_log != 1 THEN
        SET @issue_log := (SELECT case_id FROM email_notif_sunlife WHERE case_id = NEW.id LIMIT 1);    
        SET @patient := (SELECT member_name FROM `member` WHERE id = NEW.patient LIMIT 1);    
        SET @admission_date := NEW.admission_date;
        SET @policy_no := NEW.policy_no;
        IF @issue_log IS NULL THEN
    	INSERT INTO email_notif_sunlife SET case_id = NEW.id, email_status = 0, nama_peserta = @patient, policy_no = @policy_no, admission_date = @admission_date;
        END IF;
    END IF;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `case_client_01`;
DELIMITER ;;
CREATE TRIGGER `case_client_01` BEFORE UPDATE ON `case_client` FOR EACH ROW BEGIN
IF NEW.status_sending = 1 THEN
SET NEW.send_date = NOW();
END IF;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trg_email_01`;
DELIMITER ;;
CREATE TRIGGER `trg_email_01` BEFORE INSERT ON `case_email_notify` FOR EACH ROW BEGIN

IF NEW.send = 2 THEN
 SET NEW.send_by = NEW.created_by;
 SET NEW.send_date = NEW.created_date;
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trg_email_02`;
DELIMITER ;;
CREATE TRIGGER `trg_email_02` BEFORE UPDATE ON `case_email_notify` FOR EACH ROW BEGIN

IF NEW.send = 2 AND OLD.send <> 2 THEN
 SET NEW.send_by = NEW.edited_by;
 SET NEW.send_date = NEW.edited_date;
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trig_sms_date_now`;
DELIMITER ;;
CREATE TRIGGER `trig_sms_date_now` BEFORE INSERT ON `case_sms` FOR EACH ROW BEGIN

SET NEW.send_date = NOW();

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trig_canceled`;
DELIMITER ;;
CREATE TRIGGER `trig_canceled` BEFORE UPDATE ON `case_sms` FOR EACH ROW BEGIN

IF NEW.cancelled= 2 AND NEW.client=1 THEN
 SET NEW.status_sms=1;
END IF;


END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigger_sms`;
DELIMITER ;;
CREATE TRIGGER `trigger_sms` AFTER INSERT ON `case_sms_log` FOR EACH ROW BEGIN

IF NEW.return IS NOT NULL THEN
INSERT INTO activity_log (`case`,`datetime`,`contact_type`,`contact_info`,`description`,`created_by`,`create_date`) 
SELECT sms_log.`case`, sms_log.send_date,18, sms_log.contact_info, sms_log.description,'Administrator',NOW() FROM sms_log ORDER BY sms_log.id DESC LIMIT 1;
END IF;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `insert_claim_balancer_history`;
DELIMITER ;;
CREATE TRIGGER `insert_claim_balancer_history` AFTER INSERT ON `claim_balancer` FOR EACH ROW BEGIN

INSERT INTO `his-tpa`.`claim_balancer_history` (`client`, `policy_no`, `member_name`, `member_id`, `claim_type`, `claim_ref`, `hospital_name`, `diagnosis`, `admission_date`, `discharge_date`, `duration_days`, `plan_id`, `total_amount_incurred`, `total_amount_approved`, `total_amount_not_approved`, `process_date`) VALUES (NEW.client,NEW.policy_no,NEW.member_name,NEW.member_id,NEW.claim_type,NEW.claim_ref,NEW.hospital_name,NEW.diagnosis,NEW.admission_date,NEW.discharge_date,NEW.duration_days,NEW.plan_id,NEW.total_amount_incurred,NEW.total_amount_approved,NEW.total_amount_not_approved,NOW());

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigger_cs_01`;
DELIMITER ;;
CREATE TRIGGER `trigger_cs_01` BEFORE INSERT ON `customer_survey` FOR EACH ROW BEGIN

IF  (SELECT Count(customer_survey.id) AS count FROM customer_survey WHERE customer_survey.`case` = NEW.case) >= 1 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot create survey more thank one survey';
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigger_cs_02`;
DELIMITER ;;
CREATE TRIGGER `trigger_cs_02` AFTER INSERT ON `customer_survey` FOR EACH ROW BEGIN

INSERT INTO `activity_log` (`case`,`datetime`,`contact_type`,`status`,`created_by`,`create_date`,`edited_by`,`edit_date`) 
SELECT NEW.`case`, NEW.create_date AS datetime, 100 AS contact_type, (SELECT `status` FROM `case` WHERE `id` = NEW.`case`) , customer_survey.created_by AS created_by, customer_survey.create_date as create_date , customer_survey.created_by AS edited_by, customer_survey.create_date as edit_date
FROM customer_survey 
WHERE customer_survey.`case` = NEW.case 
ORDER BY
customer_survey.id DESC
LIMIT 1;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `float_fund_01`;
DELIMITER ;;
CREATE TRIGGER `float_fund_01` AFTER INSERT ON `float_fund` FOR EACH ROW BEGIN

UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining`;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `float_fund_02`;
DELIMITER ;;
CREATE TRIGGER `float_fund_02` AFTER UPDATE ON `float_fund` FOR EACH ROW BEGIN

UPDATE `program` INNER JOIN `remaining_float_fund` ON `program`.`id` = `remaining_float_fund`.`program` SET `program`.`remaining_float_fund` = `remaining_float_fund`.`remaining`;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `mappingTrigger`;
DELIMITER ;;
CREATE TRIGGER `mappingTrigger` BEFORE INSERT ON `jagadiri_auto_staging` FOR EACH ROW SET
@member_id = (SELECT member.id FROM member where member.client = 24 and member.member_id = NEW.member_id LIMIT 1),
@policy_holder = (select member.member_principle from member where member.member_id = new.member_id limit 1),
@rawat = if(NEW.category = "Rawat Jalan", "0","1"),
@detail = (select plan_detail.`id` from plan_detail where plan_detail.`name` = NEW.`detail` and plan_detail.plan = NEW.plan limit 1),
@createby = "JAGADIRI",
NEW.policy_holder = @policy_holder,
NEW.REF = IF(NEW.REF<>"", 
NEW.REF, @x), 
NEW.patient = @member_id, 
NEW.category = @rawat, 
new.detail = @detail, 
new.created_by = @createby,
new.gender = if(new.gender = "M","1","0")
;
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `TRG_ENCRYPT`;
DELIMITER ;;
CREATE TRIGGER `TRG_ENCRYPT` BEFORE INSERT ON `member` FOR EACH ROW BEGIN
	SET NEW.MEMBER_NAME_ENCRYPT = (SELECT  AES_ENCRYPT(NEW.MEMBER_NAME, SHA2('AA-ENC-2016', 512)) AS TEST1);
	SET NEW.MEMBER_DOB_ENCRYPT = (SELECT  AES_ENCRYPT(NEW.MEMBER_DOB, SHA2('AA-ENC-2016', 512)) AS TEST2);
	SET NEW.MEMBER_PHONE_ENCRYPT = (SELECT  AES_ENCRYPT(NEW.MEMBER_PHONE, SHA2('AA-ENC-2016', 512)) AS TEST3);
	
	IF NEW.client = 288 THEN 
	   SET NEW.member_card = (SELECT CONCAT('NFSI',LPAD((SELECT (COALESCE(SUM(A.count),0) + 1) total FROM (SELECT COUNT(member.id) AS count FROM member WHERE member.client = 288 and  (member.member_card NOT LIKE '%DUMMY%' OR member.member_name NOT LIKE '%DUMMY%') HAVING count > 0) as A),8,0)));
  END IF;
	
	IF NEW.client = 38 THEN 
	   SET NEW.member_card = (SELECT CONCAT('NMI',LPAD((SELECT (COALESCE(SUM(A.count),0) + 1) total FROM (SELECT COUNT(member.id) AS count FROM member WHERE member.client = 38 and (member.member_card NOT LIKE '%DUMMY%' OR member.member_name NOT LIKE '%DUMMY%') HAVING count > 0) as A),8,0)));
  END IF;
END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `TRG_ENC_NAME`;
DELIMITER ;;
CREATE TRIGGER `TRG_ENC_NAME` BEFORE UPDATE ON `member` FOR EACH ROW BEGIN
	SET NEW.MEMBER_NAME_ENCRYPT = (SELECT  AES_ENCRYPT(NEW.MEMBER_NAME, SHA2('AA-ENC-2016', 512)) AS TEST1);
	SET NEW.MEMBER_DOB_ENCRYPT = (SELECT  AES_ENCRYPT(NEW.MEMBER_DOB, SHA2('AA-ENC-2016', 512)) AS TEST2);
	SET NEW.MEMBER_PHONE_ENCRYPT = (SELECT  AES_ENCRYPT(NEW.MEMBER_PHONE, SHA2('AA-ENC-2016', 512)) AS TEST3);

IF NEW.client = 1 and NEW.plan <> OLD.plan THEN
SET NEW.plan_attach_date = NEW.policy_declare_date;
SET NEW.special_condition = concat(OLD.special_condition,', ','Upgrade Plan');
END IF;


IF NEW.medisclick_activation=1 AND OLD.medisclick_activation=0 THEN
 SET NEW.medisclick_activation_date = NOW();
END IF;

IF (NEW.member_remarks IS NOT NULL AND OLD.member_remarks IS NULL) THEN
 SET NEW.remarks_by = NEW.edited_by;
 SET NEW.remarks_date = NEW.edit_date;
 INSERT INTO `history_member_remarks`(`patient`,`remarks`,`remarks_by`,`remarks_date`) VALUES (NEW.id, NEW.member_remarks,NEW.remarks_by,NEW.remarks_date);
ELSEIF (NEW.member_remarks <> OLD.member_remarks AND OLD.member_remarks IS NOT NULL) THEN
 SET NEW.remarks_by = NEW.edited_by;
 IF (NEW.edit_date <> OLD.edit_date) THEN 
  SET NEW.remarks_date = NEW.edit_date;
 END IF;
 INSERT INTO `history_member_remarks`(`patient`,`remarks`,`remarks_by`,`remarks_date`) VALUES (NEW.id, NEW.member_remarks,NEW.remarks_by,NEW.remarks_date);
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `member_trg_01`;
DELIMITER ;;
CREATE TRIGGER `member_trg_01` AFTER UPDATE ON `member` FOR EACH ROW BEGIN

IF NEW.medisclick_activation <> OLD.medisclick_activation THEN
 delete from `users_reimbursement` where `users_reimbursement`.`patient` = NEW.id;
 insert into users_reimbursement(real_name,username,dob,emailx,mobile_phone,password,client,principle,patient,userlevel,profile,source,status,created_by,create_date,edited_by,edit_date) select `member`.`member_name` AS `real_name`,if((isnull(`member`.`member_card`) or (trim(`member`.`member_card`) = '')),`member`.`policy_no`,`member`.`member_card`) AS `username`,`member`.`member_dob` AS `dob`,`member`.`member_email` AS `emailx`,`member`.`member_mobile` AS `mobile_phone`,`member`.`member_password` AS `password`,`member`.`client` AS `client`,`member`.`member_principle` AS `principle`,`member`.`id` AS `patient`,2 AS `userlevel`,'' AS `profile`,2 AS `source`,`member`.`policy_status` AS `status`,`member`.`created_by` AS `created_by`,`member`.`create_date` AS `create_date`,`member`.`edited_by` AS `edited_by`,`member`.`edit_date` AS `edit_date` from `member` where ((`member`.`medisclick_activation` = 1) and (`member`.`policy_status` = 1)) AND `member`.`id` = NEW.id GROUP BY if((isnull(`member`.`member_card`) or (trim(`member`.`member_card`) = '')),`member`.`policy_no`,`member`.`member_card`);
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `member_history_before_insert`;
DELIMITER ;;
CREATE TRIGGER `member_history_before_insert` BEFORE INSERT ON `member_history` FOR EACH ROW BEGIN

SET NEW.enrollment_date = (DATE_FORMAT(NOW(),'%Y-%m-%d'));
SET NEW.member_ref = (CONCAT(NEW.policy_no,"-",NEW.member_id));

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `treatment_01`;
DELIMITER ;;
CREATE TRIGGER `treatment_01` BEFORE UPDATE ON `monitoring_treatment` FOR EACH ROW BEGIN

IF NEW.status IS NOT NULL AND OLD.status IS NULL THEN
 SET NEW.approved_by = NEW.edited_by;
 SET NEW.approved_date = NEW.edited_date;
ELSEIF NEW.status <> OLD.status THEN
 SET NEW.approved_by = NEW.edited_by;
 SET NEW.approved_date = NEW.edited_date;
END IF;



END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `plan_detail_before_insert`;
DELIMITER ;;
CREATE TRIGGER `plan_detail_before_insert` BEFORE INSERT ON `plan_detail` FOR EACH ROW BEGIN

SET @iddetail = (SELECT plan_detail.`id` FROM `plan_detail` WHERE `plan_detail`.`name` = NEW.name ORDER BY plan_detail.`id` ASC LIMIT 1);

IF @iddetail <> "" OR @iddetail IS NOT NULL THEN
SET NEW.ref_detail =  @iddetail;
ELSE
SET NEW.ref_detail =  NEW.id;
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `plan_detail_before_insert_copy`;
DELIMITER ;;
CREATE TRIGGER `plan_detail_before_insert_copy` BEFORE INSERT ON `plan_detail_copy` FOR EACH ROW BEGIN

SET @iddetail = (SELECT plan_detail.`id` FROM `plan_detail` WHERE `plan_detail`.`name` = NEW.name ORDER BY plan_detail.`id` ASC LIMIT 1);

IF @iddetail <> "" OR @iddetail IS NOT NULL THEN
SET NEW.ref_detail =  @iddetail;
ELSE
SET NEW.ref_detail =  NEW.id;
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `preadmission_1`;
DELIMITER ;;
CREATE TRIGGER `preadmission_1` BEFORE INSERT ON `pre_admission` FOR EACH ROW BEGIN

SET NEW.dob = (SELECT member_dob FROM member WHERE id = NEW.patient);
SET NEW.gender = (SELECT member_gender FROM member WHERE id = NEW.patient);
SET NEW.member_id = (SELECT member_id FROM member WHERE id = NEW.patient);
SET NEW.member_card = (SELECT member_card FROM member WHERE id = NEW.patient);
SET NEW.principle = (SELECT member_principle FROM member WHERE id = NEW.patient);
SET NEW.relation = (SELECT member_relation FROM member WHERE id = NEW.patient);
SET NEW.client = (SELECT client FROM member WHERE id = NEW.patient);
SET NEW.branch = (SELECT branch FROM member WHERE id = NEW.patient);
SET NEW.company = (SELECT company FROM member WHERE id = NEW.patient);
SET NEW.policy_status = (SELECT policy_status FROM member WHERE id = NEW.patient);
SET NEW.policy_no = (SELECT policy_no FROM member WHERE id = NEW.patient);
SET NEW.policy_effective_date = (SELECT policy_effective_date FROM member WHERE id = NEW.patient);
SET NEW.policy_expiry_date = (SELECT policy_expiry_date FROM member WHERE id = NEW.patient);
SET NEW.policy_issue_date = (SELECT policy_issue_date FROM member WHERE id = NEW.patient);
SET NEW.policy_declare_date = (SELECT policy_declare_date FROM member WHERE id = NEW.patient);
SET NEW.policy_lapse_date = (SELECT policy_lapse_date FROM member WHERE id = NEW.patient);
SET NEW.policy_revival_date = (SELECT policy_revival_date FROM member WHERE id = NEW.patient);
SET NEW.policy_termination_date = (SELECT policy_termination_date FROM member WHERE id = NEW.patient);
SET NEW.special_condition = (SELECT special_condition FROM member WHERE id = NEW.patient);
SET NEW.exclusion = (SELECT exclusion FROM member WHERE id = NEW.patient);
SET NEW.program = (SELECT program FROM member WHERE id = NEW.patient);
SET NEW.plan = (SELECT plan FROM member WHERE id = NEW.patient);
SET NEW.plan_attach_date = (SELECT plan_attach_date FROM member WHERE id = NEW.patient);
SET NEW.plan_expiry_date = (SELECT plan_expiry_date FROM member WHERE id = NEW.patient);
SET NEW.rider = (SELECT rider FROM member WHERE id = NEW.patient);
SET NEW.rider_attach_date = (SELECT rider_attach_date FROM member WHERE id = NEW.patient);
SET NEW.rider_expiry_date = (SELECT rider_expiry_date FROM member WHERE id = NEW.patient);
SET NEW.currency_01 = (SELECT program.currency FROM member INNER JOIN program ON member.program = program.id WHERE member.id = NEW.patient);
SET NEW.currency_02 = (SELECT program.currency FROM member INNER JOIN program ON member.program = program.id WHERE member.id = NEW.patient);
SET NEW.currency_rate = 1;

IF NEW.userlevel = 3 AND NEW.status = 2 AND NEW.type <> 2 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Contact Center can create only cashless case.';
ELSEIF NEW.userlevel = 7 AND NEW.status = 2 AND NEW.type = 2 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Operation-Admin can create only reimbursement case.';
ELSEIF NEW.status = 2 AND NEW.policy_lapse_date IS NOT NULL AND DATEDIFF(NEW.policy_lapse_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Policy Lapse Date.';
ELSEIF NEW.status = 2 AND NEW.policy_termination_date IS NOT NULL AND DATEDIFF(NEW.policy_termination_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Policy Termination Date.';
ELSEIF NEW.status = 2 AND DATEDIFF(NEW.plan_expiry_date,NEW.admission_date) < 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Admission Date can not be newer than Plan Expiry Date.';
ELSEIF NEW.status = 3 AND NEW.cancel_reason = '' THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Please enter Cancel Reason.';
END IF;

IF NEW.status = 2 AND NEW.type = 2 AND (SELECT status FROM provider WHERE id = NEW.provider) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Provider Status is Disable.';
ELSE
 SET NEW.provider_status = (SELECT status FROM provider WHERE id = NEW.provider);
END IF;

IF NEW.status = 2 AND if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM program WHERE id = NEW.program) = 1,if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM provider WHERE id = NEW.provider) = 1,1,0),0) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The service is not provided by neither our Medical Provider nor Client.';
ELSE
 SET New.is_service_provided = if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM program WHERE id = NEW.program) = 1,if((SELECT if(service LIKE CONCAT('%',NEW.category,'%'),1,0) FROM provider WHERE id = NEW.provider) = 1,1,0),0);
END IF;

IF NEW.status = 2 AND NEW.category = 0 AND NEW.type = 2 AND if((SELECT if(provider LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0))) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The Medical Provider is not our Panel.';
ELSEIF NEW.status = 2 AND NEW.category = 1 AND NEW.type = 2 AND if((SELECT if(provider_01 LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0))) = 0 THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'The Medical Provider is not our Panel.';
ELSE
 SET NEW.is_panel = if((SELECT if(provider_01 LIKE CONCAT(NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider,',%'),1,0) FROM program WHERE id = New.program) = 1,1,if((SELECT if(provider_01 LIKE CONCAT('%,',NEW.provider),1,0) FROM program WHERE id = New.program) = 1,1,0)));
END IF;

IF NEW.status = 2 AND (NEW.appended IS NULL) THEN
 SET NEW.ref = CONCAT(NEW.source,NEW.category,NEW.type,'/',NEW.patient,'/',NEW.provider,'/',NEW.admission_date);
 SET NEW.case_link = 'Go to Case';
 INSERT INTO `case` (`created_by`,`create_date`,`status`,`category`,`type`,`ref`,`patient`,`dob`,`gender`,`member_id`,`member_card`,`principle`,`relation`,`client`,`branch`,`company`,`policy_status`,`policy_no`,`policy_holder`,`policy_effective_date`,`policy_expiry_date`,`policy_issue_date`,`policy_declare_date`,`policy_lapse_date`,`policy_revival_date`,`policy_termination_date`,`special_condition`,`exclusion`,`program`,`plan`,`plan_attach_date`,`plan_expiry_date`,`rider`,`rider_attach_date`,`rider_expiry_date`,`provider`,`other_provider`,`currency_01`,`currency_02`,`currency_rate`,`admission_date`,`admission_time`,`upload_haf_doc_finished`,`haf_doc_completed`,`issue_initial_log`,`bill_received`,`upload_bill_finished`,`bill_completed`,`ws_type`,`ws_option`,`ws_finished`,`ws_approval`,`issuance_limit`,`issue_log`,`issue_log_option`,`original_bill_checked`,`close_case_option`,`original_bill_verified`,`doc_send_back_to_client_required`) VALUES (NEW.created_by,NEW.create_date,if(NEW.category=0,if(NEW.type=1,19,if(NEW.type=2,4,if(NEW.type=3,19,0))),if(NEW.category=1,if(NEW.type=1,19,if(NEW.type=2,1,if(NEW.type=3,19,0))),0)),NEW.category,NEW.type,NEW.ref,NEW.patient,NEW.dob,NEW.gender,NEW.member_id,NEW.member_card,NEW.principle,NEW.relation,NEW.client,NEW.branch,NEW.company,NEW.policy_status,NEW.policy_no,NEW.policy_holder,NEW.policy_effective_date,NEW.policy_expiry_date,NEW.policy_issue_date,NEW.policy_declare_date,NEW.policy_lapse_date,NEW.policy_revival_date,NEW.policy_termination_date,NEW.special_condition,(SELECT exclusion FROM member WHERE id = NEW.patient),NEW.program,NEW.plan,NEW.plan_attach_date,NEW.plan_expiry_date,NEW.rider,NEW.rider_attach_date,NEW.rider_expiry_date,NEW.provider,NEW.other_provider,NEW.currency_01,NEW.currency_02,NEW.currency_rate,NEW.admission_date,concat(NEW.admission_hour,':',NEW.admission_minute,':00'),0,1,1,0,0,1,0,if(NEW.client = 3,1,NULL),0,1,0,1,0,1,(SELECT `program`.`close_case_option` FROM `program` WHERE `program`.`id` = NEW.program),1,(SELECT `program`.doc_send_back_required FROM `program` WHERE `program`.`id` = NEW.program));
 SET NEW.appended = 1;
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `a_trigger_copy`;
DELIMITER ;;
CREATE TRIGGER `a_trigger_copy` AFTER INSERT ON `pre_worksheet_02` FOR EACH ROW BEGIN

DECLARE summary integer;

SET @validation := (select count(`worksheet`.`case`) from worksheet where worksheet.`case` = NEW.`case` AND worksheet.`detail` = NEW.`detail`);
SET @summary:= (select pre_worksheet_01.amount from pre_worksheet_01 where pre_worksheet_01.`case` = NEW.`case` AND pre_worksheet_01.`detail` = NEW.`detail`  group by pre_worksheet_01.`case`);

IF @validation > 0 THEN

UPDATE worksheet set `day_rate` = @summary, `worksheet`.`remarks`= if(NEW.client = 30,CONCAT('Co-share 25%'),NULL) where worksheet.`case` = NEW.`case` and worksheet.detail = NEW.`detail`; 

UPDATE `worksheet` INNER JOIN `case` ON case.id = worksheet.case SET `worksheet`.`cover` = 0,`worksheet`.`excess` = 0,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0,`worksheet`.`tick` = 0, `worksheet`.`created_by` =`case`.`created_by`, `worksheet`.`create_date`=`case`.`create_date` WHERE `case`.`ws_approval` <> 3 AND `worksheet`.`case` = NEW.`case` AND `worksheet`.`detail` = NEW.detail;

UPDATE principle_header_balance_01 SET principle_header_balance_01.cover = 0,principle_header_balance_01.deductible = 0 WHERE principle_header_balance_01.principle = NEW.principle;

UPDATE principle_detail_balance_01 SET principle_detail_balance_01.`day` = 0,principle_detail_balance_01.cover = 0 WHERE principle_detail_balance_01.principle = NEW.principle;

UPDATE patient_header_balance_01 SET patient_header_balance_01.cover = 0,patient_header_balance_01.deductible = 0 WHERE patient_header_balance_01.patient = NEW.patient;

UPDATE patient_detail_balance_01 SET patient_detail_balance_01.`day` = 0,patient_detail_balance_01.cover = 0 WHERE patient_detail_balance_01.patient = NEW.patient;

UPDATE principle_header_balance_01 INNER JOIN principle_header_balance ON principle_header_balance_01.principle = principle_header_balance.principle AND principle_header_balance_01.`name` = principle_header_balance.`name` SET principle_header_balance_01.cover = principle_header_balance.cover,principle_header_balance_01.deductible = principle_header_balance.deductible WHERE principle_header_balance.principle = NEW.principle;

UPDATE principle_detail_balance_01 INNER JOIN principle_detail_balance ON principle_detail_balance_01.principle = principle_detail_balance.principle AND principle_detail_balance_01.`name` = principle_detail_balance.`name` SET principle_detail_balance_01.`day` = principle_detail_balance.`day`,principle_detail_balance_01.cover = principle_detail_balance.cover WHERE principle_detail_balance.principle = NEW.principle;

UPDATE patient_header_balance_01 INNER JOIN patient_header_balance ON patient_header_balance_01.patient = patient_header_balance.patient AND patient_header_balance_01.`name` = patient_header_balance.`name` SET patient_header_balance_01.cover = patient_header_balance.cover,patient_header_balance_01.deductible = patient_header_balance.deductible WHERE patient_header_balance.patient = NEW.patient;

UPDATE patient_detail_balance_01 INNER JOIN patient_detail_balance ON patient_detail_balance_01.patient = patient_detail_balance.patient AND patient_detail_balance_01.`name` = patient_detail_balance.`name` SET patient_detail_balance_01.`day` = patient_detail_balance.`day`,patient_detail_balance_01.cover = patient_detail_balance.cover WHERE patient_detail_balance.patient = NEW.patient;

DELETE FROM balance_header_03 WHERE balance_header_03.patient = NEW.patient;

INSERT INTO balance_header_03 (patient,header,`name`,header_annual_limit,header_annual_limit_utilized,header_annual_limit_balance,deductible_per_year,deductible_per_year_utilized,deductible_per_year_balance) SELECT patient,header,`name`,header_annual_limit,header_annual_limit_utilized,header_annual_limit_balance,deductible_per_year,deductible_per_year_utilized,deductible_per_year_balance FROM balance_header_01 WHERE balance_header_01.patient = NEW.patient GROUP BY patient, header ORDER BY NULL;

DELETE FROM balance_detail_03 WHERE balance_detail_03.patient = NEW.patient;

INSERT INTO balance_detail_03 (patient,detail,`name`,max_day_per_year,max_day_per_year_utilized,max_day_per_year_balance,detail_annual_limit,detail_annual_limit_utilized,detail_annual_limit_balance) SELECT patient,detail,`name`,max_day_per_year,max_day_per_year_utilized,max_day_per_year_balance,detail_annual_limit,detail_annual_limit_utilized,detail_annual_limit_balance FROM balance_detail_01 WHERE balance_detail_01.patient = NEW.patient GROUP BY patient, detail ORDER BY NULL;

DELETE FROM pre_analysis_02 WHERE pre_analysis_02.`case` = NEW.`case`;

INSERT INTO pre_analysis_02 (`case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,copayment_01,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability) SELECT `case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,copayment_01,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability FROM pre_analysis_01 WHERE pre_analysis_01.`case` = NEW.`case`;

UPDATE `worksheet` INNER JOIN plan_detail ON worksheet.detail = plan_detail.id INNER JOIN analysis_02 ON worksheet.id = analysis_02.id INNER JOIN worksheet_staging ON worksheet.id = worksheet_staging.id SET `worksheet`.`actual` = `analysis_02`.`actual`,`worksheet`.`non_prorate` = `analysis_02`.`non_prorate`,`worksheet`.`prorate_result` = `analysis_02`.`prorate_result`,`worksheet`.`remaining_deductible` = `analysis_02`.`remaining_deductible`,`worksheet`.`copayment` = `analysis_02`.`copayment`,`worksheet`.`per_day_limit` = `analysis_02`.`per_day_limit`,`worksheet`.`per_day_limit_balance` = `analysis_02`.`per_day_limit_balance`,`worksheet`.`per_case_limit` = `analysis_02`.`per_case_limit`,`worksheet`.`remaining_day` = `analysis_02`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `analysis_02`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `analysis_02`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `analysis_02`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `analysis_02`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `analysis_02`.`cash_benefit_availability`,`worksheet`.`cover` = `analysis_02`.`cover`,`worksheet`.`excess` = `analysis_02`.`excess`,`worksheet`.`deductible` = `analysis_02`.`deductible`,`worksheet`.`cash_benefit` = `analysis_02`.`cash_benefit`,`worksheet`.`tick` = 1 WHERE `worksheet`.`case` = NEW.`case`;

ELSEIF @summary > 0 THEN

INSERT INTO `his-tpa`.`worksheet` (`case`, `plan`, `header`, `detail`, `day`, `day_rate`, `actual`) VALUES (NEW.`case`, NEW.plan, NEW.header, NEW.detail, 1, @summary, (@summary*1));
UPDATE worksheet set `day_rate` = @summary, `worksheet`.`remarks`= if(NEW.client = 30,CONCAT('Co-share 25%'),NULL) where worksheet.`case` = NEW.`case` and worksheet.detail=NEW.`detail`;	
UPDATE `worksheet` INNER JOIN `case` ON case.id = worksheet.case SET `worksheet`.`cover` = 0,`worksheet`.`excess` = 0,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0,`worksheet`.`tick` = 0 WHERE `case`.`ws_approval` <> 3 AND `worksheet`.`case` = NEW.`case` AND `worksheet`.`detail` = NEW.detail AND `worksheet`.`day_rate` = 1;
UPDATE principle_header_balance_01 SET principle_header_balance_01.cover = 0,principle_header_balance_01.deductible = 0 WHERE principle_header_balance_01.principle = NEW.principle;

UPDATE principle_detail_balance_01 SET principle_detail_balance_01.`day` = 0,principle_detail_balance_01.cover = 0 WHERE principle_detail_balance_01.principle = NEW.principle;
UPDATE patient_header_balance_01 SET patient_header_balance_01.cover = 0,patient_header_balance_01.deductible = 0 WHERE patient_header_balance_01.patient = NEW.patient;
UPDATE patient_detail_balance_01 SET patient_detail_balance_01.`day` = 0,patient_detail_balance_01.cover = 0 WHERE patient_detail_balance_01.patient = NEW.patient;
UPDATE principle_header_balance_01 INNER JOIN principle_header_balance ON principle_header_balance_01.principle = principle_header_balance.principle AND principle_header_balance_01.`name` = principle_header_balance.`name` SET principle_header_balance_01.cover = principle_header_balance.cover,principle_header_balance_01.deductible = principle_header_balance.deductible WHERE principle_header_balance.principle = NEW.principle;

UPDATE principle_detail_balance_01 INNER JOIN principle_detail_balance ON principle_detail_balance_01.principle = principle_detail_balance.principle AND principle_detail_balance_01.`name` = principle_detail_balance.`name` SET principle_detail_balance_01.`day` = principle_detail_balance.`day`,principle_detail_balance_01.cover = principle_detail_balance.cover WHERE principle_detail_balance.principle = NEW.principle;

UPDATE patient_header_balance_01 INNER JOIN patient_header_balance ON patient_header_balance_01.patient = patient_header_balance.patient AND patient_header_balance_01.`name` = patient_header_balance.`name` SET patient_header_balance_01.cover = patient_header_balance.cover,patient_header_balance_01.deductible = patient_header_balance.deductible WHERE patient_header_balance.patient = NEW.patient;

UPDATE patient_detail_balance_01 INNER JOIN patient_detail_balance ON patient_detail_balance_01.patient = patient_detail_balance.patient AND patient_detail_balance_01.`name` = patient_detail_balance.`name` SET patient_detail_balance_01.`day` = patient_detail_balance.`day`,patient_detail_balance_01.cover = patient_detail_balance.cover WHERE patient_detail_balance.patient = NEW.patient;

DELETE FROM balance_header_03 WHERE balance_header_03.patient = NEW.patient;

INSERT INTO balance_header_03 (patient,header,`name`,header_annual_limit,header_annual_limit_utilized,header_annual_limit_balance,deductible_per_year,deductible_per_year_utilized,deductible_per_year_balance) SELECT patient,header,`name`,header_annual_limit,header_annual_limit_utilized,header_annual_limit_balance,deductible_per_year,deductible_per_year_utilized,deductible_per_year_balance FROM balance_header_01 WHERE balance_header_01.patient = NEW.patient GROUP BY patient, header ORDER BY NULL;

DELETE FROM balance_detail_03 WHERE balance_detail_03.patient = NEW.patient;

INSERT INTO balance_detail_03 (patient,detail,`name`,max_day_per_year,max_day_per_year_utilized,max_day_per_year_balance,detail_annual_limit,detail_annual_limit_utilized,detail_annual_limit_balance) SELECT patient,detail,`name`,max_day_per_year,max_day_per_year_utilized,max_day_per_year_balance,detail_annual_limit,detail_annual_limit_utilized,detail_annual_limit_balance FROM balance_detail_01 WHERE balance_detail_01.patient = NEW.patient GROUP BY patient, detail ORDER BY NULL;

DELETE FROM pre_analysis_02 WHERE pre_analysis_02.`case` = NEW.`case`;

INSERT INTO pre_analysis_02 (`case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,copayment_01,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability) SELECT `case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,copayment_01,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability FROM pre_analysis_01 WHERE pre_analysis_01.`case` = NEW.`case`;

UPDATE `worksheet` INNER JOIN plan_detail ON worksheet.detail = plan_detail.id INNER JOIN analysis_02 ON worksheet.id = analysis_02.id INNER JOIN worksheet_staging ON worksheet.id = worksheet_staging.id SET `worksheet`.`actual` = `analysis_02`.`actual`,`worksheet`.`non_prorate` = `analysis_02`.`non_prorate`,`worksheet`.`prorate_result` = `analysis_02`.`prorate_result`,`worksheet`.`remaining_deductible` = `analysis_02`.`remaining_deductible`,`worksheet`.`copayment` = `analysis_02`.`copayment`,`worksheet`.`per_day_limit` = `analysis_02`.`per_day_limit`,`worksheet`.`per_day_limit_balance` = `analysis_02`.`per_day_limit_balance`,`worksheet`.`per_case_limit` = `analysis_02`.`per_case_limit`,`worksheet`.`remaining_day` = `analysis_02`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `analysis_02`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `analysis_02`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `analysis_02`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `analysis_02`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `analysis_02`.`cash_benefit_availability`,`worksheet`.`cover` = `analysis_02`.`cover`,`worksheet`.`excess` = `analysis_02`.`excess`,`worksheet`.`deductible` = `analysis_02`.`deductible`,`worksheet`.`cash_benefit` = `analysis_02`.`cash_benefit`,`worksheet`.`tick` = 1 WHERE `worksheet`.`case` = NEW.`case`;

END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigger_01`;
DELIMITER ;;
CREATE TRIGGER `trigger_01` AFTER INSERT ON `pre_worksheet_edc_02` FOR EACH ROW BEGIN 

DECLARE validation integer;
DECLARE summary integer;

SET @validation := (select count(`worksheet`.`case`) from worksheet where worksheet.`case` = NEW.`case` AND worksheet.`detail` = NEW.`detail`);
SET @summary:= (select pre_worksheet_edc_01.amount from pre_worksheet_edc_01 where pre_worksheet_edc_01.`case` = NEW.`case` AND pre_worksheet_edc_01.`detail` = NEW.`detail`  group by pre_worksheet_edc_01.`case`);

IF @validation > 0 THEN

UPDATE worksheet set `day` = NEW.`day`, `day_rate` = @summary, `worksheet`.`remarks`= if(NEW.client = 30,CONCAT('Co-share 25%'),if(NEW.client = 38,CONCAT('SELURUH BIAYA DIJAMINKAN TERLEBIH DAHULU'),NULL)) where worksheet.`case` = NEW.`case` and worksheet.detail = NEW.`detail`; 
UPDATE `worksheet` INNER JOIN `case` ON case.id = worksheet.case SET `worksheet`.`cover` = 0,`worksheet`.`excess` = 0,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0,`worksheet`.`tick` = 0, `worksheet`.`created_by` =`case`.`created_by`, `worksheet`.`create_date`=`case`.`create_date` WHERE `case`.`ws_approval` <> 3 AND `worksheet`.`case` = NEW.`case` AND `worksheet`.`detail` = NEW.detail;

UPDATE principle_header_balance_01 INNER JOIN principle_header_balance ON principle_header_balance_01.principle = principle_header_balance.principle AND principle_header_balance_01.`name` = principle_header_balance.`name` SET principle_header_balance_01.cover = principle_header_balance.cover,principle_header_balance_01.deductible = principle_header_balance.deductible WHERE principle_header_balance.principle = NEW.principle;
UPDATE principle_detail_balance_01 INNER JOIN principle_detail_balance ON principle_detail_balance_01.principle = principle_detail_balance.principle AND principle_detail_balance_01.`name` = principle_detail_balance.`name` SET principle_detail_balance_01.`day` = principle_detail_balance.`day`,principle_detail_balance_01.cover = principle_detail_balance.cover WHERE principle_detail_balance.principle = NEW.principle;
UPDATE patient_header_balance_01 INNER JOIN patient_header_balance ON patient_header_balance_01.patient = patient_header_balance.patient AND patient_header_balance_01.`name` = patient_header_balance.`name` SET patient_header_balance_01.cover = patient_header_balance.cover,patient_header_balance_01.deductible = patient_header_balance.deductible WHERE patient_header_balance.patient = NEW.patient;
UPDATE patient_detail_balance_01 INNER JOIN patient_detail_balance ON patient_detail_balance_01.patient = patient_detail_balance.patient AND patient_detail_balance_01.`name` = patient_detail_balance.`name` SET patient_detail_balance_01.`day` = patient_detail_balance.`day`,patient_detail_balance_01.cover = patient_detail_balance.cover WHERE patient_detail_balance.patient = NEW.patient;
UPDATE balance_header_03 INNER JOIN balance_header_01 ON balance_header_03.patient = balance_header_01.patient AND balance_header_03.`name` = balance_header_01.`name` SET balance_header_03.header_annual_limit = balance_header_01.header_annual_limit,balance_header_03.header_annual_limit_utilized = balance_header_01.header_annual_limit_utilized,balance_header_03.header_annual_limit_balance = balance_header_01.header_annual_limit_balance,balance_header_03.deductible_per_year = balance_header_01.deductible_per_year,balance_header_03.deductible_per_year_utilized = balance_header_01.deductible_per_year_utilized,balance_header_03.deductible_per_year_balance = balance_header_01.deductible_per_year_balance WHERE balance_header_03.patient = NEW.patient;
UPDATE balance_detail_03 INNER JOIN balance_detail_01 ON balance_detail_03.patient = balance_detail_01.patient AND balance_detail_03.`name` = balance_detail_01.`name` SET balance_detail_03.max_day_per_year = balance_detail_01.max_day_per_year,balance_detail_03.max_day_per_year_utilized = balance_detail_01.max_day_per_year_utilized,balance_detail_03.max_day_per_year_balance = balance_detail_01.max_day_per_year_balance,balance_detail_03.detail_annual_limit = balance_detail_01.detail_annual_limit,balance_detail_03.detail_annual_limit_utilized = balance_detail_01.detail_annual_limit_utilized,balance_detail_03.detail_annual_limit_balance = balance_detail_01.detail_annual_limit_balance WHERE balance_detail_03.patient = NEW.patient;

DELETE FROM pre_analysis_02 WHERE pre_analysis_02.`case` = NEW.`case`;
INSERT INTO pre_analysis_02 (`case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability) SELECT `case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability FROM pre_analysis_01 WHERE pre_analysis_01.`case` = NEW.`case`;
UPDATE `worksheet` INNER JOIN plan_detail ON worksheet.detail = plan_detail.id INNER JOIN analysis_02 ON worksheet.id = analysis_02.id INNER JOIN worksheet_staging ON worksheet.id = worksheet_staging.id SET `worksheet`.`actual` = `analysis_02`.`actual`,`worksheet`.`non_prorate` = `analysis_02`.`non_prorate`,`worksheet`.`prorate_result` = `analysis_02`.`prorate_result`,`worksheet`.`remaining_deductible` = `analysis_02`.`remaining_deductible`,`worksheet`.`copayment` = `analysis_02`.`copayment`,`worksheet`.`per_day_limit` = `analysis_02`.`per_day_limit`,`worksheet`.`per_day_limit_balance` = `analysis_02`.`per_day_limit_balance`,`worksheet`.`per_case_limit` = `analysis_02`.`per_case_limit`,`worksheet`.`remaining_day` = `analysis_02`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `analysis_02`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `analysis_02`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `analysis_02`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `analysis_02`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `analysis_02`.`cash_benefit_availability`,`worksheet`.`cover` = `analysis_02`.`cover`,`worksheet`.`excess` = `analysis_02`.`excess`,`worksheet`.`deductible` = `analysis_02`.`deductible`,`worksheet`.`cash_benefit` = `analysis_02`.`cash_benefit`,`worksheet`.`tick` = 1 WHERE `worksheet`.`case` = NEW.`case`;

ELSEIF @summary > 0 THEN

INSERT INTO `his-tpa`.`worksheet` (`case`, `plan`, `header`, `detail`, `day`, `day_rate`, `actual`) VALUES (NEW.`case`, NEW.plan, NEW.header, NEW.detail, 1, @summary, (@summary*1));
UPDATE `worksheet` INNER JOIN `case` ON case.id = worksheet.case SET `worksheet`.`cover` = 0,`worksheet`.`excess` = 0,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0,`worksheet`.`tick` = 0 WHERE `case`.`ws_approval` <> 3 AND `worksheet`.`case` = NEW.`case` AND `worksheet`.`detail` = NEW.detail AND `worksheet`.`day_rate` = 1;
UPDATE worksheet set `day_rate` = @summary, `worksheet`.`remarks`= if(NEW.client = 30,CONCAT('Co-share 25%'),if(NEW.client = 38,CONCAT('SELURUH BIAYA DIJAMINKAN TERLEBIH DAHULU'),NULL)) where worksheet.`case` = NEW.`case` and worksheet.detail=NEW.`detail`;	

UPDATE principle_header_balance_01 INNER JOIN principle_header_balance ON principle_header_balance_01.principle = principle_header_balance.principle AND principle_header_balance_01.`name` = principle_header_balance.`name` SET principle_header_balance_01.cover = principle_header_balance.cover,principle_header_balance_01.deductible = principle_header_balance.deductible WHERE principle_header_balance.principle = NEW.principle;
UPDATE principle_detail_balance_01 INNER JOIN principle_detail_balance ON principle_detail_balance_01.principle = principle_detail_balance.principle AND principle_detail_balance_01.`name` = principle_detail_balance.`name` SET principle_detail_balance_01.`day` = principle_detail_balance.`day`,principle_detail_balance_01.cover = principle_detail_balance.cover WHERE principle_detail_balance.principle = NEW.principle;
UPDATE patient_header_balance_01 INNER JOIN patient_header_balance ON patient_header_balance_01.patient = patient_header_balance.patient AND patient_header_balance_01.`name` = patient_header_balance.`name` SET patient_header_balance_01.cover = patient_header_balance.cover,patient_header_balance_01.deductible = patient_header_balance.deductible WHERE patient_header_balance.patient = NEW.patient;
UPDATE patient_detail_balance_01 INNER JOIN patient_detail_balance ON patient_detail_balance_01.patient = patient_detail_balance.patient AND patient_detail_balance_01.`name` = patient_detail_balance.`name` SET patient_detail_balance_01.`day` = patient_detail_balance.`day`,patient_detail_balance_01.cover = patient_detail_balance.cover WHERE patient_detail_balance.patient = NEW.patient;
UPDATE balance_header_03 INNER JOIN balance_header_01 ON balance_header_03.patient = balance_header_01.patient AND balance_header_03.`name` = balance_header_01.`name` SET balance_header_03.header_annual_limit = balance_header_01.header_annual_limit,balance_header_03.header_annual_limit_utilized = balance_header_01.header_annual_limit_utilized,balance_header_03.header_annual_limit_balance = balance_header_01.header_annual_limit_balance,balance_header_03.deductible_per_year = balance_header_01.deductible_per_year,balance_header_03.deductible_per_year_utilized = balance_header_01.deductible_per_year_utilized,balance_header_03.deductible_per_year_balance = balance_header_01.deductible_per_year_balance WHERE balance_header_03.patient = NEW.patient;
UPDATE balance_detail_03 INNER JOIN balance_detail_01 ON balance_detail_03.patient = balance_detail_01.patient AND balance_detail_03.`name` = balance_detail_01.`name` SET balance_detail_03.max_day_per_year = balance_detail_01.max_day_per_year,balance_detail_03.max_day_per_year_utilized = balance_detail_01.max_day_per_year_utilized,balance_detail_03.max_day_per_year_balance = balance_detail_01.max_day_per_year_balance,balance_detail_03.detail_annual_limit = balance_detail_01.detail_annual_limit,balance_detail_03.detail_annual_limit_utilized = balance_detail_01.detail_annual_limit_utilized,balance_detail_03.detail_annual_limit_balance = balance_detail_01.detail_annual_limit_balance WHERE balance_detail_03.patient = NEW.patient;

DELETE FROM pre_analysis_02 WHERE pre_analysis_02.`case` = NEW.`case`;
INSERT INTO pre_analysis_02 (`case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability) SELECT `case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability FROM pre_analysis_01 WHERE pre_analysis_01.`case` = NEW.`case`;
UPDATE `worksheet` INNER JOIN plan_detail ON worksheet.detail = plan_detail.id INNER JOIN analysis_02 ON worksheet.id = analysis_02.id INNER JOIN worksheet_staging ON worksheet.id = worksheet_staging.id SET `worksheet`.`actual` = `analysis_02`.`actual`,`worksheet`.`non_prorate` = `analysis_02`.`non_prorate`,`worksheet`.`prorate_result` = `analysis_02`.`prorate_result`,`worksheet`.`remaining_deductible` = `analysis_02`.`remaining_deductible`,`worksheet`.`copayment` = `analysis_02`.`copayment`,`worksheet`.`per_day_limit` = `analysis_02`.`per_day_limit`,`worksheet`.`per_day_limit_balance` = `analysis_02`.`per_day_limit_balance`,`worksheet`.`per_case_limit` = `analysis_02`.`per_case_limit`,`worksheet`.`remaining_day` = `analysis_02`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `analysis_02`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `analysis_02`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `analysis_02`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `analysis_02`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `analysis_02`.`cash_benefit_availability`,`worksheet`.`cover` = `analysis_02`.`cover`,`worksheet`.`excess` = `analysis_02`.`excess`,`worksheet`.`deductible` = `analysis_02`.`deductible`,`worksheet`.`cash_benefit` = `analysis_02`.`cash_benefit`,`worksheet`.`tick` = 1 WHERE `worksheet`.`case` = NEW.`case`;

END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigger_02`;
DELIMITER ;;
CREATE TRIGGER `trigger_02` AFTER UPDATE ON `pre_worksheet_edc_02` FOR EACH ROW BEGIN 

DECLARE validation integer;
DECLARE summary integer;

SET @validation := (select count(`worksheet`.`case`) from worksheet where worksheet.`case` = NEW.`case` AND worksheet.`detail` = NEW.`detail`);
SET @summary:= (select pre_worksheet_edc_01.amount from pre_worksheet_edc_01 where pre_worksheet_edc_01.`case` = NEW.`case` AND pre_worksheet_edc_01.`detail` = NEW.`detail`  group by pre_worksheet_edc_01.`case`);

IF @validation > 0 THEN

UPDATE worksheet set `day` = NEW.`day`, `day_rate` = @summary, `worksheet`.`remarks`= if(NEW.client = 30,CONCAT('Co-share 25%'),if(NEW.client = 38,CONCAT('SELURUH BIAYA DIJAMINKAN TERLEBIH DAHULU'),NULL)) where worksheet.`case` = NEW.`case` and worksheet.detail = NEW.`detail`; 
UPDATE `worksheet` INNER JOIN `case` ON case.id = worksheet.case SET `worksheet`.`cover` = 0,`worksheet`.`excess` = 0,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0,`worksheet`.`tick` = 0, `worksheet`.`created_by` =`case`.`created_by`, `worksheet`.`create_date`=`case`.`create_date` WHERE `case`.`ws_approval` <> 3 AND `worksheet`.`case` = NEW.`case` AND `worksheet`.`detail` = NEW.detail;

UPDATE principle_header_balance_01 INNER JOIN principle_header_balance ON principle_header_balance_01.principle = principle_header_balance.principle AND principle_header_balance_01.`name` = principle_header_balance.`name` SET principle_header_balance_01.cover = principle_header_balance.cover,principle_header_balance_01.deductible = principle_header_balance.deductible WHERE principle_header_balance.principle = NEW.principle;
UPDATE principle_detail_balance_01 INNER JOIN principle_detail_balance ON principle_detail_balance_01.principle = principle_detail_balance.principle AND principle_detail_balance_01.`name` = principle_detail_balance.`name` SET principle_detail_balance_01.`day` = principle_detail_balance.`day`,principle_detail_balance_01.cover = principle_detail_balance.cover WHERE principle_detail_balance.principle = NEW.principle;
UPDATE patient_header_balance_01 INNER JOIN patient_header_balance ON patient_header_balance_01.patient = patient_header_balance.patient AND patient_header_balance_01.`name` = patient_header_balance.`name` SET patient_header_balance_01.cover = patient_header_balance.cover,patient_header_balance_01.deductible = patient_header_balance.deductible WHERE patient_header_balance.patient = NEW.patient;
UPDATE patient_detail_balance_01 INNER JOIN patient_detail_balance ON patient_detail_balance_01.patient = patient_detail_balance.patient AND patient_detail_balance_01.`name` = patient_detail_balance.`name` SET patient_detail_balance_01.`day` = patient_detail_balance.`day`,patient_detail_balance_01.cover = patient_detail_balance.cover WHERE patient_detail_balance.patient = NEW.patient;
UPDATE balance_header_03 INNER JOIN balance_header_01 ON balance_header_03.patient = balance_header_01.patient AND balance_header_03.`name` = balance_header_01.`name` SET balance_header_03.header_annual_limit = balance_header_01.header_annual_limit,balance_header_03.header_annual_limit_utilized = balance_header_01.header_annual_limit_utilized,balance_header_03.header_annual_limit_balance = balance_header_01.header_annual_limit_balance,balance_header_03.deductible_per_year = balance_header_01.deductible_per_year,balance_header_03.deductible_per_year_utilized = balance_header_01.deductible_per_year_utilized,balance_header_03.deductible_per_year_balance = balance_header_01.deductible_per_year_balance WHERE balance_header_03.patient = NEW.patient;
UPDATE balance_detail_03 INNER JOIN balance_detail_01 ON balance_detail_03.patient = balance_detail_01.patient AND balance_detail_03.`name` = balance_detail_01.`name` SET balance_detail_03.max_day_per_year = balance_detail_01.max_day_per_year,balance_detail_03.max_day_per_year_utilized = balance_detail_01.max_day_per_year_utilized,balance_detail_03.max_day_per_year_balance = balance_detail_01.max_day_per_year_balance,balance_detail_03.detail_annual_limit = balance_detail_01.detail_annual_limit,balance_detail_03.detail_annual_limit_utilized = balance_detail_01.detail_annual_limit_utilized,balance_detail_03.detail_annual_limit_balance = balance_detail_01.detail_annual_limit_balance WHERE balance_detail_03.patient = NEW.patient;

DELETE FROM pre_analysis_02 WHERE pre_analysis_02.`case` = NEW.`case`;
INSERT INTO pre_analysis_02 (`case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability) SELECT `case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability FROM pre_analysis_01 WHERE pre_analysis_01.`case` = NEW.`case`;
UPDATE `worksheet` INNER JOIN plan_detail ON worksheet.detail = plan_detail.id INNER JOIN analysis_02 ON worksheet.id = analysis_02.id INNER JOIN worksheet_staging ON worksheet.id = worksheet_staging.id SET `worksheet`.`actual` = `analysis_02`.`actual`,`worksheet`.`non_prorate` = `analysis_02`.`non_prorate`,`worksheet`.`prorate_result` = `analysis_02`.`prorate_result`,`worksheet`.`remaining_deductible` = `analysis_02`.`remaining_deductible`,`worksheet`.`copayment` = `analysis_02`.`copayment`,`worksheet`.`per_day_limit` = `analysis_02`.`per_day_limit`,`worksheet`.`per_day_limit_balance` = `analysis_02`.`per_day_limit_balance`,`worksheet`.`per_case_limit` = `analysis_02`.`per_case_limit`,`worksheet`.`remaining_day` = `analysis_02`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `analysis_02`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `analysis_02`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `analysis_02`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `analysis_02`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `analysis_02`.`cash_benefit_availability`,`worksheet`.`cover` = `analysis_02`.`cover`,`worksheet`.`excess` = `analysis_02`.`excess`,`worksheet`.`deductible` = `analysis_02`.`deductible`,`worksheet`.`cash_benefit` = `analysis_02`.`cash_benefit`,`worksheet`.`tick` = 1 WHERE `worksheet`.`case` = NEW.`case`;

ELSEIF @summary > 0 THEN

INSERT INTO `his-tpa`.`worksheet` (`case`, `plan`, `header`, `detail`, `day`, `day_rate`, `actual`) VALUES (NEW.`case`, NEW.plan, NEW.header, NEW.detail, 1, @summary, (@summary*1));
UPDATE `worksheet` INNER JOIN `case` ON case.id = worksheet.case SET `worksheet`.`cover` = 0,`worksheet`.`excess` = 0,`worksheet`.`deductible` = 0,`worksheet`.`cash_benefit` = 0,`worksheet`.`tick` = 0 WHERE `case`.`ws_approval` <> 3 AND `worksheet`.`case` = NEW.`case` AND `worksheet`.`detail` = NEW.detail AND `worksheet`.`day_rate` = 1;
UPDATE worksheet set `day_rate` = @summary, `worksheet`.`remarks`= if(NEW.client = 30,CONCAT('Co-share 25%'),if(NEW.client = 38,CONCAT('SELURUH BIAYA DIJAMINKAN TERLEBIH DAHULU'),NULL)) where worksheet.`case` = NEW.`case` and worksheet.detail=NEW.`detail`;	

UPDATE principle_header_balance_01 INNER JOIN principle_header_balance ON principle_header_balance_01.principle = principle_header_balance.principle AND principle_header_balance_01.`name` = principle_header_balance.`name` SET principle_header_balance_01.cover = principle_header_balance.cover,principle_header_balance_01.deductible = principle_header_balance.deductible WHERE principle_header_balance.principle = NEW.principle;
UPDATE principle_detail_balance_01 INNER JOIN principle_detail_balance ON principle_detail_balance_01.principle = principle_detail_balance.principle AND principle_detail_balance_01.`name` = principle_detail_balance.`name` SET principle_detail_balance_01.`day` = principle_detail_balance.`day`,principle_detail_balance_01.cover = principle_detail_balance.cover WHERE principle_detail_balance.principle = NEW.principle;
UPDATE patient_header_balance_01 INNER JOIN patient_header_balance ON patient_header_balance_01.patient = patient_header_balance.patient AND patient_header_balance_01.`name` = patient_header_balance.`name` SET patient_header_balance_01.cover = patient_header_balance.cover,patient_header_balance_01.deductible = patient_header_balance.deductible WHERE patient_header_balance.patient = NEW.patient;
UPDATE patient_detail_balance_01 INNER JOIN patient_detail_balance ON patient_detail_balance_01.patient = patient_detail_balance.patient AND patient_detail_balance_01.`name` = patient_detail_balance.`name` SET patient_detail_balance_01.`day` = patient_detail_balance.`day`,patient_detail_balance_01.cover = patient_detail_balance.cover WHERE patient_detail_balance.patient = NEW.patient;
UPDATE balance_header_03 INNER JOIN balance_header_01 ON balance_header_03.patient = balance_header_01.patient AND balance_header_03.`name` = balance_header_01.`name` SET balance_header_03.header_annual_limit = balance_header_01.header_annual_limit,balance_header_03.header_annual_limit_utilized = balance_header_01.header_annual_limit_utilized,balance_header_03.header_annual_limit_balance = balance_header_01.header_annual_limit_balance,balance_header_03.deductible_per_year = balance_header_01.deductible_per_year,balance_header_03.deductible_per_year_utilized = balance_header_01.deductible_per_year_utilized,balance_header_03.deductible_per_year_balance = balance_header_01.deductible_per_year_balance WHERE balance_header_03.patient = NEW.patient;
UPDATE balance_detail_03 INNER JOIN balance_detail_01 ON balance_detail_03.patient = balance_detail_01.patient AND balance_detail_03.`name` = balance_detail_01.`name` SET balance_detail_03.max_day_per_year = balance_detail_01.max_day_per_year,balance_detail_03.max_day_per_year_utilized = balance_detail_01.max_day_per_year_utilized,balance_detail_03.max_day_per_year_balance = balance_detail_01.max_day_per_year_balance,balance_detail_03.detail_annual_limit = balance_detail_01.detail_annual_limit,balance_detail_03.detail_annual_limit_utilized = balance_detail_01.detail_annual_limit_utilized,balance_detail_03.detail_annual_limit_balance = balance_detail_01.detail_annual_limit_balance WHERE balance_detail_03.patient = NEW.patient;

DELETE FROM pre_analysis_02 WHERE pre_analysis_02.`case` = NEW.`case`;
INSERT INTO pre_analysis_02 (`case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability) SELECT `case`,patient,admission_date,id,plan,header,detail,ws_option,max_day_per_year,max_day_rate,inner_limit,`day`,day_rate,case_rate,actual,tolerance,non_prorate,prorate,prorate_percent,prorate_result,exclusion,remaining_deductible,copayment,per_day_limit,per_day_limit_balance,per_case_limit,remaining_day,remaining_inner_limit,remaining_annual_limit,using_float_fund,remaining_float_fund,cash_benefit_availability FROM pre_analysis_01 WHERE pre_analysis_01.`case` = NEW.`case`;
UPDATE `worksheet` INNER JOIN plan_detail ON worksheet.detail = plan_detail.id INNER JOIN analysis_02 ON worksheet.id = analysis_02.id INNER JOIN worksheet_staging ON worksheet.id = worksheet_staging.id SET `worksheet`.`actual` = `analysis_02`.`actual`,`worksheet`.`non_prorate` = `analysis_02`.`non_prorate`,`worksheet`.`prorate_result` = `analysis_02`.`prorate_result`,`worksheet`.`remaining_deductible` = `analysis_02`.`remaining_deductible`,`worksheet`.`copayment` = `analysis_02`.`copayment`,`worksheet`.`per_day_limit` = `analysis_02`.`per_day_limit`,`worksheet`.`per_day_limit_balance` = `analysis_02`.`per_day_limit_balance`,`worksheet`.`per_case_limit` = `analysis_02`.`per_case_limit`,`worksheet`.`remaining_day` = `analysis_02`.`remaining_day`,`worksheet`.`remaining_inner_limit` = `analysis_02`.`remaining_inner_limit`,`worksheet`.`remaining_annual_limit` = `analysis_02`.`remaining_annual_limit`,`worksheet`.`using_float_fund` = `analysis_02`.`using_float_fund`,`worksheet`.`remaining_float_fund` = `analysis_02`.`remaining_float_fund`,`worksheet`.`cash_benefit_availability` = `analysis_02`.`cash_benefit_availability`,`worksheet`.`cover` = `analysis_02`.`cover`,`worksheet`.`excess` = `analysis_02`.`excess`,`worksheet`.`deductible` = `analysis_02`.`deductible`,`worksheet`.`cash_benefit` = `analysis_02`.`cash_benefit`,`worksheet`.`tick` = 1 WHERE `worksheet`.`case` = NEW.`case`;

END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `users01`;
DELIMITER ;;
CREATE TRIGGER `users01` BEFORE INSERT ON `users` FOR EACH ROW BEGIN

IF NEW.report_to <> 8 THEN
 SET NEw.report_to =8;
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `users02`;
DELIMITER ;;
CREATE TRIGGER `users02` BEFORE UPDATE ON `users` FOR EACH ROW BEGIN

IF NEW.report_to <> 8 THEN
 SET NEw.report_to =8;
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `Triger_user`;
DELIMITER ;;
CREATE TRIGGER `Triger_user` BEFORE INSERT ON `users_hospital` FOR EACH ROW BEGIN

INSERT INTO `users` (`username`,`full_name`,`password`,`userlevel`,`status`) VALUES (NEW.username,NEW.full_name,NEW.password,9,1); 


END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigger_x`;
DELIMITER ;;
CREATE TRIGGER `trigger_x` BEFORE INSERT ON `worksheet` FOR EACH ROW BEGIN

IF(NEW.start_date IS NOT NULL OR NEW.end_date IS NOT NULL) AND (SELECT `case`.`client` AS `client` FROM `case` WHERE case.id = NEW.`case` AND `case`.`client` in (16,17,37)) THEN
 SET NEW.remarks_01 = concat((SELECT name FROM plan_detail WHERE id = NEW.detail),' : From ',DATE_FORMAT(NEW.`start_date`, '%d-%m-%Y'),' until ',DATE_FORMAT(NEW.`end_date`, '%d-%m-%Y'));
END IF;

IF (SELECT `case`.`status` FROM `case` INNER JOIN worksheet ON `case`.id = worksheet.`case` WHERE `case`.id = NEW.case  AND `case`.`id` NOT IN (421326,421327) AND `case`.`id` NOT IN (321856,417671,420539) GROUP BY worksheet.`case`) in (15,16,17,18,26,27,28,29,30) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You dont have permission to edit worksheet.';
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigger_y`;
DELIMITER ;;
CREATE TRIGGER `trigger_y` BEFORE UPDATE ON `worksheet` FOR EACH ROW BEGIN

IF(NEW.start_date IS NOT NULL OR NEW.end_date IS NOT NULL) AND (SELECT `case`.`client` AS `client` FROM `case` WHERE case.id = NEW.`case` AND `case`.`client` in (16,17,37)) THEN
 SET NEW.remarks_01 = concat((SELECT name FROM plan_detail WHERE id = NEW.detail),' : From ',DATE_FORMAT(NEW.`start_date`, '%d-%m-%Y'),' until ',DATE_FORMAT(NEW.`end_date`, '%d-%m-%Y'));
END IF;


IF (SELECT `case`.`status` FROM `case` INNER JOIN worksheet ON `case`.id = worksheet.`case` WHERE `case`.id = NEW.case AND `case`.`id` NOT IN (421897) GROUP BY worksheet.`case`) in (15,16,17,18,26,27,28,29,30) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You dont have permission to edit worksheet.';
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `trigger_z`;
DELIMITER ;;
CREATE TRIGGER `trigger_z` BEFORE DELETE ON `worksheet` FOR EACH ROW BEGIN


IF (SELECT `case`.`status` FROM `case` INNER JOIN worksheet ON `case`.id = worksheet.`case` WHERE `case`.id = OLD.case GROUP BY worksheet.`case`) in (15,16,17,18,26,27,28,29,30) THEN
 SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You dont have permission to edit worksheet.';
END IF;

END
;;
DELIMITER ;
DROP TRIGGER IF EXISTS `insert_worksheet_history`;
DELIMITER ;;
CREATE TRIGGER `insert_worksheet_history` AFTER INSERT ON `worksheet_balancer` FOR EACH ROW BEGIN

INSERT INTO `his-tpa`.`worksheet_balancer_history` (`claim_ref`, `plan_id`, `policy_no`, `benefit_code`, `benefit_desc`, `amount_incurred`, `amount_approved`, `amount_not_approved`,process_date) VALUES (NEW.claim_ref,NEW.plan_id,NEW.policy_no,NEW.benefit_code,NEW.benefit_desc,NEW.amount_incurred,NEW.amount_approved,NEW.amount_not_approved,NOW());

END
;;
DELIMITER ;
